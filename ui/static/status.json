[{"owner":"gnocchixyz","repo":"gnocchi","updated_at":"2018-03-28T15:03:37Z","branch":"master","pulls":[{"deletions":4,"pastamaker_combined_status":"failure","commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/840\/commits","merge_commit_sha":"99693dbd1914e7bd433b641c513ae4e0e7f006c9","labels":[],"number":840,"pastamaker_travis_state":"error","assignee":null,"pastamaker_weight":-1,"mergeable":true,"closed_at":null,"additions":4,"statuses_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/statuses\/d08213a0eae88e5f8ea3a14c0e92ebe31d2fc178","id":177998315,"requested_reviewers":[],"maintainer_can_modify":true,"title":"tests: replace refresh_metrics() with trigger_processing in statsd","comments":3,"merged_at":null,"state":"open","_links":{"review_comment":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/comments{\/number}"},"commits":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/840\/commits"},"self":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/840"},"comments":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/840\/comments"},"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/840"},"review_comments":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/840\/comments"},"issue":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/840"},"statuses":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/statuses\/d08213a0eae88e5f8ea3a14c0e92ebe31d2fc178"}},"pastamaker_reviews":[{"body":"\/me looks at test failure :P","commit_id":"d08213a0eae88e5f8ea3a14c0e92ebe31d2fc178","submitted_at":"2018-03-28T12:55:41Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/840#pullrequestreview-107664050","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/840","state":"APPROVED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/840#pullrequestreview-107664050"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/840"}},"user":{"following_url":"https:\/\/api.github.com\/users\/chungg\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/chungg\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/chungg\/orgs","url":"https:\/\/api.github.com\/users\/chungg","events_url":"https:\/\/api.github.com\/users\/chungg\/events{\/privacy}","html_url":"https:\/\/github.com\/chungg","subscriptions_url":"https:\/\/api.github.com\/users\/chungg\/subscriptions","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/5091603?v=4","repos_url":"https:\/\/api.github.com\/users\/chungg\/repos","received_events_url":"https:\/\/api.github.com\/users\/chungg\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/chungg\/starred{\/owner}{\/repo}","site_admin":false,"login":"chungg","type":"User","id":5091603,"followers_url":"https:\/\/api.github.com\/users\/chungg\/followers"},"id":107664050}],"pastamaker_commits":[{"files":[{"status":"modified","deletions":4,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/d08213a0eae88e5f8ea3a14c0e92ebe31d2fc178\/gnocchi\/tests\/test_statsd.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/d08213a0eae88e5f8ea3a14c0e92ebe31d2fc178\/gnocchi\/tests\/test_statsd.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/test_statsd.py?ref=d08213a0eae88e5f8ea3a14c0e92ebe31d2fc178","filename":"gnocchi\/tests\/test_statsd.py","sha":"43c6ed50cf25956f0347e5d411e7c521bfa0a677","additions":4,"patch":"@@ -73,7 +73,7 @@ def _test_gauge_or_ms(self, metric_type, utcnow):\n \n         metric = r.get_metric(metric_key)\n \n-        self.chef.refresh_metrics([metric], sync=True)\n+        self.trigger_processing([metric])\n \n         measures = self.storage.get_measures(metric, self.aggregations)\n         self.assertEqual({\"mean\": [\n@@ -92,7 +92,7 @@ def _test_gauge_or_ms(self, metric_type, utcnow):\n             (\"127.0.0.1\", 12345))\n         self.stats.flush()\n \n-        self.chef.refresh_metrics([metric], sync=True)\n+        self.trigger_processing([metric])\n \n         measures = self.storage.get_measures(metric, self.aggregations)\n         self.assertEqual({\"mean\": [\n@@ -124,7 +124,7 @@ def test_counter(self, utcnow):\n         metric = r.get_metric(metric_key)\n         self.assertIsNotNone(metric)\n \n-        self.chef.refresh_metrics([metric], sync=True)\n+        self.trigger_processing([metric])\n \n         measures = self.storage.get_measures(metric, self.aggregations)\n         self.assertEqual({\"mean\": [\n@@ -142,7 +142,7 @@ def test_counter(self, utcnow):\n             (\"127.0.0.1\", 12345))\n         self.stats.flush()\n \n-        self.chef.refresh_metrics([metric], sync=True)\n+        self.trigger_processing([metric])\n \n         measures = self.storage.get_measures(metric, self.aggregations)\n         self.assertEqual({\"mean\": [","changes":8}],"committer":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"stats":{"deletions":4,"additions":4,"total":8},"author":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/d08213a0eae88e5f8ea3a14c0e92ebe31d2fc178","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/d08213a0eae88e5f8ea3a14c0e92ebe31d2fc178\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/d08213a0eae88e5f8ea3a14c0e92ebe31d2fc178","sha":"d08213a0eae88e5f8ea3a14c0e92ebe31d2fc178","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/51ac20f06690f54933fb6f84ba3353ea0eae5170","sha":"51ac20f06690f54933fb6f84ba3353ea0eae5170","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/51ac20f06690f54933fb6f84ba3353ea0eae5170"}],"commit":{"committer":{"date":"2018-03-28T10:44:35Z","name":"Julien Danjou","email":"julien@danjou.info"},"author":{"date":"2018-03-28T10:44:35Z","name":"Julien Danjou","email":"julien@danjou.info"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/d08213a0eae88e5f8ea3a14c0e92ebe31d2fc178","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/a32f96029ff259f8897f035a1ba80dd93ddf4d19","sha":"a32f96029ff259f8897f035a1ba80dd93ddf4d19"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"tests: replace refresh_metrics() with trigger_processing in statsd\n\nThe current tests can fail just because the timeout it not set to None. The\nbase method trigger_processing is meant to be used just for that!"}}],"diff_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/840.diff","pastamaker_ci_statuses":{},"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/840","body":"The current tests can fail just because the timeout it not set to None. The\nbase method trigger_processing is meant to be used just for that!","head":{"repo":{"issues_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/issues{\/number}","deployments_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/deployments","has_wiki":true,"forks_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/forks","mirror_url":null,"issue_events_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/issues\/events{\/number}","subscription_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/subscription","merges_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/merges","collaborators_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/collaborators{\/collaborator}","updated_at":"2017-05-19T16:20:11Z","private":false,"pulls_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/pulls{\/number}","issue_comment_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/issues\/comments{\/number}","trees_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/git\/trees{\/sha}","full_name":"jd\/gnocchi","owner":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"statuses_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/statuses\/{sha}","id":91824535,"keys_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/keys{\/key_id}","size":5197,"tags_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/tags","archived":false,"contributors_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/contributors","downloads_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/downloads","has_downloads":true,"assignees_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/assignees{\/user}","contents_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/contents\/{+path}","has_pages":false,"git_refs_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/git\/refs{\/sha}","has_projects":true,"clone_url":"https:\/\/github.com\/jd\/gnocchi.git","watchers_count":0,"git_tags_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/git\/tags{\/sha}","milestones_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/milestones{\/number}","stargazers_count":0,"homepage":null,"branches_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/branches{\/branch}","fork":true,"commits_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/commits{\/sha}","releases_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/releases{\/id}","description":"Timeseries database","archive_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/{archive_format}{\/ref}","labels_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/labels{\/name}","events_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/events","comments_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/comments{\/number}","html_url":"https:\/\/github.com\/jd\/gnocchi","forks":0,"compare_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/compare\/{base}...{head}","language":"Python","git_url":"git:\/\/github.com\/jd\/gnocchi.git","svn_url":"https:\/\/github.com\/jd\/gnocchi","notifications_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/notifications{?since,all,participating}","has_issues":false,"ssh_url":"git@github.com:jd\/gnocchi.git","blobs_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/git\/blobs{\/sha}","languages_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/languages","hooks_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/hooks","open_issues_count":0,"watchers":0,"name":"gnocchi","license":null,"url":"https:\/\/api.github.com\/repos\/jd\/gnocchi","created_at":"2017-05-19T16:20:08Z","pushed_at":"2018-03-28T10:45:25Z","forks_count":0,"default_branch":"master","teams_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/teams","open_issues":0,"git_commits_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/git\/commits{\/sha}","subscribers_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/subscribers","stargazers_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/stargazers"},"sha":"d08213a0eae88e5f8ea3a14c0e92ebe31d2fc178","ref":"statsd-test-lock-fix","user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"label":"jd:statsd-test-lock-fix"},"pastamaker_travis_detail":{"commit_id":107100021,"repository_id":13523406,"jobs":[{"build_id":359304709,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/359304710\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"2565.1","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":107100021,"finished_at":"2018-03-28T10:51:13Z","started_at":"2018-03-28T10:47:22Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","env":"TARGET=pep8","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux"},"id":359304710},{"build_id":359304709,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/359304711\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"2565.2","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":107100021,"finished_at":"2018-03-28T10:51:30Z","started_at":"2018-03-28T10:47:12Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","env":"TARGET=docs","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux"},"id":359304711},{"build_id":359304709,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/359304712\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"2565.3","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":107100021,"finished_at":"2018-03-28T10:55:42Z","started_at":"2018-03-28T10:47:15Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","env":"TARGET=docs-gnocchi.xyz","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux"},"id":359304712},{"build_id":359304709,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/359304713\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"2565.4","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":107100021,"finished_at":"2018-03-28T10:59:48Z","started_at":"2018-03-28T10:52:20Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","env":"TARGET=py27-mysql-ceph-upgrade-from-4.0","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux"},"id":359304713},{"build_id":359304709,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/359304714\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"2565.5","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":107100021,"finished_at":"2018-03-28T10:59:35Z","started_at":"2018-03-28T10:52:00Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","env":"TARGET=py35-postgresql-file-upgrade-from-4.0","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux"},"id":359304714},{"build_id":359304709,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/359304715\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"2565.6","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":107100021,"finished_at":"2018-03-28T10:59:38Z","started_at":"2018-03-28T10:53:51Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","env":"TARGET=py27-mysql-ceph-upgrade-from-4.1","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux"},"id":359304715},{"build_id":359304709,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/359304716\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"2565.7","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":107100021,"finished_at":"2018-03-28T11:04:02Z","started_at":"2018-03-28T10:56:17Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","env":"TARGET=py35-postgresql-file-upgrade-from-4.1","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux"},"id":359304716},{"build_id":359304709,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/359304717\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"2565.8","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":107100021,"finished_at":"2018-03-28T11:06:20Z","started_at":"2018-03-28T11:00:15Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","env":"TARGET=py27-mysql-ceph-upgrade-from-4.2","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux"},"id":359304717},{"build_id":359304709,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/359304718\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"2565.9","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":107100021,"finished_at":"2018-03-28T11:07:32Z","started_at":"2018-03-28T11:00:24Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","env":"TARGET=py35-postgresql-file-upgrade-from-4.2","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux"},"id":359304718},{"build_id":359304709,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/359304719\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"2565.10","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":107100021,"finished_at":"2018-03-28T14:53:09Z","started_at":"2018-03-28T14:08:33Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","env":"TARGET=py27-mysql","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux"},"id":359304719},{"build_id":359304709,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/359304720\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"2565.11","allow_failure":false,"queue":"builds.gce","state":"failed","commit_id":107100021,"finished_at":"2018-03-28T16:44:55Z","started_at":"2018-03-28T16:13:17Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","env":"TARGET=py35-mysql","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux"},"id":359304720},{"build_id":359304709,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/359304721\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"2565.12","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":107100021,"finished_at":"2018-03-28T11:52:23Z","started_at":"2018-03-28T11:06:54Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","env":"TARGET=py27-postgresql","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux"},"id":359304721},{"build_id":359304709,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/359304722\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"2565.13","allow_failure":false,"queue":"builds.gce","state":"errored","commit_id":107100021,"finished_at":"2018-03-28T17:25:11Z","started_at":"2018-03-28T16:35:46Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","env":"TARGET=py35-postgresql","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux"},"id":359304722}],"event_type":"pull_request","finished_at":"2018-03-28T17:25:11Z","number":"2565","id":359304709,"state":"errored","pull_request_title":"tests: replace refresh_metrics() with trigger_processing in statsd","pull_request":true,"duration":13772,"started_at":"2018-03-28T16:35:46Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","env":["TARGET=pep8","TARGET=docs","TARGET=docs-gnocchi.xyz","TARGET=py27-mysql-ceph-upgrade-from-4.0","TARGET=py35-postgresql-file-upgrade-from-4.0","TARGET=py27-mysql-ceph-upgrade-from-4.1","TARGET=py35-postgresql-file-upgrade-from-4.1","TARGET=py27-mysql-ceph-upgrade-from-4.2","TARGET=py35-postgresql-file-upgrade-from-4.2","TARGET=py27-mysql","TARGET=py35-mysql","TARGET=py27-postgresql","TARGET=py35-postgresql"],"language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","os":"linux","deploy":{"true":{"all_branches":true,"tags":true},"password":{"secure":"c+Ccx3SHCWepiy0PUxDJ7XO9r3aNYnHjkzxF5c\/kjV8QaCJayAJEgXJnBKhvjroqwgn7JPUgpD6QdSWdB4FqjbZYQ3I3oHOO1YL0vYYa8wHG5HuMsMp4J8qvzgs3QNQDECPI1mXsPevn3VMfGszUN+6BQrHB3FbZsTtOmE+Kmgok5NCT+obsfEhVea\/UOD0XFUkVW9VJhPjQ2ytvYvFIc46\/73GQf2Er\/5DCa\/4GGDEBSD++bDJgp3kQj438xslCAFeZWDwGsa+cTc43PI0Y0+E144ySVY7QyVbZ1B66a1BGWVrXJuM+gW\/eIBCMN1FJXmD7CDdPa22azKI8dfMF7qaH3Oiv3cVovPWpubOvhTUHUFwG8+W7Fx+zUKktCWiLer\/fZvEd3W8tcgby2kNOdcUfKfDB2ImZJ+P694\/OJ4jJ8T5TQerruNoP2OstzcBMon77Ry0XawXR15SZd4JhbqhSi+h7XV6EYmct1UN4zoysA7fx\/cWHcBxdnm2G6R0gzmOiiGUd74ptU8lZ3IlEP6EZckK\/OZOdy1I8EQeUe7aiTooXZDAn07iPkDZliYRr2e36ij\/xjtWCe1AjCksn\/xdKfHOKJv5UVob495DU2GuNObe01ewXzexcnldjfp9Sb8SVEFuhHx6IvH5OC+vAq+BVYu2jwvMcVfXi3VSOkB4="},"distributions":"sdist bdist_wheel","user":"jd","provider":"pypi"}},"job_ids":[359304710,359304711,359304712,359304713,359304714,359304715,359304716,359304717,359304718,359304719,359304720,359304721,359304722],"pull_request_number":840,"resume_state":"error"},"commits":1,"author_association":"OWNER","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/840\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/840","pastamaker_travis_url":"https:\/\/travis-ci.org\/gnocchixyz\/gnocchi\/builds\/359304709?utm_source=github_status&utm_medium=notification","updated_at":"2018-03-28T15:03:37Z","pastamaker_approved":false,"base":{"repo":{"issues_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues{\/number}","deployments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/deployments","has_wiki":false,"forks_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/forks","mirror_url":null,"issue_events_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/events{\/number}","subscription_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/subscription","merges_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/merges","collaborators_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/collaborators{\/collaborator}","updated_at":"2018-03-27T12:27:06Z","private":false,"pulls_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls{\/number}","issue_comment_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments{\/number}","trees_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees{\/sha}","full_name":"gnocchixyz\/gnocchi","owner":{"following_url":"https:\/\/api.github.com\/users\/gnocchixyz\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/gnocchixyz\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/gnocchixyz\/orgs","url":"https:\/\/api.github.com\/users\/gnocchixyz","events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/events{\/privacy}","html_url":"https:\/\/github.com\/gnocchixyz","subscriptions_url":"https:\/\/api.github.com\/users\/gnocchixyz\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/26142905?v=4","repos_url":"https:\/\/api.github.com\/users\/gnocchixyz\/repos","received_events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/gnocchixyz\/starred{\/owner}{\/repo}","site_admin":false,"login":"gnocchixyz","type":"Organization","id":26142905,"followers_url":"https:\/\/api.github.com\/users\/gnocchixyz\/followers"},"statuses_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/statuses\/{sha}","id":91715647,"keys_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/keys{\/key_id}","size":4980,"tags_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/tags","archived":false,"contributors_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contributors","downloads_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/downloads","has_downloads":true,"assignees_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/assignees{\/user}","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/{+path}","has_pages":false,"git_refs_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/refs{\/sha}","has_projects":false,"clone_url":"https:\/\/github.com\/gnocchixyz\/gnocchi.git","watchers_count":133,"git_tags_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/tags{\/sha}","milestones_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/milestones{\/number}","stargazers_count":133,"homepage":null,"branches_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/branches{\/branch}","fork":false,"commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits{\/sha}","releases_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/releases{\/id}","description":"Timeseries database","archive_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/{archive_format}{\/ref}","labels_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/labels{\/name}","events_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/events","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/comments{\/number}","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi","forks":30,"compare_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/compare\/{base}...{head}","language":"Python","git_url":"git:\/\/github.com\/gnocchixyz\/gnocchi.git","svn_url":"https:\/\/github.com\/gnocchixyz\/gnocchi","notifications_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/notifications{?since,all,participating}","has_issues":true,"ssh_url":"git@github.com:gnocchixyz\/gnocchi.git","blobs_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/blobs{\/sha}","languages_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/languages","hooks_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/hooks","open_issues_count":54,"watchers":133,"name":"gnocchi","license":{"spdx_id":"Apache-2.0","url":"https:\/\/api.github.com\/licenses\/apache-2.0","name":"Apache License 2.0","key":"apache-2.0"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi","created_at":"2017-05-18T16:32:52Z","pushed_at":"2018-03-28T10:45:23Z","forks_count":30,"default_branch":"master","teams_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/teams","open_issues":54,"git_commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits{\/sha}","subscribers_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/subscribers","stargazers_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/stargazers"},"sha":"51ac20f06690f54933fb6f84ba3353ea0eae5170","ref":"master","user":{"following_url":"https:\/\/api.github.com\/users\/gnocchixyz\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/gnocchixyz\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/gnocchixyz\/orgs","url":"https:\/\/api.github.com\/users\/gnocchixyz","events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/events{\/privacy}","html_url":"https:\/\/github.com\/gnocchixyz","subscriptions_url":"https:\/\/api.github.com\/users\/gnocchixyz\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/26142905?v=4","repos_url":"https:\/\/api.github.com\/users\/gnocchixyz\/repos","received_events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/gnocchixyz\/starred{\/owner}{\/repo}","site_admin":false,"login":"gnocchixyz","type":"Organization","id":26142905,"followers_url":"https:\/\/api.github.com\/users\/gnocchixyz\/followers"},"label":"gnocchixyz:master"},"rebaseable":true,"milestone":null,"requested_teams":[],"locked":false,"merged_by":null,"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/840","mergeable_state":"blocked","created_at":"2018-03-28T10:45:22Z","merged":false,"review_comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/840\/comments","review_comments":0,"assignees":[],"review_comment_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/comments{\/number}","pastamaker_approvals":[[{"bio":"doing stuff with data...","site_admin":false,"updated_at":"2018-03-19T12:46:13Z","gravatar_id":"","hireable":null,"id":5091603,"followers_url":"https:\/\/api.github.com\/users\/chungg\/followers","following_url":"https:\/\/api.github.com\/users\/chungg\/following{\/other_user}","blog":"","followers":8,"location":"canada","type":"User","email":"gord@live.ca","public_repos":16,"events_url":"https:\/\/api.github.com\/users\/chungg\/events{\/privacy}","company":null,"gists_url":"https:\/\/api.github.com\/users\/chungg\/gists{\/gist_id}","html_url":"https:\/\/github.com\/chungg","subscriptions_url":"https:\/\/api.github.com\/users\/chungg\/subscriptions","received_events_url":"https:\/\/api.github.com\/users\/chungg\/received_events","starred_url":"https:\/\/api.github.com\/users\/chungg\/starred{\/owner}{\/repo}","public_gists":1,"name":"gord chung","organizations_url":"https:\/\/api.github.com\/users\/chungg\/orgs","url":"https:\/\/api.github.com\/users\/chungg","created_at":"2013-07-25T19:05:22Z","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/5091603?v=4","repos_url":"https:\/\/api.github.com\/users\/chungg\/repos","following":0,"login":"chungg"}],[],2,[0]],"patch_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/840.patch","changed_files":1,"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"}},{"deletions":0,"pastamaker_combined_status":"failure","merge_commit_sha":"585988441f45bda97809fb759117b57e31868f58","additions":152,"labels":[],"number":832,"pastamaker_travis_state":"error","assignee":null,"commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/832\/commits","mergeable":true,"closed_at":null,"requested_reviewers":[],"statuses_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/statuses\/cb0a816aa30b329aa3194d755cffe9517cffa88d","id":176812883,"maintainer_can_modify":true,"title":"Add gnocchi-injector","comments":6,"merged_at":null,"state":"open","_links":{"review_comment":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/comments{\/number}"},"commits":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/832\/commits"},"self":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/832"},"comments":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/832\/comments"},"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/832"},"review_comments":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/832\/comments"},"issue":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/832"},"statuses":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/statuses\/cb0a816aa30b329aa3194d755cffe9517cffa88d"}},"pastamaker_reviews":[],"pastamaker_commits":[{"files":[{"status":"added","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/cb0a816aa30b329aa3194d755cffe9517cffa88d\/gnocchi\/cli\/injector.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/cb0a816aa30b329aa3194d755cffe9517cffa88d\/gnocchi\/cli\/injector.py","changes":121,"filename":"gnocchi\/cli\/injector.py","sha":"1de2bf936c85e55fe55c5641626cbc6d586203c9","additions":121,"patch":"@@ -0,0 +1,121 @@\n+# -*- encoding: utf-8 -*-\n+#\n+# Copyright (c) 2018 Red Hat\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#    http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+# implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+import random\n+import time\n+import uuid\n+\n+import daiquiri\n+import numpy\n+from oslo_config import cfg\n+\n+from gnocchi import chef\n+from gnocchi.cli import metricd\n+from gnocchi import incoming\n+from gnocchi import indexer\n+from gnocchi import service\n+from gnocchi import storage\n+from gnocchi import utils\n+\n+LOG = daiquiri.getLogger(__name__)\n+\n+\n+def injector():\n+    conf = cfg.ConfigOpts()\n+    conf.register_cli_opts([\n+        cfg.IntOpt(\"--measures\",\n+                   help=\"Measures per metric.\"),\n+        cfg.IntOpt(\"--metrics\",\n+                   help=\"Number of metrics to create.\"),\n+        cfg.IntOpt(\"--archive-policy-name\",\n+                   help=\"Name of archive policy to use.\",\n+                   default=\"low\"),\n+        cfg.IntOpt(\"--interval\",\n+                   help=\"Interval to sleep between metrics sending.\"),\n+        cfg.BoolOpt(\"--process\", default=False,\n+                    help=\"Process the ingested measures.\"),\n+    ])\n+    return _inject(service.prepare_service(conf=conf, log_to_std=True),\n+                   metrics=conf.metrics,\n+                   measures=conf.measures,\n+                   archive_policy_name=conf.archive_policy_name,\n+                   process=conf.process,\n+                   interval=conf.interval)\n+\n+\n+def _inject_from_conf(conf,\n+                      metrics, measures, archive_policy_name=\"low\",\n+                      process=False, interval=None):\n+    inc = incoming.get_driver(conf)\n+    coord = metricd.get_coordinator_and_start(str(uuid.uuid4()),\n+                                              conf.coordination_url)\n+    store = storage.get_driver(conf)\n+    idx = indexer.get_driver(conf)\n+    return _inject(inc, coord, store, idx,\n+                   metrics, measures, archive_policy_name, process, interval)\n+\n+\n+def _inject(inc, coord, store, idx,\n+            metrics, measures, archive_policy_name=\"low\", process=False,\n+            interval=None):\n+    LOG.info(\"Creating %d metrics\", metrics)\n+    with utils.StopWatch() as sw:\n+        metrics = [\n+            idx.create_metric(uuid.uuid4(), \"admin\",\n+                              archive_policy_name).id\n+            for _ in range(metrics)\n+        ]\n+    LOG.info(\"Created %d metrics in %.2fs\", metrics, sw.elapsed())\n+\n+    LOG.info(\"Generating %d measures per metric for %d metrics\u2026 \",\n+             measures, metrics)\n+    now = numpy.datetime64(utils.utcnow())\n+    with utils.StopWatch() as sw:\n+        measures = {\n+            m_id: [incoming.Measure(\n+                now + numpy.timedelta64(seconds=s),\n+                random.randint(-999999, 999999)) for s in range(measures)]\n+            for m_id in metrics\n+        }\n+    LOG.info(\"\u2026 done in %.2fs\", sw.elapsed())\n+\n+    interval_timer = utils.StopWatch().start()\n+\n+    while True:\n+        interval_timer.reset()\n+        with utils.StopWatch() as sw:\n+            inc.add_measures_batch(measures)\n+        total_measures = sum(map(len, measures.values()))\n+        LOG.info(\"Pushed %d measures in %.2fs\",\n+                 total_measures,\n+                 sw.elapsed())\n+\n+        if process:\n+            c = chef.Chef(coord, inc, idx, store)\n+\n+            with utils.StopWatch() as sw:\n+                for s in inc.iter_sacks():\n+                    c.process_new_measures_for_sack(s, blocking=True)\n+            LOG.info(\"Processed %d sacks in %.2fs\",\n+                     inc.NUM_SACKS, sw.elapsed())\n+            LOG.info(\"Speed: %.2f measures\/s\",\n+                     float(total_measures) \/ sw.elapsed())\n+\n+        if interval is None:\n+            break\n+        time.sleep(max(0, interval - interval_timer.elapsed()))\n+\n+    return total_measures","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/cli\/injector.py?ref=cb0a816aa30b329aa3194d755cffe9517cffa88d"},{"status":"added","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/cb0a816aa30b329aa3194d755cffe9517cffa88d\/gnocchi\/tests\/test_injector.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/cb0a816aa30b329aa3194d755cffe9517cffa88d\/gnocchi\/tests\/test_injector.py","changes":30,"filename":"gnocchi\/tests\/test_injector.py","sha":"b01b7fdd0d865549f6b010efe3771f2b465de1fc","additions":30,"patch":"@@ -0,0 +1,30 @@\n+# -*- encoding: utf-8 -*-\n+#\n+# Copyright \u00a9 2018 Red Hat, Inc.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n+# not use this file except in compliance with the License. You may obtain\n+# a copy of the License at\n+#\n+#      http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+# License for the specific language governing permissions and limitations\n+# under the License.\n+\n+from gnocchi.cli import injector\n+from gnocchi.tests import base\n+\n+\n+class InjectorTestCase(base.TestCase):\n+    def test_inject(self):\n+        self.assertEqual(100, injector._inject(\n+            self.incoming, self.coord, self.storage, self.index,\n+            measures=10, metrics=10))\n+\n+    def test_inject_process(self):\n+        self.assertEqual(100, injector._inject(\n+            self.incoming, self.coord, self.storage, self.index,\n+            measures=10, metrics=10, process=True))","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/test_injector.py?ref=cb0a816aa30b329aa3194d755cffe9517cffa88d"},{"status":"modified","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/cb0a816aa30b329aa3194d755cffe9517cffa88d\/setup.cfg","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/cb0a816aa30b329aa3194d755cffe9517cffa88d\/setup.cfg","changes":1,"filename":"setup.cfg","sha":"a04646747a65c1fd3416a1d9fcb8e49d606c141b","additions":1,"patch":"@@ -145,6 +145,7 @@ console_scripts =\n     gnocchi-change-sack-size = gnocchi.cli.manage:change_sack_size\n     gnocchi-statsd = gnocchi.cli.statsd:statsd\n     gnocchi-metricd = gnocchi.cli.metricd:metricd\n+    gnocchi-injector = gnocchi.cli.injector:injector\n \n oslo.config.opts =\n     gnocchi = gnocchi.opts:list_opts","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/setup.cfg?ref=cb0a816aa30b329aa3194d755cffe9517cffa88d"}],"committer":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"stats":{"deletions":0,"additions":152,"total":152},"author":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/cb0a816aa30b329aa3194d755cffe9517cffa88d","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/cb0a816aa30b329aa3194d755cffe9517cffa88d\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/cb0a816aa30b329aa3194d755cffe9517cffa88d","sha":"cb0a816aa30b329aa3194d755cffe9517cffa88d","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/51ac20f06690f54933fb6f84ba3353ea0eae5170","sha":"51ac20f06690f54933fb6f84ba3353ea0eae5170","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/51ac20f06690f54933fb6f84ba3353ea0eae5170"}],"commit":{"committer":{"date":"2018-03-28T08:56:48Z","name":"Julien Danjou","email":"julien@danjou.info"},"author":{"date":"2018-03-13T15:57:10Z","name":"Julien Danjou","email":"julien@danjou.info"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/cb0a816aa30b329aa3194d755cffe9517cffa88d","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/41e5fcca638a0eb6d13338438eca6ffbc0cc2dbf","sha":"41e5fcca638a0eb6d13338438eca6ffbc0cc2dbf"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"Add gnocchi-injector\n\nThis allows to inject measures and maybe process them in a single tool. This is\nuseful to generate load to test metricd and also profile the processing code."}}],"diff_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/832.diff","pastamaker_ci_statuses":{},"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/832","body":"This allows to inject measures and maybe process them in a single tool. This is\nuseful to generate load to test metricd and also profile the processing code.","head":{"repo":{"issues_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/issues{\/number}","deployments_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/deployments","has_wiki":true,"forks_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/forks","mirror_url":null,"issue_events_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/issues\/events{\/number}","subscription_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/subscription","merges_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/merges","collaborators_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/collaborators{\/collaborator}","updated_at":"2017-05-19T16:20:11Z","private":false,"pulls_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/pulls{\/number}","issue_comment_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/issues\/comments{\/number}","trees_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/git\/trees{\/sha}","full_name":"jd\/gnocchi","owner":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"statuses_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/statuses\/{sha}","id":91824535,"keys_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/keys{\/key_id}","size":5197,"tags_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/tags","archived":false,"downloads_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/downloads","assignees_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/assignees{\/user}","contents_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/contents\/{+path}","has_pages":false,"git_refs_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/git\/refs{\/sha}","has_projects":true,"clone_url":"https:\/\/github.com\/jd\/gnocchi.git","watchers_count":0,"git_tags_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/git\/tags{\/sha}","milestones_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/milestones{\/number}","stargazers_count":0,"comments_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/comments{\/number}","homepage":null,"branches_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/branches{\/branch}","fork":true,"commits_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/commits{\/sha}","releases_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/releases{\/id}","description":"Timeseries database","has_downloads":true,"labels_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/labels{\/name}","events_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/events","contributors_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/contributors","html_url":"https:\/\/github.com\/jd\/gnocchi","compare_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/compare\/{base}...{head}","language":"Python","git_url":"git:\/\/github.com\/jd\/gnocchi.git","svn_url":"https:\/\/github.com\/jd\/gnocchi","notifications_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/notifications{?since,all,participating}","has_issues":false,"ssh_url":"git@github.com:jd\/gnocchi.git","blobs_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/git\/blobs{\/sha}","forks":0,"hooks_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/hooks","open_issues_count":0,"watchers":0,"name":"gnocchi","license":null,"url":"https:\/\/api.github.com\/repos\/jd\/gnocchi","created_at":"2017-05-19T16:20:08Z","archive_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/{archive_format}{\/ref}","pushed_at":"2018-03-28T10:45:25Z","forks_count":0,"default_branch":"master","teams_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/teams","open_issues":0,"languages_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/languages","git_commits_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/git\/commits{\/sha}","subscribers_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/subscribers","stargazers_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/stargazers"},"sha":"cb0a816aa30b329aa3194d755cffe9517cffa88d","ref":"injector","user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"label":"jd:injector"},"pastamaker_weight":-1,"commits":1,"author_association":"OWNER","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/832\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/832","pastamaker_travis_url":"https:\/\/travis-ci.org\/gnocchixyz\/gnocchi\/builds\/359267039?utm_source=github_status&utm_medium=notification","updated_at":"2018-03-28T10:26:16Z","pastamaker_approved":false,"base":{"repo":{"issues_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues{\/number}","deployments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/deployments","has_wiki":false,"forks_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/forks","mirror_url":null,"issue_events_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/events{\/number}","subscription_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/subscription","merges_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/merges","collaborators_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/collaborators{\/collaborator}","updated_at":"2018-03-27T12:27:06Z","private":false,"pulls_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls{\/number}","issue_comment_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments{\/number}","trees_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees{\/sha}","full_name":"gnocchixyz\/gnocchi","owner":{"following_url":"https:\/\/api.github.com\/users\/gnocchixyz\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/gnocchixyz\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/gnocchixyz\/orgs","url":"https:\/\/api.github.com\/users\/gnocchixyz","events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/events{\/privacy}","html_url":"https:\/\/github.com\/gnocchixyz","subscriptions_url":"https:\/\/api.github.com\/users\/gnocchixyz\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/26142905?v=4","repos_url":"https:\/\/api.github.com\/users\/gnocchixyz\/repos","received_events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/gnocchixyz\/starred{\/owner}{\/repo}","site_admin":false,"login":"gnocchixyz","type":"Organization","id":26142905,"followers_url":"https:\/\/api.github.com\/users\/gnocchixyz\/followers"},"statuses_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/statuses\/{sha}","id":91715647,"keys_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/keys{\/key_id}","size":4980,"tags_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/tags","archived":false,"downloads_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/downloads","assignees_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/assignees{\/user}","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/{+path}","has_pages":false,"git_refs_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/refs{\/sha}","has_projects":false,"clone_url":"https:\/\/github.com\/gnocchixyz\/gnocchi.git","watchers_count":133,"git_tags_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/tags{\/sha}","milestones_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/milestones{\/number}","stargazers_count":133,"comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/comments{\/number}","homepage":null,"branches_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/branches{\/branch}","fork":false,"commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits{\/sha}","releases_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/releases{\/id}","description":"Timeseries database","has_downloads":true,"labels_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/labels{\/name}","events_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/events","contributors_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contributors","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi","compare_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/compare\/{base}...{head}","language":"Python","git_url":"git:\/\/github.com\/gnocchixyz\/gnocchi.git","svn_url":"https:\/\/github.com\/gnocchixyz\/gnocchi","notifications_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/notifications{?since,all,participating}","has_issues":true,"ssh_url":"git@github.com:gnocchixyz\/gnocchi.git","blobs_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/blobs{\/sha}","forks":30,"hooks_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/hooks","open_issues_count":54,"watchers":133,"name":"gnocchi","license":{"spdx_id":"Apache-2.0","url":"https:\/\/api.github.com\/licenses\/apache-2.0","name":"Apache License 2.0","key":"apache-2.0"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi","created_at":"2017-05-18T16:32:52Z","archive_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/{archive_format}{\/ref}","pushed_at":"2018-03-28T10:45:23Z","forks_count":30,"default_branch":"master","teams_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/teams","open_issues":54,"languages_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/languages","git_commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits{\/sha}","subscribers_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/subscribers","stargazers_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/stargazers"},"sha":"51ac20f06690f54933fb6f84ba3353ea0eae5170","ref":"master","user":{"following_url":"https:\/\/api.github.com\/users\/gnocchixyz\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/gnocchixyz\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/gnocchixyz\/orgs","url":"https:\/\/api.github.com\/users\/gnocchixyz","events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/events{\/privacy}","html_url":"https:\/\/github.com\/gnocchixyz","subscriptions_url":"https:\/\/api.github.com\/users\/gnocchixyz\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/26142905?v=4","repos_url":"https:\/\/api.github.com\/users\/gnocchixyz\/repos","received_events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/gnocchixyz\/starred{\/owner}{\/repo}","site_admin":false,"login":"gnocchixyz","type":"Organization","id":26142905,"followers_url":"https:\/\/api.github.com\/users\/gnocchixyz\/followers"},"label":"gnocchixyz:master"},"rebaseable":true,"milestone":null,"pastamaker_travis_detail":{"commit_id":107087743,"repository_id":13523406,"jobs":[{"build_id":359267039,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/359267040\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"2564.1","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":107087743,"finished_at":"2018-03-28T09:09:22Z","started_at":"2018-03-28T09:07:47Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=pep8"},"id":359267040},{"build_id":359267039,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/359267041\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"2564.2","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":107087743,"finished_at":"2018-03-28T09:13:07Z","started_at":"2018-03-28T09:09:55Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=docs"},"id":359267041},{"build_id":359267039,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/359267042\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"2564.3","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":107087743,"finished_at":"2018-03-28T09:18:31Z","started_at":"2018-03-28T09:10:48Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=docs-gnocchi.xyz"},"id":359267042},{"build_id":359267039,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/359267043\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"2564.4","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":107087743,"finished_at":"2018-03-28T09:18:18Z","started_at":"2018-03-28T09:13:36Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-mysql-ceph-upgrade-from-4.0"},"id":359267043},{"build_id":359267039,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/359267044\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"2564.5","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":107087743,"finished_at":"2018-03-28T09:25:19Z","started_at":"2018-03-28T09:18:59Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-postgresql-file-upgrade-from-4.0"},"id":359267044},{"build_id":359267039,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/359267045\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"2564.6","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":107087743,"finished_at":"2018-03-28T09:23:41Z","started_at":"2018-03-28T09:19:04Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-mysql-ceph-upgrade-from-4.1"},"id":359267045},{"build_id":359267039,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/359267046\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"2564.7","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":107087743,"finished_at":"2018-03-28T09:30:29Z","started_at":"2018-03-28T09:24:26Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-postgresql-file-upgrade-from-4.1"},"id":359267046},{"build_id":359267039,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/359267047\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"2564.8","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":107087743,"finished_at":"2018-03-28T09:30:02Z","started_at":"2018-03-28T09:25:54Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-mysql-ceph-upgrade-from-4.2"},"id":359267047},{"build_id":359267039,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/359267048\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"2564.9","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":107087743,"finished_at":"2018-03-28T09:36:09Z","started_at":"2018-03-28T09:30:43Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-postgresql-file-upgrade-from-4.2"},"id":359267048},{"build_id":359267039,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/359267050\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"2564.10","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":107087743,"finished_at":"2018-03-28T10:15:36Z","started_at":"2018-03-28T09:31:01Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-mysql"},"id":359267050},{"build_id":359267039,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/359267052\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"2564.11","allow_failure":false,"queue":"builds.gce","state":"failed","commit_id":107087743,"finished_at":"2018-03-28T10:53:22Z","started_at":"2018-03-28T10:46:11Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-mysql"},"id":359267052},{"build_id":359267039,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/359267053\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"2564.12","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":107087743,"finished_at":"2018-03-28T10:26:01Z","started_at":"2018-03-28T09:42:03Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-postgresql"},"id":359267053},{"build_id":359267039,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/359267055\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"2564.13","allow_failure":false,"queue":"builds.gce","state":"errored","commit_id":107087743,"finished_at":"2018-03-28T11:35:39Z","started_at":"2018-03-28T10:46:21Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-postgresql"},"id":359267055}],"event_type":"pull_request","finished_at":"2018-03-28T11:35:39Z","number":"2564","id":359267039,"state":"errored","pull_request_title":"Add gnocchi-injector","pull_request":true,"duration":11328,"started_at":"2018-03-28T10:46:11Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","os":"linux","deploy":{"true":{"all_branches":true,"tags":true},"password":{"secure":"c+Ccx3SHCWepiy0PUxDJ7XO9r3aNYnHjkzxF5c\/kjV8QaCJayAJEgXJnBKhvjroqwgn7JPUgpD6QdSWdB4FqjbZYQ3I3oHOO1YL0vYYa8wHG5HuMsMp4J8qvzgs3QNQDECPI1mXsPevn3VMfGszUN+6BQrHB3FbZsTtOmE+Kmgok5NCT+obsfEhVea\/UOD0XFUkVW9VJhPjQ2ytvYvFIc46\/73GQf2Er\/5DCa\/4GGDEBSD++bDJgp3kQj438xslCAFeZWDwGsa+cTc43PI0Y0+E144ySVY7QyVbZ1B66a1BGWVrXJuM+gW\/eIBCMN1FJXmD7CDdPa22azKI8dfMF7qaH3Oiv3cVovPWpubOvhTUHUFwG8+W7Fx+zUKktCWiLer\/fZvEd3W8tcgby2kNOdcUfKfDB2ImZJ+P694\/OJ4jJ8T5TQerruNoP2OstzcBMon77Ry0XawXR15SZd4JhbqhSi+h7XV6EYmct1UN4zoysA7fx\/cWHcBxdnm2G6R0gzmOiiGUd74ptU8lZ3IlEP6EZckK\/OZOdy1I8EQeUe7aiTooXZDAn07iPkDZliYRr2e36ij\/xjtWCe1AjCksn\/xdKfHOKJv5UVob495DU2GuNObe01ewXzexcnldjfp9Sb8SVEFuhHx6IvH5OC+vAq+BVYu2jwvMcVfXi3VSOkB4="},"distributions":"sdist bdist_wheel","user":"jd","provider":"pypi"},"env":["TARGET=pep8","TARGET=docs","TARGET=docs-gnocchi.xyz","TARGET=py27-mysql-ceph-upgrade-from-4.0","TARGET=py35-postgresql-file-upgrade-from-4.0","TARGET=py27-mysql-ceph-upgrade-from-4.1","TARGET=py35-postgresql-file-upgrade-from-4.1","TARGET=py27-mysql-ceph-upgrade-from-4.2","TARGET=py35-postgresql-file-upgrade-from-4.2","TARGET=py27-mysql","TARGET=py35-mysql","TARGET=py27-postgresql","TARGET=py35-postgresql"]},"job_ids":[359267040,359267041,359267042,359267043,359267044,359267045,359267046,359267047,359267048,359267050,359267052,359267053,359267055],"pull_request_number":832,"resume_state":"error"},"requested_teams":[],"locked":false,"merged_by":null,"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/832","mergeable_state":"blocked","created_at":"2018-03-22T15:17:53Z","merged":false,"review_comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/832\/comments","review_comments":0,"assignees":[],"review_comment_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/comments{\/number}","pastamaker_approvals":[[],[],2,[0,1]],"patch_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/832.patch","changed_files":3,"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"}},{"deletions":217,"pastamaker_combined_status":"failure","merge_commit_sha":"d8a66703b8ba5a9b6e793040b112a9a9851e3c2e","labels":[],"number":839,"pastamaker_travis_state":"error","assignee":null,"commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/839\/commits","mergeable":true,"closed_at":null,"requested_reviewers":[],"statuses_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/statuses\/64e801ca82bba461044416c10f04634e0bab9844","additions":279,"maintainer_can_modify":true,"title":"storage: allow to batch splits retrieval for multiple metrics","comments":0,"id":177968917,"merged_at":null,"state":"open","_links":{"review_comment":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/comments{\/number}"},"commits":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/839\/commits"},"self":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/839"},"review_comments":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/839\/comments"},"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/839"},"comments":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/839\/comments"},"issue":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/839"},"statuses":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/statuses\/64e801ca82bba461044416c10f04634e0bab9844"}},"pastamaker_reviews":[{"body":"","commit_id":"64e801ca82bba461044416c10f04634e0bab9844","submitted_at":"2018-03-28T09:13:10Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/839#pullrequestreview-107599218","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/839","state":"APPROVED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/839#pullrequestreview-107599218"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/839"}},"user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"id":107599218}],"pastamaker_commits":[{"files":[{"status":"modified","deletions":51,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/64e801ca82bba461044416c10f04634e0bab9844\/gnocchi\/storage\/__init__.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/64e801ca82bba461044416c10f04634e0bab9844\/gnocchi\/storage\/__init__.py","changes":118,"filename":"gnocchi\/storage\/__init__.py","sha":"6f29234b1c0b81325aeb93a5cd478811c6f81978","additions":67,"patch":"@@ -128,14 +128,22 @@ def __init__(self, conf):\n     def upgrade():\n         pass\n \n-    def _get_measures(self, metric, keys_and_aggregations, version=3):\n-        return utils.parallel_map(\n-            self._get_measures_unbatched,\n-            ((metric, key, aggregation, version)\n-             for key, aggregation in keys_and_aggregations))\n+    def _get_splits(self, metrics_aggregations_keys, version=3):\n+        results = collections.defaultdict(\n+            lambda: collections.defaultdict(list))\n+        for metric, aggregation, split in utils.parallel_map(\n+                lambda m, k, a, v: (m, a, self._get_splits_unbatched(m, k, a, v)),  # noqa\n+                ((metric, key, aggregation, version)\n+                 for metric, aggregations_and_keys\n+                 in six.iteritems(metrics_aggregations_keys)\n+                 for aggregation, keys\n+                 in six.iteritems(aggregations_and_keys)\n+                 for key in keys)):\n+            results[metric][aggregation].append(split)\n+        return results\n \n     @staticmethod\n-    def _get_measures_unbatched(metric, timestamp_key, aggregation, version=3):\n+    def _get_splits_unbatched(metric, timestamp_key, aggregation, version=3):\n         raise NotImplementedError\n \n     @staticmethod\n@@ -293,30 +301,34 @@ def get_measures(self, metric, aggregations,\n                                                      ATTRGETTER_METHOD)\n         }\n \n-    def _get_splits_and_unserialize(self, metric, keys_and_aggregations):\n+    def _get_splits_and_unserialize(self, metrics_aggregations_keys):\n         \"\"\"Get splits and unserialize them\n \n-        :param metric: The metric to retrieve.\n-        :param keys_and_aggregations: A list of tuple (SplitKey, Aggregation)\n-                                      to retrieve.\n-        :return: A list of AggregatedTimeSerie.\n+        :param metrics_aggregations_keys: A dict where keys are\n+                                         `storage.Metric` and values are dict\n+                                          of {Aggregation: [SplitKey]} to\n+                                          retrieve.\n+        :return: A dict where keys are `storage.Metric` and values are dict\n+                 {aggregation: [`carbonara.AggregatedTimeSerie`]}.\n         \"\"\"\n-        if not keys_and_aggregations:\n-            return []\n-        raw_measures = self._get_measures(metric, keys_and_aggregations)\n-        results = []\n-        for (key, aggregation), raw in six.moves.zip(\n-                keys_and_aggregations, raw_measures):\n-            try:\n-                ts = carbonara.AggregatedTimeSerie.unserialize(\n-                    raw, key, aggregation)\n-            except carbonara.InvalidData:\n-                LOG.error(\"Data corruption detected for %s \"\n-                          \"aggregated `%s' timeserie, granularity `%s' \"\n-                          \"around time `%s', ignoring.\",\n-                          metric.id, aggregation.method, key.sampling, key)\n-                ts = carbonara.AggregatedTimeSerie(aggregation)\n-            results.append(ts)\n+        raw_measures = self._get_splits(metrics_aggregations_keys)\n+        results = collections.defaultdict(\n+            lambda: collections.defaultdict(list))\n+        for metric, aggregations_and_raws in six.iteritems(raw_measures):\n+            for aggregation, raws in six.iteritems(aggregations_and_raws):\n+                for key, raw in six.moves.zip(\n+                        metrics_aggregations_keys[metric][aggregation], raws):\n+                    try:\n+                        ts = carbonara.AggregatedTimeSerie.unserialize(\n+                            raw, key, aggregation)\n+                    except carbonara.InvalidData:\n+                        LOG.error(\"Data corruption detected for %s \"\n+                                  \"aggregated `%s' timeserie, granularity \"\n+                                  \"`%s' around time `%s', ignoring.\",\n+                                  metric.id, aggregation.method, key.sampling,\n+                                  key)\n+                        ts = carbonara.AggregatedTimeSerie(aggregation)\n+                    results[metric][aggregation].append(ts)\n         return results\n \n     def _get_measures_timeserie(self, metric, aggregation, keys,\n@@ -329,14 +341,15 @@ def _get_measures_timeserie(self, metric, aggregation, keys,\n             to_timestamp = carbonara.SplitKey.from_timestamp_and_sampling(\n                 to_timestamp, aggregation.granularity)\n \n-        keys_and_aggregations = [\n-            (key, aggregation) for key in sorted(keys)\n+        keys = [\n+            key for key in sorted(keys)\n             if ((not from_timestamp or key >= from_timestamp)\n                 and (not to_timestamp or key <= to_timestamp))\n         ]\n \n         timeseries = self._get_splits_and_unserialize(\n-            metric, keys_and_aggregations)\n+            {metric: {aggregation: keys}}\n+        )[metric][aggregation]\n \n         ts = carbonara.AggregatedTimeSerie.from_timeseries(\n             timeseries, aggregation)\n@@ -365,35 +378,37 @@ def _update_metric_splits(self, metrics_keys_aggregations_splits):\n                                                   oldest_mutable_timestamp)\n         \"\"\"\n         metrics_splits_to_store = {}\n+        keys_to_get = collections.defaultdict(\n+            lambda: collections.defaultdict(list))\n+        splits_to_rewrite = collections.defaultdict(\n+            lambda: collections.defaultdict(list))\n \n         for metric, (keys_and_aggregations_and_splits,\n                      oldest_mutable_timestamp) in six.iteritems(\n                          metrics_keys_aggregations_splits):\n-            keys_to_rewrite = []\n-            splits_to_rewrite = []\n             for (key, aggregation), split in six.iteritems(\n                     keys_and_aggregations_and_splits):\n                 # NOTE(jd) We write the full split only if the driver works\n                 # that way (self.WRITE_FULL) or if the oldest_mutable_timestamp\n                 # is out of range.\n-                write_full = (\n-                    self.WRITE_FULL or next(key) <= oldest_mutable_timestamp\n-                )\n-                if write_full:\n-                    keys_to_rewrite.append(key)\n-                    splits_to_rewrite.append(split)\n-\n-            # Update the splits that were passed as argument with the data\n-            # already stored in the case that we need to rewrite them fully.\n-            # First, fetch all those existing splits.\n-            existing_data = self._get_splits_and_unserialize(\n-                metric, [(key, split.aggregation)\n-                         for key, split\n-                         in six.moves.zip(keys_to_rewrite, splits_to_rewrite)])\n-\n-            for key, split, existing in six.moves.zip(\n-                    keys_to_rewrite, splits_to_rewrite, existing_data):\n-                if existing:\n+                if self.WRITE_FULL or next(key) <= oldest_mutable_timestamp:\n+                    # Update the splits that were passed as argument with the\n+                    # data already stored in the case that we need to rewrite\n+                    # them fully. First, fetch all those existing splits.\n+                    keys_to_get[metric][aggregation].append(key)\n+                    splits_to_rewrite[metric][aggregation].append(split)\n+\n+        existing_data = self._get_splits_and_unserialize(keys_to_get)\n+\n+        for metric, (keys_and_aggregations_and_splits,\n+                     oldest_mutable_timestamp) in six.iteritems(\n+                         metrics_keys_aggregations_splits):\n+            for aggregation, existing_list in six.iteritems(\n+                    existing_data[metric]):\n+                for key, split, existing in six.moves.zip(\n+                        keys_to_get[metric][aggregation],\n+                        splits_to_rewrite[metric][aggregation],\n+                        existing_list):\n                     existing.merge(split)\n                     keys_and_aggregations_and_splits[\n                         (key, split.aggregation)] = existing\n@@ -404,7 +419,8 @@ def _update_metric_splits(self, metrics_keys_aggregations_splits):\n                 # Do not store the split if it's empty.\n                 if split:\n                     offset, data = split.serialize(\n-                        key, compressed=key in keys_to_rewrite)\n+                        key,\n+                        compressed=key in keys_to_get[metric][aggregation])\n                     keys_aggregations_data_offset.append(\n                         (key, split.aggregation, data, offset))\n             metrics_splits_to_store[metric] = keys_aggregations_data_offset","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/__init__.py?ref=64e801ca82bba461044416c10f04634e0bab9844"},{"status":"modified","deletions":1,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/64e801ca82bba461044416c10f04634e0bab9844\/gnocchi\/storage\/ceph.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/64e801ca82bba461044416c10f04634e0bab9844\/gnocchi\/storage\/ceph.py","changes":2,"filename":"gnocchi\/storage\/ceph.py","sha":"6f682f859b48b40179835d81baa5ef211d66f7af","additions":1,"patch":"@@ -150,7 +150,7 @@ def _delete_metric(self, metric):\n             # It's possible that the object does not exists\n             pass\n \n-    def _get_measures_unbatched(self, metric, key, aggregation, version=3):\n+    def _get_splits_unbatched(self, metric, key, aggregation, version=3):\n         try:\n             name = self._get_object_name(\n                 metric, key, aggregation.method, version)","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/ceph.py?ref=64e801ca82bba461044416c10f04634e0bab9844"},{"status":"modified","deletions":1,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/64e801ca82bba461044416c10f04634e0bab9844\/gnocchi\/storage\/file.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/64e801ca82bba461044416c10f04634e0bab9844\/gnocchi\/storage\/file.py","changes":2,"filename":"gnocchi\/storage\/file.py","sha":"56929a1a5663d320af4380cc8222e3f72ef5fd8a","additions":1,"patch":"@@ -180,7 +180,7 @@ def _delete_metric(self, metric):\n                 # measures)\n                 raise\n \n-    def _get_measures_unbatched(self, metric, key, aggregation, version=3):\n+    def _get_splits_unbatched(self, metric, key, aggregation, version=3):\n         path = self._build_metric_path_for_split(\n             metric, aggregation.method, key, version)\n         try:","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/file.py?ref=64e801ca82bba461044416c10f04634e0bab9844"},{"status":"modified","deletions":7,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/64e801ca82bba461044416c10f04634e0bab9844\/gnocchi\/storage\/redis.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/64e801ca82bba461044416c10f04634e0bab9844\/gnocchi\/storage\/redis.py","changes":21,"filename":"gnocchi\/storage\/redis.py","sha":"b3c02fa89447eb0eaf2f49f71493eb9edc664f60","additions":14,"patch":"@@ -151,10 +151,17 @@ def _store_metric_splits(self, metrics_keys_aggregations_data_offset,\n     def _delete_metric(self, metric):\n         self._client.delete(self._metric_key(metric))\n \n-    def _get_measures(self, metric, keys_and_aggregations, version=3):\n-        if not keys_and_aggregations:\n-            return []\n-        return self._client.hmget(\n-            self._metric_key(metric),\n-            [self._aggregated_field_for_split(aggregation.method, key, version)\n-             for key, aggregation in keys_and_aggregations])\n+    def _get_splits(self, metrics_keys_aggregations, version=3):\n+        pipe = self._client.pipeline(transaction=False)\n+        # Use a list of metric with a constant sorting\n+        metrics = list(metrics_keys_aggregations.keys())\n+        for metric in metrics:\n+            pipe.hmget(\n+                self._metric_key(metric),\n+                [self._aggregated_field_for_split(aggregation.method,\n+                                                  key, version)\n+                 for key, aggregation in metrics_keys_aggregations[metric]])\n+        return {\n+            metric: splits\n+            for metric, splits in six.moves.zip(metrics, pipe.execute())\n+        }","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/redis.py?ref=64e801ca82bba461044416c10f04634e0bab9844"},{"status":"modified","deletions":1,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/64e801ca82bba461044416c10f04634e0bab9844\/gnocchi\/storage\/s3.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/64e801ca82bba461044416c10f04634e0bab9844\/gnocchi\/storage\/s3.py","changes":2,"filename":"gnocchi\/storage\/s3.py","sha":"c5a29ae7ff286d9a0da5089d3f99cc21f8a953f8","additions":1,"patch":"@@ -156,7 +156,7 @@ def _delete_metric(self, metric):\n             s3.bulk_delete(self.s3, bucket,\n                            [c['Key'] for c in response.get('Contents', ())])\n \n-    def _get_measures_unbatched(self, metric, key, aggregation, version=3):\n+    def _get_splits_unbatched(self, metric, key, aggregation, version=3):\n         try:\n             response = self.s3.get_object(\n                 Bucket=self._bucket_name,","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/s3.py?ref=64e801ca82bba461044416c10f04634e0bab9844"},{"status":"modified","deletions":1,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/64e801ca82bba461044416c10f04634e0bab9844\/gnocchi\/storage\/swift.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/64e801ca82bba461044416c10f04634e0bab9844\/gnocchi\/storage\/swift.py","changes":2,"filename":"gnocchi\/storage\/swift.py","sha":"c1a1ff65a7f1255e4bd7a5aa8de587ad0bcbc04d","additions":1,"patch":"@@ -147,7 +147,7 @@ def _delete_metric(self, metric):\n                     # Deleted in the meantime? Whatever.\n                     raise\n \n-    def _get_measures_unbatched(self, metric, key, aggregation, version=3):\n+    def _get_splits_unbatched(self, metric, key, aggregation, version=3):\n         try:\n             headers, contents = self.swift.get_object(\n                 self._container_name(metric), self._object_name(","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/swift.py?ref=64e801ca82bba461044416c10f04634e0bab9844"},{"status":"modified","deletions":155,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/64e801ca82bba461044416c10f04634e0bab9844\/gnocchi\/tests\/test_storage.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/64e801ca82bba461044416c10f04634e0bab9844\/gnocchi\/tests\/test_storage.py","changes":349,"filename":"gnocchi\/tests\/test_storage.py","sha":"f60594df043e553777eab688ed75327c526c81d0","additions":194,"patch":"@@ -75,14 +75,15 @@ def test_corrupted_split(self):\n \n         with mock.patch('gnocchi.carbonara.AggregatedTimeSerie.unserialize',\n                         side_effect=carbonara.InvalidData()):\n-            results = self.storage._get_splits_and_unserialize(\n-                self.metric,\n-                [\n-                    (carbonara.SplitKey(\n-                        numpy.datetime64(1387800000, 's'),\n-                        numpy.timedelta64(5, 'm')),\n-                     aggregation)\n-                ])\n+            results = self.storage._get_splits_and_unserialize({\n+                self.metric: {\n+                    aggregation: [\n+                        carbonara.SplitKey(\n+                            numpy.datetime64(1387800000, 's'),\n+                            numpy.timedelta64(5, 'm'))\n+                    ],\n+                },\n+            })[self.metric][aggregation]\n             self.assertEqual(1, len(results))\n             self.assertIsInstance(results[0], carbonara.AggregatedTimeSerie)\n             # Assert it's an empty one since corrupted\n@@ -98,14 +99,15 @@ def test_get_splits_and_unserialize(self):\n         aggregation = self.metric.archive_policy.get_aggregation(\n             \"mean\", numpy.timedelta64(5, 'm'))\n \n-        results = self.storage._get_splits_and_unserialize(\n-            self.metric,\n-            [\n-                (carbonara.SplitKey(\n-                    numpy.datetime64(1387800000, 's'),\n-                    numpy.timedelta64(5, 'm')),\n-                 aggregation)\n-            ])\n+        results = self.storage._get_splits_and_unserialize({\n+            self.metric: {\n+                aggregation: [\n+                    carbonara.SplitKey(\n+                        numpy.datetime64(1387800000, 's'),\n+                        numpy.timedelta64(5, 'm')),\n+                ],\n+            },\n+        })[self.metric][aggregation]\n         self.assertEqual(1, len(results))\n         self.assertIsInstance(results[0], carbonara.AggregatedTimeSerie)\n         # Assert it's not empty one since corrupted\n@@ -365,46 +367,62 @@ def test_get_measures_return(self):\n         aggregation = self.metric.archive_policy.get_aggregation(\n             \"mean\", numpy.timedelta64(5, 'm'))\n \n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n-                numpy.datetime64(1451520000, 's'),\n-                numpy.timedelta64(5, 'm'),\n-            ), aggregation)])\n+        data = self.storage._get_splits({\n+            self.metric: {\n+                aggregation: [\n+                    carbonara.SplitKey(\n+                        numpy.datetime64(1451520000, 's'),\n+                        numpy.timedelta64(5, 'm'),\n+                    )]}})\n+        self.assertEqual(1, len(data))\n+        data = data[self.metric]\n+        self.assertEqual(1, len(data))\n+        data = data[aggregation]\n         self.assertEqual(1, len(data))\n         self.assertIsInstance(data[0], bytes)\n         self.assertGreater(len(data[0]), 0)\n         existing = data[0]\n \n         # Now retrieve an existing and a non-existing key\n-        data = self.storage._get_measures(\n-            self.metric, [\n-                (carbonara.SplitKey(\n-                    numpy.datetime64(1451520000, 's'),\n-                    numpy.timedelta64(5, 'm'),\n-                ), aggregation),\n-                (carbonara.SplitKey(\n-                    numpy.datetime64(1451520010, 's'),\n-                    numpy.timedelta64(5, 'm'),\n-                ), aggregation),\n-            ])\n+        data = self.storage._get_splits({\n+            self.metric: {\n+                aggregation: [\n+                    carbonara.SplitKey(\n+                        numpy.datetime64(1451520000, 's'),\n+                        numpy.timedelta64(5, 'm'),\n+                    ),\n+                    carbonara.SplitKey(\n+                        numpy.datetime64(1451520010, 's'),\n+                        numpy.timedelta64(5, 'm'),\n+                    ),\n+                ]}})\n+        self.assertEqual(1, len(data))\n+        data = data[self.metric]\n+        self.assertEqual(1, len(data))\n+        data = data[aggregation]\n         self.assertEqual(2, len(data))\n         self.assertIsInstance(data[0], bytes)\n         self.assertGreater(len(data[0]), 0)\n         self.assertEqual(existing, data[0])\n         self.assertIsNone(data[1])\n \n         # Now retrieve a non-existing and an existing key\n-        data = self.storage._get_measures(\n-            self.metric, [\n-                (carbonara.SplitKey(\n-                    numpy.datetime64(155152000, 's'),\n-                    numpy.timedelta64(5, 'm'),\n-                ), aggregation),\n-                (carbonara.SplitKey(\n-                    numpy.datetime64(1451520000, 's'),\n-                    numpy.timedelta64(5, 'm'),\n-                ), aggregation),\n-            ])\n+        data = self.storage._get_splits({\n+            self.metric: {\n+                aggregation: [\n+                    carbonara.SplitKey(\n+                        numpy.datetime64(155152000, 's'),\n+                        numpy.timedelta64(5, 'm'),\n+                    ),\n+                    carbonara.SplitKey(\n+                        numpy.datetime64(1451520000, 's'),\n+                        numpy.timedelta64(5, 'm'),\n+                    )\n+                ]}})\n+        self.assertEqual(1, len(data))\n+        data = data[self.metric]\n+        self.assertEqual(1, len(data))\n+        data = data[aggregation]\n         self.assertEqual(2, len(data))\n         self.assertIsInstance(data[1], bytes)\n         self.assertGreater(len(data[1]), 0)\n@@ -413,18 +431,19 @@ def test_get_measures_return(self):\n \n         m2, _ = self._create_metric()\n         # Now retrieve a non-existing (= no aggregated measures) metric\n-        data = self.storage._get_measures(\n-            m2, [\n-                (carbonara.SplitKey(\n-                    numpy.datetime64(1451520010, 's'),\n-                    numpy.timedelta64(5, 'm'),\n-                ), aggregation),\n-                (carbonara.SplitKey(\n-                    numpy.datetime64(1451520000, 's'),\n-                    numpy.timedelta64(5, 'm'),\n-                ), aggregation),\n-            ])\n-        self.assertEqual([None, None], data)\n+        data = self.storage._get_splits({\n+            m2: {\n+                aggregation: [\n+                    carbonara.SplitKey(\n+                        numpy.datetime64(1451520010, 's'),\n+                        numpy.timedelta64(5, 'm'),\n+                    ),\n+                    carbonara.SplitKey(\n+                        numpy.datetime64(1451520000, 's'),\n+                        numpy.timedelta64(5, 'm'),\n+                    )\n+                ]}})\n+        self.assertEqual({m2: {aggregation: [None, None]}}, data)\n \n     def test_rewrite_measures(self):\n         # Create an archive policy that spans on several splits. Each split\n@@ -466,23 +485,26 @@ def test_rewrite_measures(self):\n         aggregation = self.metric.archive_policy.get_aggregation(\n             \"mean\", numpy.timedelta64(1, 'm'))\n \n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n-                numpy.datetime64(1451520000, 's'),\n-                numpy.timedelta64(1, 'm'),\n-            ), aggregation)])[0]\n+        data = self.storage._get_splits({\n+            self.metric: {\n+                aggregation: [carbonara.SplitKey(\n+                    numpy.datetime64(1451520000, 's'),\n+                    numpy.timedelta64(1, 'm'),\n+                )]}})[self.metric][aggregation][0]\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n-                numpy.datetime64(1451736000, 's'),\n-                numpy.timedelta64(60, 's'),\n-            ), aggregation)])[0]\n+        data = self.storage._get_splits({\n+            self.metric: {\n+                aggregation: [carbonara.SplitKey(\n+                    numpy.datetime64(1451736000, 's'),\n+                    numpy.timedelta64(60, 's'),\n+                )]}})[self.metric][aggregation][0]\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n-                numpy.datetime64(1451952000, 's'),\n-                numpy.timedelta64(60, 's'),\n-            ), aggregation)])[0]\n+        data = self.storage._get_splits({\n+            self.metric: {\n+                aggregation: [carbonara.SplitKey(\n+                    numpy.datetime64(1451952000, 's'),\n+                    numpy.timedelta64(60, 's'),\n+                )]}})[self.metric][aggregation][0]\n         assertCompressedIfWriteFull(\n             carbonara.AggregatedTimeSerie.is_compressed(data))\n \n@@ -517,30 +539,35 @@ def test_rewrite_measures(self):\n                                    numpy.timedelta64(1, 'm')),\n             },\n         }, self.storage._list_split_keys(self.metric, [agg]))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n-                numpy.datetime64(1451520000, 's'),\n-                numpy.timedelta64(60, 's'),\n-            ), aggregation)])[0]\n+        data = self.storage._get_splits({\n+            self.metric: {\n+                aggregation: [carbonara.SplitKey(\n+                    numpy.datetime64(1451520000, 's'),\n+                    numpy.timedelta64(60, 's'),\n+                )]}})[self.metric][aggregation][0]\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n-                numpy.datetime64(1451736000, 's'),\n-                numpy.timedelta64(60, 's'),\n-            ), aggregation)])[0]\n+        data = self.storage._get_splits({\n+            self.metric: {\n+                aggregation: [carbonara.SplitKey(\n+                    numpy.datetime64(1451736000, 's'),\n+                    numpy.timedelta64(60, 's'),\n+                )]}})[self.metric][aggregation][0]\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n-                numpy.datetime64(1451952000, 's'),\n-                numpy.timedelta64(1, 'm'),\n-            ), aggregation)])[0]\n+        data = self.storage._get_splits({\n+            self.metric: {\n+                aggregation: [carbonara.SplitKey(\n+                    numpy.datetime64(1451952000, 's'),\n+                    numpy.timedelta64(1, 'm'),\n+                )]}})[self.metric][aggregation][0]\n         # Now this one is compressed because it has been rewritten!\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n-                numpy.datetime64(1452384000, 's'),\n-                numpy.timedelta64(60, 's'),\n-            ), aggregation)])[0]\n+        data = self.storage._get_splits({\n+            self.metric: {\n+                aggregation: [\n+                    carbonara.SplitKey(\n+                        numpy.datetime64(1452384000, 's'),\n+                        numpy.timedelta64(60, 's'),\n+                    )]}})[self.metric][aggregation][0]\n         assertCompressedIfWriteFull(\n             carbonara.AggregatedTimeSerie.is_compressed(data))\n \n@@ -594,23 +621,25 @@ def test_rewrite_measures_oldest_mutable_timestamp_eq_next_key(self):\n         aggregation = self.metric.archive_policy.get_aggregation(\n             \"mean\", numpy.timedelta64(1, 'm'))\n \n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n-                numpy.datetime64(1451520000, 's'),\n-                numpy.timedelta64(1, 'm'),\n-            ), aggregation)])[0]\n+        data = self.storage._get_splits(\n+            {self.metric: {\n+                aggregation: [carbonara.SplitKey(\n+                    numpy.datetime64(1451520000, 's'),\n+                    numpy.timedelta64(1, 'm'),\n+                )]}})[self.metric][aggregation][0]\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n-                numpy.datetime64(1451736000, 's'),\n-                numpy.timedelta64(1, 'm'),\n-            ), aggregation)])[0]\n+        data = self.storage._get_splits(\n+            {self.metric: {\n+                aggregation: [carbonara.SplitKey(\n+                    numpy.datetime64(1451736000, 's'),\n+                    numpy.timedelta64(1, 'm'),\n+                )]}})[self.metric][aggregation][0]\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits(\n+            {self.metric: {aggregation: [carbonara.SplitKey(\n                 numpy.datetime64(1451952000, 's'),\n                 numpy.timedelta64(1, 'm')\n-            ), aggregation)])[0]\n+            )]}})[self.metric][aggregation][0]\n         assertCompressedIfWriteFull(\n             carbonara.AggregatedTimeSerie.is_compressed(data))\n \n@@ -647,30 +676,34 @@ def test_rewrite_measures_oldest_mutable_timestamp_eq_next_key(self):\n                                    numpy.timedelta64(1, 'm')),\n             }\n         }, self.storage._list_split_keys(self.metric, [agg]))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n-                numpy.datetime64(1451520000, 's'),\n-                numpy.timedelta64(1, 'm'),\n-            ), agg)])[0]\n+        data = self.storage._get_splits({\n+            self.metric: {\n+                agg: [carbonara.SplitKey(\n+                    numpy.datetime64(1451520000, 's'),\n+                    numpy.timedelta64(1, 'm'),\n+                )]}})[self.metric][agg][0]\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n-                numpy.datetime64(1451736000, 's'),\n-                numpy.timedelta64(1, 'm'),\n-            ), agg)])[0]\n+        data = self.storage._get_splits({\n+            self.metric: {\n+                agg: [carbonara.SplitKey(\n+                    numpy.datetime64(1451736000, 's'),\n+                    numpy.timedelta64(1, 'm'),\n+                )]}})[self.metric][agg][0]\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n-                numpy.datetime64(1451952000, 's'),\n-                numpy.timedelta64(60, 's')\n-            ), agg)])[0]\n+        data = self.storage._get_splits({\n+            self.metric: {\n+                agg: [carbonara.SplitKey(\n+                    numpy.datetime64(1451952000, 's'),\n+                    numpy.timedelta64(60, 's')\n+                )]}})[self.metric][agg][0]\n         # Now this one is compressed because it has been rewritten!\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n-                numpy.datetime64(1452384000, 's'),\n-                numpy.timedelta64(1, 'm'),\n-            ), agg)])[0]\n+        data = self.storage._get_splits({\n+            self.metric: {\n+                agg: [carbonara.SplitKey(\n+                    numpy.datetime64(1452384000, 's'),\n+                    numpy.timedelta64(1, 'm'),\n+                )]}})[self.metric][agg][0]\n         assertCompressedIfWriteFull(\n             carbonara.AggregatedTimeSerie.is_compressed(data))\n \n@@ -724,24 +757,27 @@ def test_rewrite_measures_corruption_missing_file(self):\n         aggregation = self.metric.archive_policy.get_aggregation(\n             \"mean\", numpy.timedelta64(1, 'm'))\n \n-        data = self.storage._get_measures(\n-            self.metric,\n-            [(carbonara.SplitKey(\n-                numpy.datetime64(1451520000, 's'),\n-                numpy.timedelta64(1, 'm'),\n-            ), aggregation)])[0]\n+        data = self.storage._get_splits({\n+            self.metric: {\n+                aggregation:\n+                [carbonara.SplitKey(\n+                    numpy.datetime64(1451520000, 's'),\n+                    numpy.timedelta64(1, 'm'),\n+                )]}})[self.metric][aggregation][0]\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n-                numpy.datetime64(1451736000, 's'),\n-                numpy.timedelta64(1, 'm')\n-            ), aggregation)])[0]\n+        data = self.storage._get_splits({\n+            self.metric: {\n+                aggregation: [carbonara.SplitKey(\n+                    numpy.datetime64(1451736000, 's'),\n+                    numpy.timedelta64(1, 'm')\n+                )]}})[self.metric][aggregation][0]\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n-                numpy.datetime64(1451952000, 's'),\n-                numpy.timedelta64(1, 'm'),\n-            ), aggregation)])[0]\n+        data = self.storage._get_splits({\n+            self.metric: {\n+                aggregation: [carbonara.SplitKey(\n+                    numpy.datetime64(1451952000, 's'),\n+                    numpy.timedelta64(1, 'm'),\n+                )]}})[self.metric][aggregation][0]\n         assertCompressedIfWriteFull(\n             carbonara.AggregatedTimeSerie.is_compressed(data))\n \n@@ -814,23 +850,26 @@ def test_rewrite_measures_corruption_bad_data(self):\n         aggregation = self.metric.archive_policy.get_aggregation(\n             \"mean\", numpy.timedelta64(1, 'm'))\n \n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n-                numpy.datetime64(1451520000, 's'),\n-                numpy.timedelta64(60, 's'),\n-            ), aggregation)])[0]\n+        data = self.storage._get_splits({\n+            self.metric: {\n+                aggregation: [carbonara.SplitKey(\n+                    numpy.datetime64(1451520000, 's'),\n+                    numpy.timedelta64(60, 's'),\n+                )]}})[self.metric][aggregation][0]\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n-                numpy.datetime64(1451736000, 's'),\n-                numpy.timedelta64(1, 'm'),\n-            ), aggregation)])[0]\n+        data = self.storage._get_splits({\n+            self.metric: {\n+                aggregation: [carbonara.SplitKey(\n+                    numpy.datetime64(1451736000, 's'),\n+                    numpy.timedelta64(1, 'm'),\n+                )]}})[self.metric][aggregation][0]\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n-                numpy.datetime64(1451952000, 's'),\n-                numpy.timedelta64(1, 'm'),\n-            ), aggregation)])[0]\n+        data = self.storage._get_splits({\n+            self.metric: {\n+                aggregation: [carbonara.SplitKey(\n+                    numpy.datetime64(1451952000, 's'),\n+                    numpy.timedelta64(1, 'm'),\n+                )]}})[self.metric][aggregation][0]\n         assertCompressedIfWriteFull(\n             carbonara.AggregatedTimeSerie.is_compressed(data))\n \n@@ -916,7 +955,7 @@ def test_updated_measures(self):\n             (datetime64(2014, 1, 1, 12, 10), numpy.timedelta64(5, 'm'), 44.0),\n         ]}, self.storage.get_measures(self.metric, aggregations))\n \n-    def test_add_and_get_measures(self):\n+    def test_add_and_get_splits(self):\n         self.incoming.add_measures(self.metric.id, [\n             incoming.Measure(datetime64(2014, 1, 1, 12, 0, 1), 69),\n             incoming.Measure(datetime64(2014, 1, 1, 12, 7, 31), 42),","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/test_storage.py?ref=64e801ca82bba461044416c10f04634e0bab9844"}],"committer":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"stats":{"deletions":217,"additions":279,"total":496},"author":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/64e801ca82bba461044416c10f04634e0bab9844","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/64e801ca82bba461044416c10f04634e0bab9844\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/64e801ca82bba461044416c10f04634e0bab9844","sha":"64e801ca82bba461044416c10f04634e0bab9844","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/51ac20f06690f54933fb6f84ba3353ea0eae5170","sha":"51ac20f06690f54933fb6f84ba3353ea0eae5170","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/51ac20f06690f54933fb6f84ba3353ea0eae5170"}],"commit":{"committer":{"date":"2018-03-28T08:50:05Z","name":"Julien Danjou","email":"julien@danjou.info"},"author":{"date":"2018-03-07T13:31:57Z","name":"Julien Danjou","email":"julien@danjou.info"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/64e801ca82bba461044416c10f04634e0bab9844","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/68e56776d60d4f1b04950893581ee708004d67e2","sha":"68e56776d60d4f1b04950893581ee708004d67e2"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"storage: allow to batch splits retrieval for multiple metrics\n\nIt also fixes the parallel_map call to be unique, making _get_splits a little\nbit faster for unbatched drivers."}}],"diff_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/839.diff","pastamaker_ci_statuses":{},"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/839","body":"It also fixes the parallel_map call to be unique, making _get_splits a little\nbit faster for unbatched drivers.","head":{"repo":{"issues_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/issues{\/number}","deployments_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/deployments","has_wiki":true,"forks_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/forks","mirror_url":null,"subscription_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/subscription","notifications_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/notifications{?since,all,participating}","collaborators_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/collaborators{\/collaborator}","updated_at":"2017-05-19T16:20:11Z","private":false,"pulls_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/pulls{\/number}","owner":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"labels_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/labels{\/name}","full_name":"jd\/gnocchi","issue_comment_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/issues\/comments{\/number}","statuses_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/statuses\/{sha}","id":91824535,"keys_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/keys{\/key_id}","size":5197,"tags_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/tags","archived":false,"downloads_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/downloads","assignees_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/assignees{\/user}","contents_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/contents\/{+path}","description":"Timeseries database","git_refs_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/git\/refs{\/sha}","has_projects":true,"clone_url":"https:\/\/github.com\/jd\/gnocchi.git","watchers_count":0,"git_tags_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/git\/tags{\/sha}","milestones_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/milestones{\/number}","license":null,"stargazers_count":0,"homepage":null,"fork":true,"commits_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/commits{\/sha}","releases_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/releases{\/id}","issue_events_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/issues\/events{\/number}","has_downloads":true,"has_pages":false,"events_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/events","contributors_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/contributors","html_url":"https:\/\/github.com\/jd\/gnocchi","compare_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/compare\/{base}...{head}","open_issues":0,"watchers":0,"git_commits_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/git\/commits{\/sha}","git_url":"git:\/\/github.com\/jd\/gnocchi.git","svn_url":"https:\/\/github.com\/jd\/gnocchi","merges_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/merges","has_issues":false,"ssh_url":"git@github.com:jd\/gnocchi.git","blobs_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/git\/blobs{\/sha}","forks":0,"hooks_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/hooks","open_issues_count":0,"comments_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/comments{\/number}","name":"gnocchi","language":"Python","url":"https:\/\/api.github.com\/repos\/jd\/gnocchi","created_at":"2017-05-19T16:20:08Z","archive_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/{archive_format}{\/ref}","pushed_at":"2018-03-28T08:57:03Z","forks_count":0,"default_branch":"master","teams_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/teams","trees_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/git\/trees{\/sha}","languages_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/languages","branches_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/branches{\/branch}","subscribers_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/subscribers","stargazers_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/stargazers"},"sha":"64e801ca82bba461044416c10f04634e0bab9844","ref":"storage-allow-batch-splits-retrieval","user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"label":"jd:storage-allow-batch-splits-retrieval"},"pastamaker_weight":-1,"commits":1,"author_association":"OWNER","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/839\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/839","pastamaker_travis_url":"https:\/\/travis-ci.org\/gnocchixyz\/gnocchi\/builds\/359265195?utm_source=github_status&utm_medium=notification","updated_at":"2018-03-28T09:13:10Z","pastamaker_approved":false,"base":{"repo":{"issues_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues{\/number}","deployments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/deployments","has_wiki":false,"forks_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/forks","mirror_url":null,"subscription_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/subscription","notifications_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/notifications{?since,all,participating}","collaborators_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/collaborators{\/collaborator}","updated_at":"2018-03-27T12:27:06Z","private":false,"pulls_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls{\/number}","owner":{"following_url":"https:\/\/api.github.com\/users\/gnocchixyz\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/gnocchixyz\/orgs","url":"https:\/\/api.github.com\/users\/gnocchixyz","gists_url":"https:\/\/api.github.com\/users\/gnocchixyz\/gists{\/gist_id}","html_url":"https:\/\/github.com\/gnocchixyz","subscriptions_url":"https:\/\/api.github.com\/users\/gnocchixyz\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/26142905?v=4","repos_url":"https:\/\/api.github.com\/users\/gnocchixyz\/repos","received_events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/gnocchixyz\/starred{\/owner}{\/repo}","site_admin":false,"login":"gnocchixyz","type":"Organization","id":26142905,"followers_url":"https:\/\/api.github.com\/users\/gnocchixyz\/followers"},"labels_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/labels{\/name}","full_name":"gnocchixyz\/gnocchi","issue_comment_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments{\/number}","statuses_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/statuses\/{sha}","id":91715647,"keys_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/keys{\/key_id}","size":4980,"tags_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/tags","archived":false,"downloads_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/downloads","assignees_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/assignees{\/user}","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/{+path}","description":"Timeseries database","git_refs_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/refs{\/sha}","has_projects":false,"clone_url":"https:\/\/github.com\/gnocchixyz\/gnocchi.git","watchers_count":133,"git_tags_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/tags{\/sha}","milestones_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/milestones{\/number}","license":{"spdx_id":"Apache-2.0","url":"https:\/\/api.github.com\/licenses\/apache-2.0","name":"Apache License 2.0","key":"apache-2.0"},"stargazers_count":133,"homepage":null,"fork":false,"commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits{\/sha}","releases_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/releases{\/id}","issue_events_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/events{\/number}","has_downloads":true,"has_pages":false,"events_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/events","contributors_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contributors","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi","compare_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/compare\/{base}...{head}","open_issues":53,"watchers":133,"git_commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits{\/sha}","git_url":"git:\/\/github.com\/gnocchixyz\/gnocchi.git","svn_url":"https:\/\/github.com\/gnocchixyz\/gnocchi","merges_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/merges","has_issues":true,"ssh_url":"git@github.com:gnocchixyz\/gnocchi.git","blobs_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/blobs{\/sha}","forks":30,"hooks_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/hooks","open_issues_count":53,"comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/comments{\/number}","name":"gnocchi","language":"Python","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi","created_at":"2017-05-18T16:32:52Z","archive_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/{archive_format}{\/ref}","pushed_at":"2018-03-28T08:56:59Z","forks_count":30,"default_branch":"master","teams_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/teams","trees_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees{\/sha}","languages_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/languages","branches_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/branches{\/branch}","subscribers_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/subscribers","stargazers_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/stargazers"},"sha":"51ac20f06690f54933fb6f84ba3353ea0eae5170","ref":"master","user":{"following_url":"https:\/\/api.github.com\/users\/gnocchixyz\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/gnocchixyz\/orgs","url":"https:\/\/api.github.com\/users\/gnocchixyz","gists_url":"https:\/\/api.github.com\/users\/gnocchixyz\/gists{\/gist_id}","html_url":"https:\/\/github.com\/gnocchixyz","subscriptions_url":"https:\/\/api.github.com\/users\/gnocchixyz\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/26142905?v=4","repos_url":"https:\/\/api.github.com\/users\/gnocchixyz\/repos","received_events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/gnocchixyz\/starred{\/owner}{\/repo}","site_admin":false,"login":"gnocchixyz","type":"Organization","id":26142905,"followers_url":"https:\/\/api.github.com\/users\/gnocchixyz\/followers"},"label":"gnocchixyz:master"},"rebaseable":true,"milestone":null,"pastamaker_travis_detail":{"commit_id":107087177,"repository_id":13523406,"jobs":[{"build_id":359265195,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/359265196\/log","number":"2563.1","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":107087177,"finished_at":"2018-03-28T08:54:18Z","started_at":"2018-03-28T08:52:32Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=pep8"},"id":359265196},{"build_id":359265195,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/359265197\/log","number":"2563.2","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":107087177,"finished_at":"2018-03-28T08:57:43Z","started_at":"2018-03-28T08:52:38Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=docs"},"id":359265197},{"build_id":359265195,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/359265198\/log","number":"2563.3","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":107087177,"finished_at":"2018-03-28T08:59:24Z","started_at":"2018-03-28T08:52:48Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=docs-gnocchi.xyz"},"id":359265198},{"build_id":359265195,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/359265199\/log","number":"2563.4","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":107087177,"finished_at":"2018-03-28T08:58:31Z","started_at":"2018-03-28T08:52:42Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-mysql-ceph-upgrade-from-4.0"},"id":359265199},{"build_id":359265195,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/359265200\/log","number":"2563.5","allow_failure":false,"queue":"builds.gce","state":"errored","commit_id":107087177,"finished_at":"2018-03-28T09:00:31Z","started_at":"2018-03-28T08:52:34Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-postgresql-file-upgrade-from-4.0"},"id":359265200},{"build_id":359265195,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/359265201\/log","number":"2563.6","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":107087177,"finished_at":"2018-03-28T09:01:07Z","started_at":"2018-03-28T08:54:50Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-mysql-ceph-upgrade-from-4.1"},"id":359265201},{"build_id":359265195,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/359265202\/log","number":"2563.7","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":107087177,"finished_at":"2018-03-28T09:04:43Z","started_at":"2018-03-28T08:58:15Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-postgresql-file-upgrade-from-4.1"},"id":359265202},{"build_id":359265195,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/359265203\/log","number":"2563.8","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":107087177,"finished_at":"2018-03-28T09:05:07Z","started_at":"2018-03-28T08:59:07Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-mysql-ceph-upgrade-from-4.2"},"id":359265203},{"build_id":359265195,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/359265205\/log","number":"2563.9","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":107087177,"finished_at":"2018-03-28T09:07:07Z","started_at":"2018-03-28T08:59:58Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-postgresql-file-upgrade-from-4.2"},"id":359265205},{"build_id":359265195,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/359265206\/log","number":"2563.10","allow_failure":false,"queue":"builds.gce","state":"failed","commit_id":107087177,"finished_at":"2018-03-28T09:41:30Z","started_at":"2018-03-28T09:01:04Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-mysql"},"id":359265206},{"build_id":359265195,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/359265208\/log","number":"2563.11","allow_failure":false,"queue":"builds.gce","state":"failed","commit_id":107087177,"finished_at":"2018-03-28T09:10:12Z","started_at":"2018-03-28T09:01:43Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-mysql"},"id":359265208},{"build_id":359265195,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/359265209\/log","number":"2563.12","allow_failure":false,"queue":"builds.gce","state":"failed","commit_id":107087177,"finished_at":"2018-03-28T09:42:16Z","started_at":"2018-03-28T09:05:16Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-postgresql"},"id":359265209},{"build_id":359265195,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/359265210\/log","number":"2563.13","allow_failure":false,"queue":"builds.gce","state":"failed","commit_id":107087177,"finished_at":"2018-03-28T09:47:13Z","started_at":"2018-03-28T09:05:50Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-postgresql"},"id":359265210}],"event_type":"pull_request","finished_at":"2018-03-28T09:47:13Z","number":"2563","job_ids":[359265196,359265197,359265198,359265199,359265200,359265201,359265202,359265203,359265205,359265206,359265208,359265209,359265210],"state":"errored","pull_request_title":"storage: allow to batch splits retrieval for multiple metrics","pull_request":true,"duration":10825,"started_at":"2018-03-28T08:52:32Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","os":"linux","deploy":{"distributions":"sdist bdist_wheel","password":{"secure":"c+Ccx3SHCWepiy0PUxDJ7XO9r3aNYnHjkzxF5c\/kjV8QaCJayAJEgXJnBKhvjroqwgn7JPUgpD6QdSWdB4FqjbZYQ3I3oHOO1YL0vYYa8wHG5HuMsMp4J8qvzgs3QNQDECPI1mXsPevn3VMfGszUN+6BQrHB3FbZsTtOmE+Kmgok5NCT+obsfEhVea\/UOD0XFUkVW9VJhPjQ2ytvYvFIc46\/73GQf2Er\/5DCa\/4GGDEBSD++bDJgp3kQj438xslCAFeZWDwGsa+cTc43PI0Y0+E144ySVY7QyVbZ1B66a1BGWVrXJuM+gW\/eIBCMN1FJXmD7CDdPa22azKI8dfMF7qaH3Oiv3cVovPWpubOvhTUHUFwG8+W7Fx+zUKktCWiLer\/fZvEd3W8tcgby2kNOdcUfKfDB2ImZJ+P694\/OJ4jJ8T5TQerruNoP2OstzcBMon77Ry0XawXR15SZd4JhbqhSi+h7XV6EYmct1UN4zoysA7fx\/cWHcBxdnm2G6R0gzmOiiGUd74ptU8lZ3IlEP6EZckK\/OZOdy1I8EQeUe7aiTooXZDAn07iPkDZliYRr2e36ij\/xjtWCe1AjCksn\/xdKfHOKJv5UVob495DU2GuNObe01ewXzexcnldjfp9Sb8SVEFuhHx6IvH5OC+vAq+BVYu2jwvMcVfXi3VSOkB4="},"true":{"all_branches":true,"tags":true},"user":"jd","provider":"pypi"},"env":["TARGET=pep8","TARGET=docs","TARGET=docs-gnocchi.xyz","TARGET=py27-mysql-ceph-upgrade-from-4.0","TARGET=py35-postgresql-file-upgrade-from-4.0","TARGET=py27-mysql-ceph-upgrade-from-4.1","TARGET=py35-postgresql-file-upgrade-from-4.1","TARGET=py27-mysql-ceph-upgrade-from-4.2","TARGET=py35-postgresql-file-upgrade-from-4.2","TARGET=py27-mysql","TARGET=py35-mysql","TARGET=py27-postgresql","TARGET=py35-postgresql"]},"id":359265195,"pull_request_number":839,"resume_state":"error"},"requested_teams":[],"locked":false,"merged_by":null,"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/839","mergeable_state":"blocked","created_at":"2018-03-28T08:50:16Z","merged":false,"review_comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/839\/comments","review_comments":0,"assignees":[],"review_comment_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/comments{\/number}","pastamaker_approvals":[[{"bio":"Free software hacker, devops for a non-profit ISP and swing dancer.","site_admin":false,"updated_at":"2018-03-21T07:54:06Z","gravatar_id":"","hireable":null,"id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers","following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","blog":"http:\/\/blog.sileht.net\/","followers":63,"location":"Toulouse","type":"User","email":"sileht@sileht.net","public_repos":159,"events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","company":"Red Hat","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","public_gists":8,"name":"Mehdi ABAAKOUK","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","created_at":"2010-02-10T08:04:36Z","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","following":2,"login":"sileht"}],[],2,[0]],"patch_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/839.patch","changed_files":7,"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"}},{"deletions":3,"pastamaker_combined_status":"failure","merge_commit_sha":"c358dc24cec46681ad287a402425d0b0bd790b56","labels":[],"number":665,"pastamaker_travis_state":"error","assignee":null,"commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/665\/commits","mergeable":true,"closed_at":null,"requested_reviewers":[],"statuses_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/statuses\/d2a7a3bfd7515ad5dca526a111d3393c57182081","additions":33,"maintainer_can_modify":true,"title":"Don't mock swift for unittests","comments":26,"id":163799993,"merged_at":null,"state":"open","_links":{"review_comment":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/comments{\/number}"},"commits":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/665\/commits"},"self":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/665"},"review_comments":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/665\/comments"},"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/665"},"comments":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/665\/comments"},"issue":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/665"},"statuses":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/statuses\/d2a7a3bfd7515ad5dca526a111d3393c57182081"}},"pastamaker_reviews":[],"pastamaker_commits":[{"files":[{"status":"modified","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/d2a7a3bfd7515ad5dca526a111d3393c57182081\/gnocchi\/incoming\/swift.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/d2a7a3bfd7515ad5dca526a111d3393c57182081\/gnocchi\/incoming\/swift.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/incoming\/swift.py?ref=d2a7a3bfd7515ad5dca526a111d3393c57182081","filename":"gnocchi\/incoming\/swift.py","sha":"837cae4dc63bb97a67e966fe60a19e746fad1574","additions":1,"patch":"@@ -33,6 +33,7 @@ class SwiftStorage(incoming.IncomingDriver):\n     def __init__(self, conf, greedy=True):\n         super(SwiftStorage, self).__init__(conf)\n         self.swift = swift.get_connection(conf)\n+        # FIXME(sileht): Should we use conf.swift_container_prefix ?\n \n     def __str__(self):\n         return self.__class__.__name__","changes":1},{"status":"modified","deletions":3,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/d2a7a3bfd7515ad5dca526a111d3393c57182081\/gnocchi\/tests\/base.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/d2a7a3bfd7515ad5dca526a111d3393c57182081\/gnocchi\/tests\/base.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/base.py?ref=d2a7a3bfd7515ad5dca526a111d3393c57182081","filename":"gnocchi\/tests\/base.py","sha":"a3f1b44e144fe3fd845e4e2d763521f08c6a48a9","additions":24,"patch":"@@ -327,10 +327,24 @@ def setUpClass(self):\n             self.conf.set_override('ceph_conffile',\n                                    os.getenv(\"CEPH_CONF\"),\n                                    'storage')\n+        elif self.conf.storage.driver == 'swift' and six.PY2:\n+            # NOTE(sileht): swift is not py3 ready, so we use a real\n+            # swift only for py2\n+            self.conf.set_override(\"swift_user\",\n+                                   os.getenv(\"PIFPAF_SWIFT_USERNAME\"),\n+                                   \"storage\")\n+            self.conf.set_override(\"swift_key\",\n+                                   os.getenv(\"PIFPAF_SWIFT_PASSWORD\"),\n+                                   \"storage\")\n+            self.conf.set_override(\"swift_authurl\",\n+                                   os.getenv(\"PIFPAF_SWIFT_AUTH_URL\"),\n+                                   \"storage\")\n \n     def setUp(self):\n         super(TestCase, self).setUp()\n-        if swexc:\n+        if swexc and six.PY3:\n+            # NOTE(sileht): swift is not py3 ready, so we mock it\n+            # for py3\n             self.useFixture(fixtures.MockPatch(\n                 'swiftclient.client.Connection',\n                 FakeSwiftClient))\n@@ -347,6 +361,9 @@ def setUp(self):\n                     os.getenv(\"CEPH_CONF\"), pool_name), shell=True,\n                     stdout=f, stderr=subprocess.STDOUT)\n             self.conf.set_override('ceph_pool', pool_name, 'storage')\n+        elif self.conf.storage.driver == 'swift':\n+            self.conf.set_override(\"swift_container_prefix\",\n+                                   uuid.uuid4().hex, \"storage\")\n \n         # Override the bucket prefix to be unique to avoid concurrent access\n         # with any other test\n@@ -360,9 +377,13 @@ def setUp(self):\n             # Create one prefix per test\n             self.storage.STORAGE_PREFIX = str(uuid.uuid4()).encode()\n \n-        if self.conf.incoming.driver == 'redis':\n+        if self.conf.incoming.driver in ['redis', 'swift']:\n+            prefix = str(uuid.uuid4())\n+            self.incoming.CFG_PREFIX = (\n+                prefix + incoming.IncomingDriver.CFG_PREFIX\n+            )\n             self.incoming.SACK_NAME_FORMAT = (\n-                str(uuid.uuid4()) + incoming.IncomingDriver.SACK_NAME_FORMAT\n+                prefix + incoming.IncomingDriver.SACK_NAME_FORMAT\n             )\n \n         self.storage.upgrade()","changes":27},{"status":"modified","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/d2a7a3bfd7515ad5dca526a111d3393c57182081\/run-tests.sh","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/d2a7a3bfd7515ad5dca526a111d3393c57182081\/run-tests.sh","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/run-tests.sh?ref=d2a7a3bfd7515ad5dca526a111d3393c57182081","filename":"run-tests.sh","sha":"45a821467fffb3a0f33aed89def73846f4774135","additions":8,"patch":"@@ -12,6 +12,7 @@ cleanup(){\n }\n trap cleanup EXIT\n \n+PYTHON_MAJOR_VERSION=$(python -c \"import sys; print(sys.version_info[0])\")\n PIDS=\"\"\n GNOCCHI_TEST_STORAGE_DRIVERS=${GNOCCHI_TEST_STORAGE_DRIVERS:-file}\n GNOCCHI_TEST_INDEXER_DRIVERS=${GNOCCHI_TEST_INDEXER_DRIVERS:-postgresql}\n@@ -25,6 +26,13 @@ do\n             ceph|redis)\n                 pifpaf run $GNOCCHI_TEST_STORAGE_DRIVER -- pifpaf -g GNOCCHI_INDEXER_URL run $indexer -- .\/tools\/pretty_tox.sh $*\n                 ;;\n+            swift)\n+                if [ \"$PYTHON_MAJOR_VERSION\" = \"2\" ]; then\n+                    pifpaf run $GNOCCHI_TEST_STORAGE_DRIVER -- pifpaf -g GNOCCHI_INDEXER_URL run $indexer -- .\/tools\/pretty_tox.sh $*\n+                else\n+                    pifpaf -g GNOCCHI_INDEXER_URL run $indexer -- .\/tools\/pretty_tox.sh $*\n+                fi\n+                ;;\n             s3)\n                 if ! which s3rver >\/dev\/null 2>&1\n                 then","changes":8}],"committer":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"stats":{"deletions":3,"additions":33,"total":36},"author":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/d2a7a3bfd7515ad5dca526a111d3393c57182081","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/d2a7a3bfd7515ad5dca526a111d3393c57182081\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/d2a7a3bfd7515ad5dca526a111d3393c57182081","sha":"d2a7a3bfd7515ad5dca526a111d3393c57182081","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/c054ab52c64c1bbccde0f8debc059315d5376896","sha":"c054ab52c64c1bbccde0f8debc059315d5376896","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/c054ab52c64c1bbccde0f8debc059315d5376896"}],"commit":{"committer":{"date":"2018-03-21T09:17:27Z","name":"Mehdi Abaakouk","email":"sileht@sileht.net"},"author":{"date":"2018-01-18T19:12:46Z","name":"Mehdi Abaakouk","email":"sileht@redhat.com"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/d2a7a3bfd7515ad5dca526a111d3393c57182081","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/91cd8715db017c135acfa109b26e63d930371c56","sha":"91cd8715db017c135acfa109b26e63d930371c56"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"Don't mock swift for unittests\n\nFor python we can run test with a real swift, so do it."}}],"diff_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/665.diff","pastamaker_ci_statuses":{"continuous-integration\/travis-ci\/pr":{"url":"https:\/\/travis-ci.org\/gnocchixyz\/gnocchi\/builds\/356255291?utm_source=github_status&utm_medium=notification","state":"error"},"pastamaker\/reviewers":{"url":null,"state":"success"}},"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/665","body":"TODO:\n* Some tests have issues, good chance for real bug\n* keep the mock for python3 as swift is not py3 ready","head":{"repo":{"issues_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/issues{\/number}","deployments_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/deployments","has_wiki":true,"forks_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/forks","mirror_url":null,"subscription_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/subscription","notifications_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/notifications{?since,all,participating}","collaborators_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/collaborators{\/collaborator}","updated_at":"2017-05-23T14:32:13Z","private":false,"pulls_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/pulls{\/number}","issue_comment_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/issues\/comments{\/number}","labels_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/labels{\/name}","full_name":"sileht\/gnocchi","owner":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"statuses_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/statuses\/{sha}","id":92182973,"keys_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/keys{\/key_id}","size":4608,"tags_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/tags","archived":false,"downloads_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/downloads","assignees_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/assignees{\/user}","contents_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/contents\/{+path}","description":"Timeseries database","git_refs_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/git\/refs{\/sha}","has_projects":true,"clone_url":"https:\/\/github.com\/sileht\/gnocchi.git","watchers_count":0,"git_tags_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/git\/tags{\/sha}","milestones_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/milestones{\/number}","license":null,"stargazers_count":0,"homepage":null,"fork":true,"commits_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/commits{\/sha}","releases_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/releases{\/id}","issue_events_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/issues\/events{\/number}","has_downloads":true,"has_pages":false,"events_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/events","contributors_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/contributors","html_url":"https:\/\/github.com\/sileht\/gnocchi","compare_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/compare\/{base}...{head}","open_issues":0,"watchers":0,"git_commits_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/git\/commits{\/sha}","git_url":"git:\/\/github.com\/sileht\/gnocchi.git","svn_url":"https:\/\/github.com\/sileht\/gnocchi","merges_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/merges","has_issues":false,"ssh_url":"git@github.com:sileht\/gnocchi.git","blobs_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/git\/blobs{\/sha}","forks":0,"hooks_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/hooks","open_issues_count":0,"comments_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/comments{\/number}","name":"gnocchi","language":"Python","url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi","created_at":"2017-05-23T14:32:11Z","archive_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/{archive_format}{\/ref}","pushed_at":"2018-03-21T17:46:19Z","forks_count":0,"default_branch":"master","teams_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/teams","trees_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/git\/trees{\/sha}","languages_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/languages","branches_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/branches{\/branch}","subscribers_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/subscribers","stargazers_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/stargazers"},"sha":"d2a7a3bfd7515ad5dca526a111d3393c57182081","ref":"sileht\/real-swift","user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"label":"sileht:sileht\/real-swift"},"pastamaker_weight":-1,"commits":1,"author_association":"OWNER","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/665\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/665","pastamaker_travis_url":"https:\/\/travis-ci.org\/gnocchixyz\/gnocchi\/builds\/356255291?utm_source=github_status&utm_medium=notification","updated_at":"2018-03-27T19:54:45Z","pastamaker_approved":false,"base":{"repo":{"issues_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues{\/number}","deployments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/deployments","has_wiki":false,"forks_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/forks","mirror_url":null,"subscription_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/subscription","notifications_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/notifications{?since,all,participating}","collaborators_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/collaborators{\/collaborator}","updated_at":"2018-03-27T12:27:06Z","private":false,"pulls_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls{\/number}","issue_comment_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments{\/number}","labels_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/labels{\/name}","full_name":"gnocchixyz\/gnocchi","owner":{"following_url":"https:\/\/api.github.com\/users\/gnocchixyz\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/gnocchixyz\/orgs","url":"https:\/\/api.github.com\/users\/gnocchixyz","gists_url":"https:\/\/api.github.com\/users\/gnocchixyz\/gists{\/gist_id}","html_url":"https:\/\/github.com\/gnocchixyz","subscriptions_url":"https:\/\/api.github.com\/users\/gnocchixyz\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/26142905?v=4","repos_url":"https:\/\/api.github.com\/users\/gnocchixyz\/repos","received_events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/gnocchixyz\/starred{\/owner}{\/repo}","site_admin":false,"login":"gnocchixyz","type":"Organization","id":26142905,"followers_url":"https:\/\/api.github.com\/users\/gnocchixyz\/followers"},"statuses_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/statuses\/{sha}","id":91715647,"keys_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/keys{\/key_id}","size":4980,"tags_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/tags","archived":false,"downloads_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/downloads","assignees_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/assignees{\/user}","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/{+path}","description":"Timeseries database","git_refs_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/refs{\/sha}","has_projects":false,"clone_url":"https:\/\/github.com\/gnocchixyz\/gnocchi.git","watchers_count":133,"git_tags_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/tags{\/sha}","milestones_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/milestones{\/number}","license":{"spdx_id":"Apache-2.0","url":"https:\/\/api.github.com\/licenses\/apache-2.0","name":"Apache License 2.0","key":"apache-2.0"},"stargazers_count":133,"homepage":null,"fork":false,"commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits{\/sha}","releases_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/releases{\/id}","issue_events_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/events{\/number}","has_downloads":true,"has_pages":false,"events_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/events","contributors_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contributors","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi","compare_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/compare\/{base}...{head}","open_issues":51,"watchers":133,"git_commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits{\/sha}","git_url":"git:\/\/github.com\/gnocchixyz\/gnocchi.git","svn_url":"https:\/\/github.com\/gnocchixyz\/gnocchi","merges_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/merges","has_issues":true,"ssh_url":"git@github.com:gnocchixyz\/gnocchi.git","blobs_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/blobs{\/sha}","forks":30,"hooks_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/hooks","open_issues_count":51,"comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/comments{\/number}","name":"gnocchi","language":"Python","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi","created_at":"2017-05-18T16:32:52Z","archive_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/{archive_format}{\/ref}","pushed_at":"2018-03-27T16:13:12Z","forks_count":30,"default_branch":"master","teams_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/teams","trees_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees{\/sha}","languages_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/languages","branches_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/branches{\/branch}","subscribers_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/subscribers","stargazers_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/stargazers"},"sha":"37df0ad641ffe05895b4907c06a2a626ff184038","ref":"master","user":{"following_url":"https:\/\/api.github.com\/users\/gnocchixyz\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/gnocchixyz\/orgs","url":"https:\/\/api.github.com\/users\/gnocchixyz","gists_url":"https:\/\/api.github.com\/users\/gnocchixyz\/gists{\/gist_id}","html_url":"https:\/\/github.com\/gnocchixyz","subscriptions_url":"https:\/\/api.github.com\/users\/gnocchixyz\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/26142905?v=4","repos_url":"https:\/\/api.github.com\/users\/gnocchixyz\/repos","received_events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/gnocchixyz\/starred{\/owner}{\/repo}","site_admin":false,"login":"gnocchixyz","type":"Organization","id":26142905,"followers_url":"https:\/\/api.github.com\/users\/gnocchixyz\/followers"},"label":"gnocchixyz:master"},"rebaseable":true,"milestone":null,"pastamaker_travis_detail":{"commit_id":106136337,"repository_id":13523406,"jobs":[{"build_id":356255291,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/356255294\/log","number":"2529.1","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":106136337,"finished_at":"2018-03-27T19:37:54Z","started_at":"2018-03-27T19:36:20Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=pep8"},"id":356255294},{"build_id":356255291,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/356255298\/log","number":"2529.2","allow_failure":false,"queue":null,"state":"canceled","commit_id":106136337,"finished_at":"2018-03-21T10:16:12Z","started_at":null,"config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=docs"},"id":356255298},{"build_id":356255291,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/356255308\/log","number":"2529.3","allow_failure":false,"queue":null,"state":"canceled","commit_id":106136337,"finished_at":"2018-03-21T10:16:13Z","started_at":null,"config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=docs-gnocchi.xyz"},"id":356255308},{"build_id":356255291,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/356255324\/log","number":"2529.4","allow_failure":false,"queue":null,"state":"canceled","commit_id":106136337,"finished_at":"2018-03-21T10:16:13Z","started_at":null,"config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-mysql-ceph-upgrade-from-4.0"},"id":356255324},{"build_id":356255291,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/356255328\/log","number":"2529.5","allow_failure":false,"queue":null,"state":"canceled","commit_id":106136337,"finished_at":"2018-03-21T10:16:13Z","started_at":null,"config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-postgresql-file-upgrade-from-4.0"},"id":356255328},{"build_id":356255291,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/356255330\/log","number":"2529.6","allow_failure":false,"queue":null,"state":"canceled","commit_id":106136337,"finished_at":"2018-03-21T10:16:19Z","started_at":null,"config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-mysql-ceph-upgrade-from-4.1"},"id":356255330},{"build_id":356255291,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/356255333\/log","number":"2529.7","allow_failure":false,"queue":null,"state":"canceled","commit_id":106136337,"finished_at":"2018-03-21T10:16:19Z","started_at":null,"config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-postgresql-file-upgrade-from-4.1"},"id":356255333},{"build_id":356255291,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/356255334\/log","number":"2529.8","allow_failure":false,"queue":null,"state":"canceled","commit_id":106136337,"finished_at":"2018-03-21T10:18:46Z","started_at":null,"config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-mysql-ceph-upgrade-from-4.2"},"id":356255334},{"build_id":356255291,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/356255339\/log","number":"2529.9","allow_failure":false,"queue":null,"state":"canceled","commit_id":106136337,"finished_at":"2018-03-21T10:18:47Z","started_at":null,"config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-postgresql-file-upgrade-from-4.2"},"id":356255339},{"build_id":356255291,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/356255351\/log","number":"2529.10","allow_failure":false,"queue":"builds.gce","state":"failed","commit_id":106136337,"finished_at":"2018-03-27T19:54:31Z","started_at":"2018-03-27T19:38:53Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-mysql"},"id":356255351},{"build_id":356255291,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/356255359\/log","number":"2529.11","allow_failure":false,"queue":null,"state":"canceled","commit_id":106136337,"finished_at":"2018-03-21T10:41:57Z","started_at":null,"config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-mysql"},"id":356255359},{"build_id":356255291,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/356255360\/log","number":"2529.12","allow_failure":false,"queue":null,"state":"canceled","commit_id":106136337,"finished_at":"2018-03-21T10:41:58Z","started_at":null,"config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-postgresql"},"id":356255360},{"build_id":356255291,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/356255362\/log","number":"2529.13","allow_failure":false,"queue":null,"state":"canceled","commit_id":106136337,"finished_at":"2018-03-21T10:41:58Z","started_at":null,"config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-postgresql"},"id":356255362}],"event_type":"pull_request","finished_at":"2018-03-27T19:54:31Z","number":"2529","job_ids":[356255294,356255298,356255308,356255324,356255328,356255330,356255333,356255334,356255339,356255351,356255359,356255360,356255362],"state":"canceled","pull_request_title":"Don't mock swift for unittests","pull_request":true,"duration":1032,"started_at":"2018-03-27T19:38:53Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","os":"linux","deploy":{"distributions":"sdist bdist_wheel","password":{"secure":"c+Ccx3SHCWepiy0PUxDJ7XO9r3aNYnHjkzxF5c\/kjV8QaCJayAJEgXJnBKhvjroqwgn7JPUgpD6QdSWdB4FqjbZYQ3I3oHOO1YL0vYYa8wHG5HuMsMp4J8qvzgs3QNQDECPI1mXsPevn3VMfGszUN+6BQrHB3FbZsTtOmE+Kmgok5NCT+obsfEhVea\/UOD0XFUkVW9VJhPjQ2ytvYvFIc46\/73GQf2Er\/5DCa\/4GGDEBSD++bDJgp3kQj438xslCAFeZWDwGsa+cTc43PI0Y0+E144ySVY7QyVbZ1B66a1BGWVrXJuM+gW\/eIBCMN1FJXmD7CDdPa22azKI8dfMF7qaH3Oiv3cVovPWpubOvhTUHUFwG8+W7Fx+zUKktCWiLer\/fZvEd3W8tcgby2kNOdcUfKfDB2ImZJ+P694\/OJ4jJ8T5TQerruNoP2OstzcBMon77Ry0XawXR15SZd4JhbqhSi+h7XV6EYmct1UN4zoysA7fx\/cWHcBxdnm2G6R0gzmOiiGUd74ptU8lZ3IlEP6EZckK\/OZOdy1I8EQeUe7aiTooXZDAn07iPkDZliYRr2e36ij\/xjtWCe1AjCksn\/xdKfHOKJv5UVob495DU2GuNObe01ewXzexcnldjfp9Sb8SVEFuhHx6IvH5OC+vAq+BVYu2jwvMcVfXi3VSOkB4="},"true":{"all_branches":true,"tags":true},"user":"jd","provider":"pypi"},"env":["TARGET=pep8","TARGET=docs","TARGET=docs-gnocchi.xyz","TARGET=py27-mysql-ceph-upgrade-from-4.0","TARGET=py35-postgresql-file-upgrade-from-4.0","TARGET=py27-mysql-ceph-upgrade-from-4.1","TARGET=py35-postgresql-file-upgrade-from-4.1","TARGET=py27-mysql-ceph-upgrade-from-4.2","TARGET=py35-postgresql-file-upgrade-from-4.2","TARGET=py27-mysql","TARGET=py35-mysql","TARGET=py27-postgresql","TARGET=py35-postgresql"]},"id":356255291,"pull_request_number":665,"resume_state":"error"},"requested_teams":[],"locked":false,"merged_by":null,"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/665","mergeable_state":"behind","created_at":"2018-01-18T19:25:10Z","merged":false,"review_comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/665\/comments","review_comments":0,"assignees":[],"review_comment_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/comments{\/number}","pastamaker_approvals":[[],[],2,[0,1]],"patch_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/665.patch","changed_files":3,"user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"}},{"deletions":0,"pastamaker_combined_status":"success","merge_commit_sha":"a0647da7d0555aa39931f215d085646cd4cf3b52","labels":[],"number":837,"pastamaker_travis_state":"success","assignee":null,"commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/837\/commits","mergeable":true,"closed_at":null,"additions":11,"statuses_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/statuses\/cf980991ed16c709511401305ab50cb70969ddef","id":177758980,"requested_reviewers":[],"maintainer_can_modify":true,"title":"api: catch UnexpectedResourceTypeState properly","comments":0,"merged_at":null,"state":"open","_links":{"review_comment":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/comments{\/number}"},"commits":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/837\/commits"},"self":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/837"},"review_comments":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/837\/comments"},"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/837"},"comments":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/837\/comments"},"issue":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/837"},"statuses":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/statuses\/cf980991ed16c709511401305ab50cb70969ddef"}},"pastamaker_reviews":[{"body":"","commit_id":"cf980991ed16c709511401305ab50cb70969ddef","submitted_at":"2018-03-27T14:31:20Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/837#pullrequestreview-107317089","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/837","state":"COMMENTED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/837#pullrequestreview-107317089"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/837"}},"user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"id":107317089},{"body":"","commit_id":"cf980991ed16c709511401305ab50cb70969ddef","submitted_at":"2018-03-27T14:57:20Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/837#pullrequestreview-107329419","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/837","state":"COMMENTED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/837#pullrequestreview-107329419"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/837"}},"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"id":107329419}],"pastamaker_commits":[{"files":[{"status":"modified","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/cf980991ed16c709511401305ab50cb70969ddef\/gnocchi\/indexer\/__init__.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/cf980991ed16c709511401305ab50cb70969ddef\/gnocchi\/indexer\/__init__.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/indexer\/__init__.py?ref=cf980991ed16c709511401305ab50cb70969ddef","filename":"gnocchi\/indexer\/__init__.py","sha":"4482e301b18dccd0c6e5f61d361c88e2529dea8e","additions":9,"patch":"@@ -192,6 +192,15 @@ def __init__(self, resource_type, expected_state, state):\n         self.expected_state = expected_state\n         self.state = state\n \n+    def jsonify(self):\n+        return {\n+            \"cause\": \"Resource type has an unexpected state\",\n+            \"detail\": {\n+                \"expected_state\": self.expected_state,\n+                \"current_state\": self.state\n+            },\n+        }\n+\n \n class NoSuchArchivePolicyRule(IndexerException):\n     \"\"\"Error raised when an archive policy rule does not exist.\"\"\"","changes":9},{"status":"modified","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/cf980991ed16c709511401305ab50cb70969ddef\/gnocchi\/rest\/api.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/cf980991ed16c709511401305ab50cb70969ddef\/gnocchi\/rest\/api.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/rest\/api.py?ref=cf980991ed16c709511401305ab50cb70969ddef","filename":"gnocchi\/rest\/api.py","sha":"173c6f48d3a851f8888864568683cee742132fbf","additions":2,"patch":"@@ -1135,6 +1135,8 @@ def post(self):\n             abort(400, six.text_type(e))\n         except indexer.ResourceAlreadyExists as e:\n             abort(409, six.text_type(e))\n+        except indexer.UnexpectedResourceTypeState as e:\n+            abort(503, e)\n         set_resp_location_hdr(\"\/resource\/\"\n                               + self._resource_type + \"\/\"\n                               + six.text_type(resource.id))","changes":2}],"committer":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"stats":{"deletions":0,"additions":11,"total":11},"author":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/cf980991ed16c709511401305ab50cb70969ddef","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/cf980991ed16c709511401305ab50cb70969ddef\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/cf980991ed16c709511401305ab50cb70969ddef","sha":"cf980991ed16c709511401305ab50cb70969ddef","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/51ac20f06690f54933fb6f84ba3353ea0eae5170","sha":"51ac20f06690f54933fb6f84ba3353ea0eae5170","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/51ac20f06690f54933fb6f84ba3353ea0eae5170"}],"commit":{"committer":{"date":"2018-03-27T14:26:07Z","name":"Julien Danjou","email":"julien@danjou.info"},"author":{"date":"2018-03-27T14:26:07Z","name":"Julien Danjou","email":"julien@danjou.info"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/cf980991ed16c709511401305ab50cb70969ddef","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/9e3dc7a3d53cd18c27cd64f6bdf852876f5637fc","sha":"9e3dc7a3d53cd18c27cd64f6bdf852876f5637fc"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"api: catch UnexpectedResourceTypeState properly\n\nWhen creating resource, this might happen if the resource type is not\ncompletely created yet (race condition). Rather than crash and return 500,\nreturn a 503 with a parseable reply so it can be retried."}}],"diff_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/837.diff","pastamaker_ci_statuses":{},"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/837","body":"When creating resource, this might happen if the resource type is not\ncompletely created yet (race condition). Rather than crash and return 500,\nreturn a 503 with a parseable reply so it can be retried.","head":{"repo":{"issues_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/issues{\/number}","deployments_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/deployments","has_wiki":true,"forks_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/forks","mirror_url":null,"subscription_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/subscription","notifications_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/notifications{?since,all,participating}","collaborators_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/collaborators{\/collaborator}","updated_at":"2017-05-19T16:20:11Z","private":false,"pulls_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/pulls{\/number}","issue_comment_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/issues\/comments{\/number}","labels_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/labels{\/name}","full_name":"jd\/gnocchi","owner":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"statuses_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/statuses\/{sha}","id":91824535,"keys_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/keys{\/key_id}","size":5190,"tags_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/tags","archived":false,"downloads_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/downloads","assignees_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/assignees{\/user}","contents_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/contents\/{+path}","description":"Timeseries database","git_refs_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/git\/refs{\/sha}","has_projects":true,"clone_url":"https:\/\/github.com\/jd\/gnocchi.git","watchers_count":0,"git_tags_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/git\/tags{\/sha}","milestones_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/milestones{\/number}","license":null,"stargazers_count":0,"comments_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/comments{\/number}","homepage":null,"fork":true,"commits_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/commits{\/sha}","releases_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/releases{\/id}","issue_events_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/issues\/events{\/number}","has_downloads":true,"has_pages":false,"events_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/events","contributors_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/contributors","html_url":"https:\/\/github.com\/jd\/gnocchi","compare_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/compare\/{base}...{head}","open_issues":0,"git_commits_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/git\/commits{\/sha}","git_url":"git:\/\/github.com\/jd\/gnocchi.git","svn_url":"https:\/\/github.com\/jd\/gnocchi","merges_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/merges","has_issues":false,"ssh_url":"git@github.com:jd\/gnocchi.git","blobs_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/git\/blobs{\/sha}","forks":0,"hooks_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/hooks","open_issues_count":0,"watchers":0,"name":"gnocchi","language":"Python","url":"https:\/\/api.github.com\/repos\/jd\/gnocchi","created_at":"2017-05-19T16:20:08Z","archive_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/{archive_format}{\/ref}","pushed_at":"2018-03-27T14:28:27Z","forks_count":0,"default_branch":"master","teams_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/teams","trees_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/git\/trees{\/sha}","languages_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/languages","branches_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/branches{\/branch}","subscribers_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/subscribers","stargazers_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/stargazers"},"sha":"cf980991ed16c709511401305ab50cb70969ddef","ref":"catch-UnexpectedResourceTypeState","user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"label":"jd:catch-UnexpectedResourceTypeState"},"pastamaker_weight":-1,"commits":1,"author_association":"OWNER","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/837\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/837","pastamaker_travis_url":"https:\/\/travis-ci.org\/gnocchixyz\/gnocchi\/builds\/358914247?utm_source=github_status&utm_medium=notification","updated_at":"2018-03-27T14:57:20Z","pastamaker_approved":false,"base":{"repo":{"issues_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues{\/number}","deployments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/deployments","has_wiki":false,"forks_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/forks","mirror_url":null,"subscription_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/subscription","notifications_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/notifications{?since,all,participating}","collaborators_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/collaborators{\/collaborator}","updated_at":"2018-03-27T12:27:06Z","private":false,"pulls_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls{\/number}","issue_comment_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments{\/number}","labels_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/labels{\/name}","full_name":"gnocchixyz\/gnocchi","owner":{"following_url":"https:\/\/api.github.com\/users\/gnocchixyz\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/gnocchixyz\/orgs","url":"https:\/\/api.github.com\/users\/gnocchixyz","gists_url":"https:\/\/api.github.com\/users\/gnocchixyz\/gists{\/gist_id}","html_url":"https:\/\/github.com\/gnocchixyz","subscriptions_url":"https:\/\/api.github.com\/users\/gnocchixyz\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/26142905?v=4","repos_url":"https:\/\/api.github.com\/users\/gnocchixyz\/repos","received_events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/gnocchixyz\/starred{\/owner}{\/repo}","site_admin":false,"login":"gnocchixyz","type":"Organization","id":26142905,"followers_url":"https:\/\/api.github.com\/users\/gnocchixyz\/followers"},"statuses_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/statuses\/{sha}","id":91715647,"keys_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/keys{\/key_id}","size":4980,"tags_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/tags","archived":false,"downloads_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/downloads","assignees_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/assignees{\/user}","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/{+path}","description":"Timeseries database","git_refs_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/refs{\/sha}","has_projects":false,"clone_url":"https:\/\/github.com\/gnocchixyz\/gnocchi.git","watchers_count":133,"git_tags_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/tags{\/sha}","milestones_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/milestones{\/number}","license":{"spdx_id":"Apache-2.0","url":"https:\/\/api.github.com\/licenses\/apache-2.0","name":"Apache License 2.0","key":"apache-2.0"},"stargazers_count":133,"comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/comments{\/number}","homepage":null,"fork":false,"commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits{\/sha}","releases_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/releases{\/id}","issue_events_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/events{\/number}","has_downloads":true,"has_pages":false,"events_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/events","contributors_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contributors","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi","compare_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/compare\/{base}...{head}","open_issues":51,"git_commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits{\/sha}","git_url":"git:\/\/github.com\/gnocchixyz\/gnocchi.git","svn_url":"https:\/\/github.com\/gnocchixyz\/gnocchi","merges_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/merges","has_issues":true,"ssh_url":"git@github.com:gnocchixyz\/gnocchi.git","blobs_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/blobs{\/sha}","forks":30,"hooks_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/hooks","open_issues_count":51,"watchers":133,"name":"gnocchi","language":"Python","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi","created_at":"2017-05-18T16:32:52Z","archive_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/{archive_format}{\/ref}","pushed_at":"2018-03-27T14:28:24Z","forks_count":30,"default_branch":"master","teams_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/teams","trees_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees{\/sha}","languages_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/languages","branches_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/branches{\/branch}","subscribers_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/subscribers","stargazers_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/stargazers"},"sha":"51ac20f06690f54933fb6f84ba3353ea0eae5170","ref":"master","user":{"following_url":"https:\/\/api.github.com\/users\/gnocchixyz\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/gnocchixyz\/orgs","url":"https:\/\/api.github.com\/users\/gnocchixyz","gists_url":"https:\/\/api.github.com\/users\/gnocchixyz\/gists{\/gist_id}","html_url":"https:\/\/github.com\/gnocchixyz","subscriptions_url":"https:\/\/api.github.com\/users\/gnocchixyz\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/26142905?v=4","repos_url":"https:\/\/api.github.com\/users\/gnocchixyz\/repos","received_events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/gnocchixyz\/starred{\/owner}{\/repo}","site_admin":false,"login":"gnocchixyz","type":"Organization","id":26142905,"followers_url":"https:\/\/api.github.com\/users\/gnocchixyz\/followers"},"label":"gnocchixyz:master"},"rebaseable":true,"milestone":null,"pastamaker_travis_detail":{"commit_id":106975060,"repository_id":13523406,"jobs":[{"build_id":358914247,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/358914248\/log","number":"2561.1","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":106975060,"finished_at":"2018-03-27T14:30:59Z","started_at":"2018-03-27T14:28:59Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=pep8"},"id":358914248},{"build_id":358914247,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/358914249\/log","number":"2561.2","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":106975060,"finished_at":"2018-03-27T14:34:49Z","started_at":"2018-03-27T14:29:14Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=docs"},"id":358914249},{"build_id":358914247,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/358914250\/log","number":"2561.3","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":106975060,"finished_at":"2018-03-27T14:36:06Z","started_at":"2018-03-27T14:29:18Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=docs-gnocchi.xyz"},"id":358914250},{"build_id":358914247,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/358914252\/log","number":"2561.4","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":106975060,"finished_at":"2018-03-27T14:35:35Z","started_at":"2018-03-27T14:29:19Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-mysql-ceph-upgrade-from-4.0"},"id":358914252},{"build_id":358914247,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/358914253\/log","number":"2561.5","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":106975060,"finished_at":"2018-03-27T14:35:57Z","started_at":"2018-03-27T14:29:09Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-postgresql-file-upgrade-from-4.0"},"id":358914253},{"build_id":358914247,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/358914254\/log","number":"2561.6","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":106975060,"finished_at":"2018-03-27T14:37:26Z","started_at":"2018-03-27T14:31:32Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-mysql-ceph-upgrade-from-4.1"},"id":358914254},{"build_id":358914247,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/358914255\/log","number":"2561.7","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":106975060,"finished_at":"2018-03-27T14:44:29Z","started_at":"2018-03-27T14:35:32Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-postgresql-file-upgrade-from-4.1"},"id":358914255},{"build_id":358914247,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/358914256\/log","number":"2561.8","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":106975060,"finished_at":"2018-03-27T14:44:05Z","started_at":"2018-03-27T14:36:14Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-mysql-ceph-upgrade-from-4.2"},"id":358914256},{"build_id":358914247,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/358914257\/log","number":"2561.9","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":106975060,"finished_at":"2018-03-27T14:43:17Z","started_at":"2018-03-27T14:36:29Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-postgresql-file-upgrade-from-4.2"},"id":358914257},{"build_id":358914247,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/358914258\/log","number":"2561.10","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":106975060,"finished_at":"2018-03-27T15:19:49Z","started_at":"2018-03-27T14:36:47Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-mysql"},"id":358914258},{"build_id":358914247,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/358914259\/log","number":"2561.11","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":106975060,"finished_at":"2018-03-27T15:26:40Z","started_at":"2018-03-27T14:38:34Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-mysql"},"id":358914259},{"build_id":358914247,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/358914260\/log","number":"2561.12","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":106975060,"finished_at":"2018-03-27T15:26:14Z","started_at":"2018-03-27T14:44:11Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-postgresql"},"id":358914260},{"build_id":358914247,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/358914261\/log","number":"2561.13","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":106975060,"finished_at":"2018-03-27T15:27:05Z","started_at":"2018-03-27T14:44:57Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-postgresql"},"id":358914261}],"event_type":"pull_request","finished_at":"2018-03-27T15:27:05Z","number":"2561","job_ids":[358914248,358914249,358914250,358914252,358914253,358914254,358914255,358914256,358914257,358914258,358914259,358914260,358914261],"state":"passed","pull_request_title":"api: catch UnexpectedResourceTypeState properly","pull_request":true,"duration":13936,"started_at":"2018-03-27T14:28:59Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","os":"linux","deploy":{"distributions":"sdist bdist_wheel","password":{"secure":"c+Ccx3SHCWepiy0PUxDJ7XO9r3aNYnHjkzxF5c\/kjV8QaCJayAJEgXJnBKhvjroqwgn7JPUgpD6QdSWdB4FqjbZYQ3I3oHOO1YL0vYYa8wHG5HuMsMp4J8qvzgs3QNQDECPI1mXsPevn3VMfGszUN+6BQrHB3FbZsTtOmE+Kmgok5NCT+obsfEhVea\/UOD0XFUkVW9VJhPjQ2ytvYvFIc46\/73GQf2Er\/5DCa\/4GGDEBSD++bDJgp3kQj438xslCAFeZWDwGsa+cTc43PI0Y0+E144ySVY7QyVbZ1B66a1BGWVrXJuM+gW\/eIBCMN1FJXmD7CDdPa22azKI8dfMF7qaH3Oiv3cVovPWpubOvhTUHUFwG8+W7Fx+zUKktCWiLer\/fZvEd3W8tcgby2kNOdcUfKfDB2ImZJ+P694\/OJ4jJ8T5TQerruNoP2OstzcBMon77Ry0XawXR15SZd4JhbqhSi+h7XV6EYmct1UN4zoysA7fx\/cWHcBxdnm2G6R0gzmOiiGUd74ptU8lZ3IlEP6EZckK\/OZOdy1I8EQeUe7aiTooXZDAn07iPkDZliYRr2e36ij\/xjtWCe1AjCksn\/xdKfHOKJv5UVob495DU2GuNObe01ewXzexcnldjfp9Sb8SVEFuhHx6IvH5OC+vAq+BVYu2jwvMcVfXi3VSOkB4="},"true":{"all_branches":true,"tags":true},"user":"jd","provider":"pypi"},"env":["TARGET=pep8","TARGET=docs","TARGET=docs-gnocchi.xyz","TARGET=py27-mysql-ceph-upgrade-from-4.0","TARGET=py35-postgresql-file-upgrade-from-4.0","TARGET=py27-mysql-ceph-upgrade-from-4.1","TARGET=py35-postgresql-file-upgrade-from-4.1","TARGET=py27-mysql-ceph-upgrade-from-4.2","TARGET=py35-postgresql-file-upgrade-from-4.2","TARGET=py27-mysql","TARGET=py35-mysql","TARGET=py27-postgresql","TARGET=py35-postgresql"]},"id":358914247,"pull_request_number":837,"resume_state":"success"},"requested_teams":[],"locked":false,"merged_by":null,"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/837","mergeable_state":"blocked","created_at":"2018-03-27T14:28:23Z","merged":false,"review_comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/837\/comments","review_comments":2,"assignees":[],"review_comment_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/comments{\/number}","pastamaker_comments":[],"pastamaker_approvals":[[],[],2,[0,1]],"patch_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/837.patch","changed_files":2,"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"}},{"deletions":10,"pastamaker_combined_status":"failure","merge_commit_sha":"8f34c2a1d7110ef0648126265617945dbb1abc54","labels":[],"number":817,"pastamaker_travis_state":"failure","assignee":null,"commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/817\/commits","mergeable":true,"closed_at":null,"additions":233,"statuses_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/statuses\/5e08ac135f8437ec433edbf64f54c86c9997a111","id":175001251,"requested_reviewers":[],"maintainer_can_modify":true,"title":"allow to generate a pex executable","comments":22,"merged_at":null,"state":"open","_links":{"review_comment":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/comments{\/number}"},"commits":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/817\/commits"},"self":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/817"},"review_comments":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/817\/comments"},"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/817"},"comments":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/817\/comments"},"issue":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/817"},"statuses":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/statuses\/5e08ac135f8437ec433edbf64f54c86c9997a111"}},"pastamaker_reviews":[{"body":"what's a pex?","commit_id":"5e21cd5b5058406d8cf75c181a56165c34032c3e","submitted_at":"2018-03-14T22:46:40Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/817#pullrequestreview-104025930","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/817","state":"COMMENTED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/817#pullrequestreview-104025930"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/817"}},"user":{"following_url":"https:\/\/api.github.com\/users\/chungg\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/chungg\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/chungg\/orgs","url":"https:\/\/api.github.com\/users\/chungg","gists_url":"https:\/\/api.github.com\/users\/chungg\/gists{\/gist_id}","html_url":"https:\/\/github.com\/chungg","subscriptions_url":"https:\/\/api.github.com\/users\/chungg\/subscriptions","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/5091603?v=4","repos_url":"https:\/\/api.github.com\/users\/chungg\/repos","received_events_url":"https:\/\/api.github.com\/users\/chungg\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/chungg\/starred{\/owner}{\/repo}","site_admin":false,"login":"chungg","type":"User","id":5091603,"followers_url":"https:\/\/api.github.com\/users\/chungg\/followers"},"id":104025930},{"body":"+ release note\r\n+ doc update","commit_id":"17a0b060fdbd8e34feb3a08b705893f08cd4eb6d","submitted_at":"2018-03-16T13:23:49Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/817#pullrequestreview-104561358","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/817","state":"CHANGES_REQUESTED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/817#pullrequestreview-104561358"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/817"}},"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"id":104561358},{"body":"","commit_id":"17a0b060fdbd8e34feb3a08b705893f08cd4eb6d","submitted_at":"2018-03-16T17:07:14Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/817#pullrequestreview-104646754","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/817","state":"COMMENTED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/817#pullrequestreview-104646754"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/817"}},"user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"id":104646754},{"body":"","commit_id":"17a0b060fdbd8e34feb3a08b705893f08cd4eb6d","submitted_at":"2018-03-16T17:07:23Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/817#pullrequestreview-104646809","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/817","state":"COMMENTED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/817#pullrequestreview-104646809"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/817"}},"user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"id":104646809},{"body":"","commit_id":"17a0b060fdbd8e34feb3a08b705893f08cd4eb6d","submitted_at":"2018-03-16T17:08:17Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/817#pullrequestreview-104647086","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/817","state":"COMMENTED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/817#pullrequestreview-104647086"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/817"}},"user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"id":104647086},{"body":"","commit_id":"17a0b060fdbd8e34feb3a08b705893f08cd4eb6d","submitted_at":"2018-03-16T17:08:34Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/817#pullrequestreview-104647182","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/817","state":"COMMENTED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/817#pullrequestreview-104647182"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/817"}},"user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"id":104647182},{"body":"","commit_id":"7fc50bd3ad3ab839b99f8ed27d491f416211943c","submitted_at":"2018-03-20T15:49:18Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/817#pullrequestreview-105412076","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/817","state":"COMMENTED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/817#pullrequestreview-105412076"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/817"}},"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"id":105412076},{"body":"","commit_id":"7fc50bd3ad3ab839b99f8ed27d491f416211943c","submitted_at":"2018-03-20T15:49:50Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/817#pullrequestreview-105412369","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/817","state":"COMMENTED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/817#pullrequestreview-105412369"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/817"}},"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"id":105412369},{"body":"","commit_id":"7fc50bd3ad3ab839b99f8ed27d491f416211943c","submitted_at":"2018-03-20T15:50:18Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/817#pullrequestreview-105412586","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/817","state":"COMMENTED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/817#pullrequestreview-105412586"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/817"}},"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"id":105412586},{"body":"","commit_id":"7fc50bd3ad3ab839b99f8ed27d491f416211943c","submitted_at":"2018-03-20T15:51:04Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/817#pullrequestreview-105412966","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/817","state":"COMMENTED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/817#pullrequestreview-105412966"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/817"}},"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"id":105412966},{"body":"See inline","commit_id":"7fc50bd3ad3ab839b99f8ed27d491f416211943c","submitted_at":"2018-03-20T15:52:07Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/817#pullrequestreview-105413514","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/817","state":"CHANGES_REQUESTED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/817#pullrequestreview-105413514"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/817"}},"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"id":105413514},{"body":"","commit_id":"7fc50bd3ad3ab839b99f8ed27d491f416211943c","submitted_at":"2018-03-21T09:10:45Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/817#pullrequestreview-105642427","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/817","state":"COMMENTED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/817#pullrequestreview-105642427"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/817"}},"user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"id":105642427},{"body":"","commit_id":"7fc50bd3ad3ab839b99f8ed27d491f416211943c","submitted_at":"2018-03-21T09:10:50Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/817#pullrequestreview-105642447","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/817","state":"COMMENTED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/817#pullrequestreview-105642447"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/817"}},"user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"id":105642447},{"body":"","commit_id":"7fc50bd3ad3ab839b99f8ed27d491f416211943c","submitted_at":"2018-03-21T09:11:30Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/817#pullrequestreview-105642635","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/817","state":"COMMENTED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/817#pullrequestreview-105642635"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/817"}},"user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"id":105642635},{"body":"","commit_id":"5e08ac135f8437ec433edbf64f54c86c9997a111","submitted_at":"2018-03-21T09:29:51Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/817#pullrequestreview-105647913","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/817","state":"APPROVED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/817#pullrequestreview-105647913"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/817"}},"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"id":105647913}],"pastamaker_commits":[{"files":[{"status":"modified","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/5e08ac135f8437ec433edbf64f54c86c9997a111\/.gitignore","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/5e08ac135f8437ec433edbf64f54c86c9997a111\/.gitignore","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/.gitignore?ref=5e08ac135f8437ec433edbf64f54c86c9997a111","filename":".gitignore","sha":"0ca6cce5fcbcc31b9b8fc44aafe53cb8488c645b","additions":3,"patch":"@@ -2,12 +2,15 @@\n *.pyc\n .tox\n *.egg-info\n+.eggs\n+.pex\n AUTHORS\n ChangeLog\n etc\/gnocchi\/gnocchi.conf\n gnocchi\/rest\/gnocchi-api\n doc\/build\n doc\/source\/rest.rst\n+doc\/source\/pex.rst\n doc\/source\/gnocchi.conf.sample\n releasenotes\/build\n cover","changes":3},{"status":"modified","deletions":1,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/5e08ac135f8437ec433edbf64f54c86c9997a111\/doc\/source\/conf.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/5e08ac135f8437ec433edbf64f54c86c9997a111\/doc\/source\/conf.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/doc\/source\/conf.py?ref=5e08ac135f8437ec433edbf64f54c86c9997a111","filename":"doc\/source\/conf.py","sha":"100d9b5f30f72ef07f79d62011a0e6ce7e03f523","additions":1,"patch":"@@ -123,7 +123,7 @@\n # Add any paths that contain custom static files (such as style sheets) here,\n # relative to this directory. They are copied after the builtin static files,\n # so a file named \"default.css\" will overwrite the builtin \"default.css\".\n-html_static_path = ['_static']\n+html_static_path = ['_static', 'dist']\n \n # If not '', a 'Last updated on:' timestamp is inserted at every page bottom,\n # using the given strftime format.","changes":2},{"status":"modified","deletions":2,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/5e08ac135f8437ec433edbf64f54c86c9997a111\/doc\/source\/install.rst","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/5e08ac135f8437ec433edbf64f54c86c9997a111\/doc\/source\/install.rst","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/doc\/source\/install.rst?ref=5e08ac135f8437ec433edbf64f54c86c9997a111","filename":"doc\/source\/install.rst","sha":"48d2b26239d7d7c11bbe91f4a3ba5b1b689f7a32","additions":3,"patch":"@@ -4,8 +4,8 @@\n \n .. _installation:\n \n-Installation\n-============\n+Installation from source\n+========================\n \n Gnocchi can be installed using `pip`. Depending on the drivers and features you\n want to use (see :doc:`intro` for which driver to pick), you need to specify\n@@ -61,6 +61,7 @@ works with Ceph >= 0.80.0.\n If Ceph and python-rados are >= 12.2.0, the cradox Python library becomes\n optional but is still recommended.\n \n+.. include:: pex.rst\n \n Configuration\n =============","changes":5},{"status":"added","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/5e08ac135f8437ec433edbf64f54c86c9997a111\/doc\/source\/pex.rst.j2","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/5e08ac135f8437ec433edbf64f54c86c9997a111\/doc\/source\/pex.rst.j2","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/doc\/source\/pex.rst.j2?ref=5e08ac135f8437ec433edbf64f54c86c9997a111","filename":"doc\/source\/pex.rst.j2","sha":"51516a4436a8a22344e214413347f747e7b9121d","additions":31,"patch":"@@ -0,0 +1,31 @@\n+Installation from pex binary\n+============================\n+\n+Gnocchi can be installed by just downloading a binary (built with `pex`_).\n+\n+(Only master is supported for now, next stable release will also support it)\n+\n+::\n+\n+    $ curl -O {{ master_binary }} https:\/\/gnocchi.xyz\/dist\/{{ master_binary }}\n+    $ .\/{{ master_binary }} make-links\n+    gnocchi-change-sack-size symlink created\n+    gnocchi-upgrade symlink created\n+    gnocchi-config-generator symlink created\n+    gnocchi-api symlink created\n+    gnocchi-statsd symlink created\n+    gnocchi-metricd symlink created\n+    $ ls -l\n+    total 33036\n+    -rwxr-xr-x 1 user user 33828159 Mar 20 07:52 {{ master_binary }}\n+    lrwxrwxrwx 1 user user       37 Mar 20 07:53 gnocchi-api -> {{ master_binary }}\n+    lrwxrwxrwx 1 user user       37 Mar 20 07:53 gnocchi-change-sack-size -> {{ master_binary }}\n+    lrwxrwxrwx 1 user user       37 Mar 20 07:53 gnocchi-config-generator -> {{ master_binary }}\n+    lrwxrwxrwx 1 user user       37 Mar 20 07:53 gnocchi-metricd -> {{ master_binary }}\n+    lrwxrwxrwx 1 user user       37 Mar 20 07:53 gnocchi-statsd -> {{ master_binary }}\n+    lrwxrwxrwx 1 user user       37 Mar 20 07:53 gnocchi-upgrade -> {{ master_binary }}\n+\n+You could then use run those symbolic links as they were standard executable.\n+For example, call `.\/gnocchi-upgrade` to run `gnocchi-upgrade`.\n+\n+.. _pex: https:\/\/github.com\/pantsbuild\/pex","changes":31},{"status":"modified","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/5e08ac135f8437ec433edbf64f54c86c9997a111\/gnocchi\/gendoc.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/5e08ac135f8437ec433edbf64f54c86c9997a111\/gnocchi\/gendoc.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/gendoc.py?ref=5e08ac135f8437ec433edbf64f54c86c9997a111","filename":"gnocchi\/gendoc.py","sha":"8e7263d5434fe881f43e775b158038d8fe06e3ff","additions":13,"patch":"@@ -27,6 +27,7 @@\n import webob.request\n import yaml\n \n+from gnocchi import pex\n from gnocchi.tests import test_rest\n \n # HACK(jd) Not sure why but Sphinx setup this multiple times, so we just avoid\n@@ -243,6 +244,18 @@ def setup(app):\n             content = content.encode(\"utf-8\")\n         f.write(content)\n \n+    master_binary = os.path.basename(pex.build(\"doc\/source\/dist\"))\n+    with open(\"doc\/source\/pex.rst.j2\", \"r\") as f:\n+        content = f.read()\n+        if six.PY2:\n+            content = content.decode(\"utf-8\")\n+        template = jinja2.Template(content)\n+    with open(\"doc\/source\/pex.rst\", \"w\") as f:\n+        content = template.render(master_binary=master_binary)\n+        if six.PY2:\n+            content = content.encode(\"utf-8\")\n+        f.write(content)\n+\n     config_output_file = 'doc\/source\/gnocchi.conf.sample'\n     app.info(\"Generating %s\" % config_output_file)\n     generator.main([","changes":13},{"status":"added","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/5e08ac135f8437ec433edbf64f54c86c9997a111\/gnocchi\/pex.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/5e08ac135f8437ec433edbf64f54c86c9997a111\/gnocchi\/pex.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/pex.py?ref=5e08ac135f8437ec433edbf64f54c86c9997a111","filename":"gnocchi\/pex.py","sha":"83459cb3a9b125f41597502955edcf57ebde523a","additions":125,"patch":"@@ -0,0 +1,125 @@\n+# Copyright (c) 2018 Red Hat, Inc.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#    http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+# implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+import os\n+import pkg_resources\n+import platform\n+import shutil\n+import subprocess\n+import sys\n+\n+\n+def usage(msg, subsystem_mapping):\n+    print(\"%s Valid subcommands are make-links, %s\" %\n+          (msg, \", \".join(subsystem_mapping.keys())))\n+    return 1\n+\n+\n+def bootstrap():\n+    subsystem_mapping = dict(\n+        (ep.name, ep)\n+        for ep in pkg_resources.iter_entry_points('console_scripts')\n+        if ep.module_name.startswith(\"gnocchi.\")\n+    )\n+\n+    # NOTE(sileht): gnocchi-api is a script and not an entrypoint\n+    subsystem_mapping[\"gnocchi-api\"] = pkg_resources.EntryPoint.parse(\n+        \"api = gnocchi.cli.api:api\")\n+\n+    binary = os.path.basename(sys.argv[0])\n+    if binary in subsystem_mapping:\n+        # NOTE(sileht): Started from a known symlink name\n+        return subsystem_mapping[binary].load(require=False)()\n+\n+    elif len(sys.argv) < 2:\n+        return usage(\"A subcommand must be passed.\",\n+                     subsystem_mapping)\n+\n+    else:\n+        subsystem = \"gnocchi-%s\" % sys.argv[1]\n+        if subsystem == \"gnocchi-make-links\":\n+            for s in subsystem_mapping:\n+                os.symlink(binary, s)\n+                print(\"%s symlink created\" % s)\n+            return 0\n+        elif subsystem in subsystem_mapping:\n+            sys.argv = [subsystem] + sys.argv[2:]\n+            return subsystem_mapping[subsystem].load(require=False)()\n+        else:\n+            return usage(\"Subcommand %s is invalid.\" % subsystem,\n+                         subsystem_mapping)\n+\n+\n+def build(path=\"dist\", version=None):\n+    if not os.getenv(\"VIRTUAL_ENV\"):\n+        raise RuntimeError(\"Expected to be run into a tox virtualenv\")\n+\n+    # NOTE(sileht): Less binary wheel the zip will have, lower the issues\n+    # due to library compatibility will be.\n+    #\n+    # Here the current list of platform dependent wheels for py35:\n+    # * cradox-2.0.2-cp35-cp35m-linux_x86_64.whl\n+    # * lz4-1.0.0-cp35-cp35m-linux_x86_64.whl\n+    # * MarkupSafe-1.0-cp35-cp35m-linux_x86_64.whl\n+    # * msgpack-0.5.6-cp35-cp35m-linux_x86_64.whl\n+    # * netifaces-0.10.6-cp35-cp35m-linux_x86_64.whl\n+    # * numpy-1.14.2-cp35-cp35m-linux_x86_64.whl\n+    # * psycopg2-2.7.4-cp35-cp35m-linux_x86_64.whl\n+    # * PyYAML-3.12-cp35-cp35m-linux_x86_64.whl\n+    # * setproctitle-1.1.10-cp35-cp35m-linux_x86_64.whl\n+    # * SQLAlchemy-1.2.5-cp35-cp35m-linux_x86_64.whl\n+    # * ujson-1.35-cp35-cp35m-linux_x86_64.whl\n+    # * wrapt-1.10.11-cp35-cp35m-linux_x86_64.whl\n+\n+    # FIXME(sileht): We shouldn't build cradox because, it depends on the\n+    # librados2 installed but if we don't, we have to allow site package, and\n+    # the build may not have all dependencies.\n+    extras = \"mysql,postgresql,redis,keystone,swift,s3,ceph,prometheus\"\n+\n+    pyvers = \"py%s%s\" % sys.version_info[0:2]\n+\n+    if version is None:\n+        src = \".[%s]\" % extras\n+        from setuptools_scm import get_version\n+        version = get_version(root='..', relative_to=__file__)\n+    else:\n+        src = \"gnocchi==%s[%s]\" % (version, extras)\n+\n+    output = \"%s\/gnocchi-%s-%s-%s_%s\" % (path, version, pyvers,\n+                                         platform.system(),\n+                                         platform.machine())\n+    print(output)\n+\n+    cachedir = \"%s\/..\/..\/.pex\" % os.getenv(\"VIRTUAL_ENV\")\n+    cache = \"--cache-dir=%s\" % cachedir\n+\n+    # Ensure we don't reuse a already built wheel of Gnocchi\n+    if os.path.exists(\"gnocchi.egg-info\"):\n+        shutil.rmtree(\"gnocchi.egg-info\")\n+    if os.path.exists(cachedir):\n+        for name in os.listdir(cachedir):\n+            if name.startswith(\"gnocchi-\"):\n+                os.unlink(\"%s\/%s\" % (cachedir, name))\n+\n+    p = subprocess.Popen([\"pex\", src, \"-v\", cache,\n+                          \"-m\", \"gnocchi.pex:bootstrap\", \"-o\", output])\n+    if p.wait() != 0:\n+        raise Exception(\"Fail to generate binary\")\n+\n+    return output\n+\n+\n+if __name__ == \"__main__\":\n+    sys.exit(build())","changes":125},{"status":"added","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/5e08ac135f8437ec433edbf64f54c86c9997a111\/tools\/build_pex.sh","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/5e08ac135f8437ec433edbf64f54c86c9997a111\/tools\/build_pex.sh","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/tools\/build_pex.sh?ref=5e08ac135f8437ec433edbf64f54c86c9997a111","filename":"tools\/build_pex.sh","sha":"95be5c02eecc5274703fdeeaf423aad1f08d8de4","additions":24,"patch":"@@ -0,0 +1,24 @@\n+#!\/bin\/bash\n+\n+set -o pipefail\n+set -e\n+set -x\n+\n+rm -rf $CACHE_DIR\/gnocchi-* gnocchi.egg-info\n+\n+if [ \"$1\" == \"doc\" ]; then\n+    # NOTE(sileht): For binary generation pex need setuptools<34 for the doc\n+    # generation (but not for other feature that why it's not in its\n+    # requirements), so we downgrade it\n+    pip install -U \"setuptools>=30.3,<34\"\n+\n+    mkdir -p doc\/source\/dist\n+    pex $(pwd)[$EXTRAS] -v --cache-dir=$CACHE_DIR -m gnocchi.pex -o doc\/source\/dist\/$BINARY\n+    chmod +x doc\/source\/dist\/$BINARY\n+    sed -e \"s\/##BINARY##\/$BINARY\/g\" doc\/source\/install-pex.rst.tmpl > doc\/source\/install-pex.rst\n+\n+    # TODO(sileht): Generate a binary with the last tarball of pypi when pex\n+    # code land in a stable branch\n+else\n+    python -c \"from gnocchi import pex; pex.build_pex_binary('dist')\"\n+fi","changes":24},{"status":"modified","deletions":7,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/5e08ac135f8437ec433edbf64f54c86c9997a111\/tox.ini","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/5e08ac135f8437ec433edbf64f54c86c9997a111\/tox.ini","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/tox.ini?ref=5e08ac135f8437ec433edbf64f54c86c9997a111","filename":"tox.ini","sha":"79c579e80c95ec362a0ed8775b65c203d129db89","additions":33,"patch":"@@ -127,6 +127,20 @@ exclude = .tox,.eggs,doc,gnocchi\/rest\/prometheus\/remote_pb2.py\n show-source = true\n enable-extensions = H904\n \n+[testenv:py3-pex]\n+deps =\n+  pex[requests]\n+  # Otherwise it uses the one installed by \"virtualenv\"\n+  setuptools>=20.3,<34\n+  # To get the gnocchi version without installing it\n+  setuptools_scm\n+commands = python -m gnocchi.pex\n+# -c \"from gnocchi import pex; pex.build_pex_binary('dist')\"\n+\n+[testenv:py2-pex]\n+deps = {[testenv:py3-pex]deps}\n+commands = {[testenv:py3-pex]commands}\n+\n [testenv:docs]\n basepython = python3\n ## This does not work, see: https:\/\/github.com\/tox-dev\/tox\/issues\/509\n@@ -137,15 +151,21 @@ deps =\n     -e\n     .[test,file,postgresql,doc]\n     doc8\n+    # NOTE(sileht): these deps don't work if they are in extras\n+    pex[requests]\n+    # Otherwise it uses the one installed by \"virtualenv\"\n+    setuptools>=20.3,<34\n+    # To get the gnocchi version without installing it\n+    setuptools_scm\n setenv = GNOCCHI_TEST_DEBUG=1\n-commands = doc8 --ignore-path doc\/source\/rest.rst,doc\/source\/comparison-table.rst doc\/source\n-           pifpaf -g GNOCCHI_INDEXER_URL run postgresql -- python setup.py build_sphinx -W\n+commands =\n+    # doc8 --ignore-path doc\/source\/install-pex.rst,doc\/source\/rest.rst,doc\/source\/comparison-table.rst doc\/source\n+    pifpaf -g GNOCCHI_INDEXER_URL run postgresql -- python setup.py build_sphinx -W\n \n [testenv:docs-gnocchi.xyz]\n basepython = python2.7\n-whitelist_externals = bash rm\n-setenv = GNOCCHI_STORAGE_DEPS=file\n-         GNOCCHI_TEST_DEBUG=1\n+whitelist_externals = rm\n+setenv = GNOCCHI_TEST_DEBUG=1\n deps = {[testenv:docs]deps}\n        sphinxcontrib-versioning\n # for < 4.3 doc\n@@ -155,14 +175,20 @@ deps = {[testenv:docs]deps}\n # for <= 4.1 doc\n        pandas\n # for 3.x doc\n-       lz4>=0.9,<=0.13\n+       lz4\n        oslotest\n        oslosphinx\n        retrying\n+# NOTE(sileht): these deps don't work if they are in extras\n+      pex[requests]\n+# Otherwise it uses the one installed by \"virtualenv\"\n+      setuptools>=20.3,<34\n+# To get the gnocchi version without installing it\n+      setuptools_scm\n commands =\n     rm -rf doc\/build\/html\n     pifpaf -g GNOCCHI_INDEXER_URL run postgresql -- sphinx-versioning build doc\/source doc\/build\/html\n-    bash tools\/validate_docs.sh\n+    {toxinidir}\/tools\/validate_docs.sh\n \n [doc8]\n ignore-path = doc\/source\/rest.rst,doc\/source\/comparison-table.rst","changes":40}],"committer":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"stats":{"deletions":10,"additions":233,"total":243},"author":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/5e08ac135f8437ec433edbf64f54c86c9997a111","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/5e08ac135f8437ec433edbf64f54c86c9997a111\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/5e08ac135f8437ec433edbf64f54c86c9997a111","sha":"5e08ac135f8437ec433edbf64f54c86c9997a111","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/16aa1e52fb151461aebd5d9f167f711d3a2e2666","sha":"16aa1e52fb151461aebd5d9f167f711d3a2e2666","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/16aa1e52fb151461aebd5d9f167f711d3a2e2666"}],"commit":{"committer":{"date":"2018-03-21T09:12:05Z","name":"Mehdi Abaakouk","email":"sileht@sileht.net"},"author":{"date":"2018-03-14T15:52:40Z","name":"Mehdi Abaakouk","email":"sileht@redhat.com"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/5e08ac135f8437ec433edbf64f54c86c9997a111","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/f61d0ead20b8c1f8b946f75356dbfde7472767fb","sha":"f61d0ead20b8c1f8b946f75356dbfde7472767fb"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"allow to generate a pex executable\n\nHowto use:\n\n$ tox -epy35-pex\n$ dist\/gnocchi-4.2.1.dev69-py35-linux_x86_64 config-generator > gnocchi.conf\n$ dist\/gnocchi-4.2.1.dev69-py35-linux_x86_64 api --config-file gnocchi.conf"}}],"diff_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/817.diff","pastamaker_ci_statuses":{},"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/817","body":"allow to generate a pex executable\r\n\r\nHowto use:\r\n```\r\n    $ tox -epy35-pex\r\n    $ dist\/gnocchi-4.2.1.dev69-py35-linux_x86_64 config-generator > gnocchi.conf\r\n    $ dist\/gnocchi-4.2.1.dev69-py35-linux_x86_64 api --config-file gnocchi.conf\r\n\r\n```\r\n","head":{"repo":{"issues_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/issues{\/number}","deployments_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/deployments","has_wiki":true,"forks_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/forks","mirror_url":null,"subscription_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/subscription","notifications_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/notifications{?since,all,participating}","collaborators_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/collaborators{\/collaborator}","updated_at":"2017-05-23T14:32:13Z","private":false,"pulls_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/pulls{\/number}","owner":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"labels_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/labels{\/name}","full_name":"sileht\/gnocchi","issue_comment_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/issues\/comments{\/number}","statuses_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/statuses\/{sha}","id":92182973,"keys_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/keys{\/key_id}","size":4602,"tags_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/tags","archived":false,"contributors_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/contributors","downloads_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/downloads","assignees_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/assignees{\/user}","contents_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/contents\/{+path}","description":"Timeseries database","git_refs_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/git\/refs{\/sha}","has_projects":true,"clone_url":"https:\/\/github.com\/sileht\/gnocchi.git","watchers_count":0,"git_tags_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/git\/tags{\/sha}","milestones_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/milestones{\/number}","license":null,"stargazers_count":0,"homepage":null,"fork":true,"commits_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/commits{\/sha}","releases_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/releases{\/id}","issue_events_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/issues\/events{\/number}","has_downloads":true,"has_pages":false,"events_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/events","comments_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/comments{\/number}","html_url":"https:\/\/github.com\/sileht\/gnocchi","compare_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/compare\/{base}...{head}","open_issues":0,"git_commits_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/git\/commits{\/sha}","git_url":"git:\/\/github.com\/sileht\/gnocchi.git","svn_url":"https:\/\/github.com\/sileht\/gnocchi","merges_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/merges","has_issues":false,"ssh_url":"git@github.com:sileht\/gnocchi.git","blobs_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/git\/blobs{\/sha}","forks":0,"hooks_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/hooks","open_issues_count":0,"watchers":0,"name":"gnocchi","language":"Python","url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi","created_at":"2017-05-23T14:32:11Z","archive_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/{archive_format}{\/ref}","pushed_at":"2018-03-21T10:56:50Z","forks_count":0,"default_branch":"master","teams_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/teams","trees_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/git\/trees{\/sha}","languages_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/languages","branches_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/branches{\/branch}","subscribers_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/subscribers","stargazers_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/stargazers"},"sha":"5e08ac135f8437ec433edbf64f54c86c9997a111","ref":"sileht\/pex","user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"label":"sileht:sileht\/pex"},"pastamaker_weight":-1,"commits":1,"author_association":"OWNER","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/817\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/817","pastamaker_travis_url":"https:\/\/travis-ci.org\/gnocchixyz\/gnocchi\/builds\/356253427?utm_source=github_status&utm_medium=notification","updated_at":"2018-03-21T09:29:51Z","pastamaker_approved":false,"base":{"repo":{"issues_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues{\/number}","deployments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/deployments","has_wiki":false,"forks_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/forks","mirror_url":null,"subscription_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/subscription","notifications_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/notifications{?since,all,participating}","collaborators_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/collaborators{\/collaborator}","updated_at":"2018-03-21T10:51:57Z","private":false,"pulls_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls{\/number}","owner":{"following_url":"https:\/\/api.github.com\/users\/gnocchixyz\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/gnocchixyz\/orgs","url":"https:\/\/api.github.com\/users\/gnocchixyz","gists_url":"https:\/\/api.github.com\/users\/gnocchixyz\/gists{\/gist_id}","html_url":"https:\/\/github.com\/gnocchixyz","subscriptions_url":"https:\/\/api.github.com\/users\/gnocchixyz\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/26142905?v=4","repos_url":"https:\/\/api.github.com\/users\/gnocchixyz\/repos","received_events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/gnocchixyz\/starred{\/owner}{\/repo}","site_admin":false,"login":"gnocchixyz","type":"Organization","id":26142905,"followers_url":"https:\/\/api.github.com\/users\/gnocchixyz\/followers"},"labels_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/labels{\/name}","full_name":"gnocchixyz\/gnocchi","issue_comment_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments{\/number}","statuses_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/statuses\/{sha}","id":91715647,"keys_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/keys{\/key_id}","size":4922,"tags_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/tags","archived":false,"contributors_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contributors","downloads_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/downloads","assignees_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/assignees{\/user}","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/{+path}","description":"Timeseries database","git_refs_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/refs{\/sha}","has_projects":false,"clone_url":"https:\/\/github.com\/gnocchixyz\/gnocchi.git","watchers_count":133,"git_tags_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/tags{\/sha}","milestones_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/milestones{\/number}","license":{"spdx_id":"Apache-2.0","url":"https:\/\/api.github.com\/licenses\/apache-2.0","name":"Apache License 2.0","key":"apache-2.0"},"stargazers_count":133,"homepage":null,"fork":false,"commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits{\/sha}","releases_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/releases{\/id}","issue_events_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/events{\/number}","has_downloads":true,"has_pages":false,"events_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/events","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/comments{\/number}","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi","compare_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/compare\/{base}...{head}","open_issues":50,"git_commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits{\/sha}","git_url":"git:\/\/github.com\/gnocchixyz\/gnocchi.git","svn_url":"https:\/\/github.com\/gnocchixyz\/gnocchi","merges_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/merges","has_issues":true,"ssh_url":"git@github.com:gnocchixyz\/gnocchi.git","blobs_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/blobs{\/sha}","forks":30,"hooks_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/hooks","open_issues_count":50,"watchers":133,"name":"gnocchi","language":"Python","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi","created_at":"2017-05-18T16:32:52Z","archive_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/{archive_format}{\/ref}","pushed_at":"2018-03-21T10:56:51Z","forks_count":30,"default_branch":"master","teams_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/teams","trees_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees{\/sha}","languages_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/languages","branches_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/branches{\/branch}","subscribers_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/subscribers","stargazers_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/stargazers"},"sha":"16aa1e52fb151461aebd5d9f167f711d3a2e2666","ref":"master","user":{"following_url":"https:\/\/api.github.com\/users\/gnocchixyz\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/gnocchixyz\/orgs","url":"https:\/\/api.github.com\/users\/gnocchixyz","gists_url":"https:\/\/api.github.com\/users\/gnocchixyz\/gists{\/gist_id}","html_url":"https:\/\/github.com\/gnocchixyz","subscriptions_url":"https:\/\/api.github.com\/users\/gnocchixyz\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/26142905?v=4","repos_url":"https:\/\/api.github.com\/users\/gnocchixyz\/repos","received_events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/gnocchixyz\/starred{\/owner}{\/repo}","site_admin":false,"login":"gnocchixyz","type":"Organization","id":26142905,"followers_url":"https:\/\/api.github.com\/users\/gnocchixyz\/followers"},"label":"gnocchixyz:master"},"rebaseable":true,"milestone":null,"pastamaker_travis_detail":{"commit_id":106135774,"repository_id":13523406,"jobs":[{"build_id":356253427,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/356253428\/log","number":"2528.1","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":106135774,"finished_at":"2018-03-21T10:09:29Z","started_at":"2018-03-21T10:07:42Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=pep8"},"id":356253428},{"build_id":356253427,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/356253429\/log","number":"2528.2","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":106135774,"finished_at":"2018-03-21T10:20:01Z","started_at":"2018-03-21T10:09:58Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=docs"},"id":356253429},{"build_id":356253427,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/356253430\/log","number":"2528.3","allow_failure":false,"queue":"builds.gce","state":"failed","commit_id":106135774,"finished_at":"2018-03-21T10:24:48Z","started_at":"2018-03-21T10:14:30Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=docs-gnocchi.xyz"},"id":356253430},{"build_id":356253427,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/356253431\/log","number":"2528.4","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":106135774,"finished_at":"2018-03-21T10:26:14Z","started_at":"2018-03-21T10:21:44Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-mysql-ceph-upgrade-from-4.0"},"id":356253431},{"build_id":356253427,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/356253432\/log","number":"2528.5","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":106135774,"finished_at":"2018-03-21T10:26:15Z","started_at":"2018-03-21T10:21:24Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-postgresql-file-upgrade-from-4.0"},"id":356253432},{"build_id":356253427,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/356253433\/log","number":"2528.6","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":106135774,"finished_at":"2018-03-21T10:26:35Z","started_at":"2018-03-21T10:21:43Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-mysql-ceph-upgrade-from-4.1"},"id":356253433},{"build_id":356253427,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/356253435\/log","number":"2528.7","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":106135774,"finished_at":"2018-03-21T10:30:11Z","started_at":"2018-03-21T10:25:30Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-postgresql-file-upgrade-from-4.1"},"id":356253435},{"build_id":356253427,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/356253437\/log","number":"2528.8","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":106135774,"finished_at":"2018-03-21T10:31:34Z","started_at":"2018-03-21T10:26:59Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-mysql-ceph-upgrade-from-4.2"},"id":356253437},{"build_id":356253427,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/356253438\/log","number":"2528.9","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":106135774,"finished_at":"2018-03-21T10:31:18Z","started_at":"2018-03-21T10:27:00Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-postgresql-file-upgrade-from-4.2"},"id":356253438},{"build_id":356253427,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/356253439\/log","number":"2528.10","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":106135774,"finished_at":"2018-03-21T11:01:12Z","started_at":"2018-03-21T10:27:04Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-mysql"},"id":356253439},{"build_id":356253427,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/356253440\/log","number":"2528.11","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":106135774,"finished_at":"2018-03-21T11:00:31Z","started_at":"2018-03-21T10:30:58Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-mysql"},"id":356253440},{"build_id":356253427,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/356253441\/log","number":"2528.12","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":106135774,"finished_at":"2018-03-21T11:01:48Z","started_at":"2018-03-21T10:31:48Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-postgresql"},"id":356253441},{"build_id":356253427,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/356253443\/log","number":"2528.13","allow_failure":false,"queue":"builds.gce","state":"failed","commit_id":106135774,"finished_at":"2018-03-21T11:02:14Z","started_at":"2018-03-21T10:32:08Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-postgresql"},"id":356253443}],"event_type":"pull_request","finished_at":"2018-03-21T11:02:14Z","number":"2528","job_ids":[356253428,356253429,356253430,356253431,356253432,356253433,356253435,356253437,356253438,356253439,356253440,356253441,356253443],"state":"failed","pull_request_title":"allow to generate a pex executable","pull_request":true,"duration":10422,"started_at":"2018-03-21T10:07:42Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","os":"linux","deploy":{"distributions":"sdist bdist_wheel","password":{"secure":"c+Ccx3SHCWepiy0PUxDJ7XO9r3aNYnHjkzxF5c\/kjV8QaCJayAJEgXJnBKhvjroqwgn7JPUgpD6QdSWdB4FqjbZYQ3I3oHOO1YL0vYYa8wHG5HuMsMp4J8qvzgs3QNQDECPI1mXsPevn3VMfGszUN+6BQrHB3FbZsTtOmE+Kmgok5NCT+obsfEhVea\/UOD0XFUkVW9VJhPjQ2ytvYvFIc46\/73GQf2Er\/5DCa\/4GGDEBSD++bDJgp3kQj438xslCAFeZWDwGsa+cTc43PI0Y0+E144ySVY7QyVbZ1B66a1BGWVrXJuM+gW\/eIBCMN1FJXmD7CDdPa22azKI8dfMF7qaH3Oiv3cVovPWpubOvhTUHUFwG8+W7Fx+zUKktCWiLer\/fZvEd3W8tcgby2kNOdcUfKfDB2ImZJ+P694\/OJ4jJ8T5TQerruNoP2OstzcBMon77Ry0XawXR15SZd4JhbqhSi+h7XV6EYmct1UN4zoysA7fx\/cWHcBxdnm2G6R0gzmOiiGUd74ptU8lZ3IlEP6EZckK\/OZOdy1I8EQeUe7aiTooXZDAn07iPkDZliYRr2e36ij\/xjtWCe1AjCksn\/xdKfHOKJv5UVob495DU2GuNObe01ewXzexcnldjfp9Sb8SVEFuhHx6IvH5OC+vAq+BVYu2jwvMcVfXi3VSOkB4="},"true":{"all_branches":true,"tags":true},"user":"jd","provider":"pypi"},"env":["TARGET=pep8","TARGET=docs","TARGET=docs-gnocchi.xyz","TARGET=py27-mysql-ceph-upgrade-from-4.0","TARGET=py35-postgresql-file-upgrade-from-4.0","TARGET=py27-mysql-ceph-upgrade-from-4.1","TARGET=py35-postgresql-file-upgrade-from-4.1","TARGET=py27-mysql-ceph-upgrade-from-4.2","TARGET=py35-postgresql-file-upgrade-from-4.2","TARGET=py27-mysql","TARGET=py35-mysql","TARGET=py27-postgresql","TARGET=py35-postgresql"]},"id":356253427,"pull_request_number":817,"resume_state":"failure"},"requested_teams":[],"locked":false,"merged_by":null,"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/817","mergeable_state":"behind","created_at":"2018-03-14T15:53:29Z","merged":false,"review_comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/817\/comments","review_comments":16,"assignees":[],"review_comment_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/comments{\/number}","pastamaker_comments":[],"pastamaker_approvals":[[{"public_repos":70,"site_admin":false,"subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","gravatar_id":"","hireable":null,"id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers","following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","blog":"https:\/\/julien.danjou.info\/","followers":315,"location":"Paris, France","type":"User","email":"julien@danjou.info","bio":"Free Software Hacker, runner, foodie and FPS player.","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","company":null,"events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","updated_at":"2018-03-09T14:25:09Z","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","public_gists":20,"name":"Julien Danjou","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","created_at":"2008-03-09T19:52:38Z","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","following":23,"login":"jd"}],[],2,[0]],"patch_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/817.patch","changed_files":8,"user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"}},{"deletions":625,"pastamaker_combined_status":"failure","merge_commit_sha":"99fe11b6c8c1322cde235c0e5da9bba599b13ebf","additions":895,"labels":[],"number":746,"pastamaker_travis_state":"error","assignee":null,"commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/746\/commits","mergeable":true,"closed_at":null,"requested_reviewers":[],"statuses_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/statuses\/5c2c673df012d5a7ebb8d33eac02dba2fb8989a7","id":169437195,"maintainer_can_modify":true,"title":"[DNM] Pull request for megabatch","comments":17,"merged_at":null,"state":"open","_links":{"review_comment":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/comments{\/number}"},"commits":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/746\/commits"},"self":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/746"},"comments":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/746\/comments"},"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/746"},"review_comments":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/746\/comments"},"issue":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/746"},"statuses":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/statuses\/5c2c673df012d5a7ebb8d33eac02dba2fb8989a7"}},"pastamaker_reviews":[],"pastamaker_commits":[{"files":[{"status":"modified","deletions":6,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/06514c8307d8955364525fbb7db7f4161679c559\/gnocchi\/chef.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/06514c8307d8955364525fbb7db7f4161679c559\/gnocchi\/chef.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/chef.py?ref=06514c8307d8955364525fbb7db7f4161679c559","filename":"gnocchi\/chef.py","sha":"65ac572a499a578763d5ee0ce2a743b663c2ff6d","additions":15,"patch":"@@ -29,8 +29,11 @@\n LOG = daiquiri.getLogger(__name__)\n \n \n-class SackLockTimeoutError(Exception):\n-        pass\n+class SackAlreadyLocked(Exception):\n+    def __init__(self, sack):\n+        self.sack = sack\n+        super(SackAlreadyLocked, self).__init__(\n+            \"Sack %s already locked\" % sack)\n \n \n class Chef(object):\n@@ -103,9 +106,7 @@ def refresh_metric(self, metric, timeout):\n         s = self.incoming.sack_for_metric(metric.id)\n         lock = self.get_sack_lock(s)\n         if not lock.acquire(blocking=timeout):\n-            raise SackLockTimeoutError(\n-                'Unable to refresh metric: %s. Metric is locked. '\n-                'Please try again.' % metric.id)\n+            raise SackAlreadyLocked(s)\n         try:\n             self.process_new_measures([str(metric.id)])\n         finally:\n@@ -140,11 +141,17 @@ def process_new_measures(self, metrics_to_process, sync=False):\n     def process_new_measures_for_sack(self, sack, sync=False):\n         \"\"\"Process added measures in background.\n \n+        Lock a sack and try to process measures from it. If the sack cannot be\n+        locked, the method will raise `SackAlreadyLocked`.\n+\n         :param sack: The sack to process new measures for.\n         :param sync: If True, raise any issue immediately otherwise just log it\n         :return: The number of metrics processed.\n+\n         \"\"\"\n-        # NOTE(gordc): must lock at sack level\n+        lock = self.get_sack_lock(sack)\n+        if not lock.acquire(blocking=False):\n+            raise SackAlreadyLocked(sack)\n         LOG.debug(\"Processing measures for sack %s\", sack)\n         try:\n             with self.incoming.process_measures_for_sack(sack) as measures:\n@@ -165,6 +172,8 @@ def process_new_measures_for_sack(self, sack, sync=False):\n                 raise\n             LOG.error(\"Error processing new measures\", exc_info=True)\n             return 0\n+        finally:\n+            lock.release()\n \n     def get_sack_lock(self, sack):\n         # FIXME(jd) Some tooz drivers have a limitation on lock name length","changes":21},{"status":"modified","deletions":9,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/06514c8307d8955364525fbb7db7f4161679c559\/gnocchi\/cli\/metricd.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/06514c8307d8955364525fbb7db7f4161679c559\/gnocchi\/cli\/metricd.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/cli\/metricd.py?ref=06514c8307d8955364525fbb7db7f4161679c559","filename":"gnocchi\/cli\/metricd.py","sha":"6e1155daefd039c0c33a61bad393b3ab99918e18","additions":4,"patch":"@@ -230,22 +230,17 @@ def _run_job(self):\n             sacks = (self.sacks_with_measures_to_process.copy()\n                      or self._get_sacks_to_process())\n         for s in sacks:\n-            # TODO(gordc): support delay release lock so we don't\n-            # process a sack right after another process\n-            lock = self.chef.get_sack_lock(s)\n-            if not lock.acquire(blocking=False):\n-                continue\n-\n             try:\n-                m_count += self.chef.process_new_measures_for_sack(s)\n+                try:\n+                    m_count += self.chef.process_new_measures_for_sack(s)\n+                except chef.SackAlreadyLocked:\n+                    continue\n                 s_count += 1\n                 self.incoming.finish_sack_processing(s)\n                 self.sacks_with_measures_to_process.discard(s)\n             except Exception:\n                 LOG.error(\"Unexpected error processing assigned job\",\n                           exc_info=True)\n-            finally:\n-                lock.release()\n         LOG.debug(\"%d metrics processed from %d sacks\", m_count, s_count)\n         if sacks == self._get_sacks_to_process():\n             # We just did a full scan of all sacks, reset the timer","changes":13},{"status":"modified","deletions":3,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/06514c8307d8955364525fbb7db7f4161679c559\/gnocchi\/rest\/api.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/06514c8307d8955364525fbb7db7f4161679c559\/gnocchi\/rest\/api.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/rest\/api.py?ref=06514c8307d8955364525fbb7db7f4161679c559","filename":"gnocchi\/rest\/api.py","sha":"e234edf3b5584dab338c296f9676ddbaac24efbe","additions":6,"patch":"@@ -532,8 +532,9 @@ def get_measures(self, start=None, stop=None, aggregation='mean',\n                 pecan.request.chef.refresh_metric(\n                     self.metric,\n                     pecan.request.conf.api.operation_timeout)\n-            except chef.SackLockTimeoutError as e:\n-                abort(503, six.text_type(e))\n+            except chef.SackAlreadyLocked as e:\n+                abort(503, 'Unable to refresh metric: %s. Metric is locked. '\n+                      'Please try again.' % self.metric.id)\n         try:\n             return pecan.request.storage.get_measures(\n                 self.metric, aggregations, start, stop, resample)[aggregation]\n@@ -1904,7 +1905,9 @@ def get_cross_metric_measures_from_objs(metrics, start=None, stop=None,\n                         pecan.request.chef.refresh_metric(\n                             m, pecan.request.conf.api.operation_timeout)\n                     except chef.SackLockTimeoutError as e:\n-                        abort(503, six.text_type(e))\n+                        abort(503, 'Unable to refresh metric: %s. '\n+                              'Metric is locked. '\n+                              'Please try again.' % m.id)\n             if number_of_metrics == 1:\n                 # NOTE(sileht): don't do the aggregation if we only have one\n                 # metric","changes":9}],"committer":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"stats":{"deletions":18,"additions":25,"total":43},"author":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/06514c8307d8955364525fbb7db7f4161679c559","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/06514c8307d8955364525fbb7db7f4161679c559\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/06514c8307d8955364525fbb7db7f4161679c559","sha":"06514c8307d8955364525fbb7db7f4161679c559","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/ea9531da7387fb38d72bc863134ca0ce863f8375","sha":"ea9531da7387fb38d72bc863134ca0ce863f8375","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/ea9531da7387fb38d72bc863134ca0ce863f8375"}],"commit":{"committer":{"date":"2018-03-16T14:25:21Z","name":"Julien Danjou","email":"julien@danjou.info"},"author":{"date":"2018-03-03T17:55:34Z","name":"Julien Danjou","email":"julien@danjou.info"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/06514c8307d8955364525fbb7db7f4161679c559","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/7f41ab0cac79ef78ab1cd5d2bad93e15cd9929c2","sha":"7f41ab0cac79ef78ab1cd5d2bad93e15cd9929c2"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"chef: lock sack when using process_new_measures_for_sack\n\nThis makes it safer to call it without taking care of the lock externally."}},{"files":[{"status":"modified","deletions":10,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/ff8e9989ea755f909a07cff91ec81ee3110fdb08\/gnocchi\/chef.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/ff8e9989ea755f909a07cff91ec81ee3110fdb08\/gnocchi\/chef.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/chef.py?ref=ff8e9989ea755f909a07cff91ec81ee3110fdb08","filename":"gnocchi\/chef.py","sha":"359223d98511aa0f74da43f411173a3c156fcea9","additions":13,"patch":"@@ -128,11 +128,13 @@ def process_new_measures(self, metrics_to_process, sync=False):\n             LOG.debug(\"Processing measures for %s\", metrics)\n             with self.incoming.process_measure_for_metrics(\n                     [m.id for m in metrics]) as metrics_and_measures:\n-                for metric, measures in six.iteritems(metrics_and_measures):\n-                    self.storage.compute_and_store_timeseries(\n-                        metrics_by_id[metric], measures\n-                    )\n-                    LOG.debug(\"Measures for metric %s processed\", metrics)\n+                    self.storage.add_measures_to_metrics({\n+                        metrics_by_id[metric]: measures\n+                        for metric, measures\n+                        in six.iteritems(metrics_and_measures)\n+                    })\n+                    LOG.debug(\"Measures for %d metrics processed\",\n+                              len(metrics))\n         except Exception:\n             if sync:\n                 raise\n@@ -161,11 +163,12 @@ def process_new_measures_for_sack(self, sack, sync=False):\n                     attribute_filter={\n                         \"in\": {\"id\": measures.keys()}\n                     })\n-                for metric in metrics:\n-                    self.storage.compute_and_store_timeseries(\n-                        metric, measures[metric.id]\n-                    )\n-                    LOG.debug(\"Measures for metric %s processed\", metric)\n+                self.storage.add_measures_to_metrics({\n+                    metric: measures[metric.id]\n+                    for metric in metrics\n+                })\n+                LOG.debug(\"Measures for %d metrics processed\",\n+                          len(metrics))\n                 return len(measures)\n         except Exception:\n             if sync:","changes":23},{"status":"modified","deletions":107,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/ff8e9989ea755f909a07cff91ec81ee3110fdb08\/gnocchi\/storage\/__init__.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/ff8e9989ea755f909a07cff91ec81ee3110fdb08\/gnocchi\/storage\/__init__.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/__init__.py?ref=ff8e9989ea755f909a07cff91ec81ee3110fdb08","filename":"gnocchi\/storage\/__init__.py","sha":"be7237ed14dd94c56137d4103c04e6610755a3b8","additions":116,"patch":"@@ -487,120 +487,129 @@ def _delete_metric_splits(self, metric, keys_and_aggregations, version=3):\n             ((metric, key, aggregation)\n              for key, aggregation in keys_and_aggregations))\n \n-    def compute_and_store_timeseries(self, metric, measures):\n-        # NOTE(mnaser): The metric could have been handled by\n-        #               another worker, ignore if no measures.\n-        if len(measures) == 0:\n-            LOG.debug(\"Skipping %s (already processed)\", metric)\n-            return\n-\n-        measures = numpy.sort(measures, order='timestamps')\n-\n-        agg_methods = list(metric.archive_policy.aggregation_methods)\n-        block_size = metric.archive_policy.max_block_size\n-        back_window = metric.archive_policy.back_window\n-        definition = metric.archive_policy.definition\n-        # NOTE(sileht): We keep one more blocks to calculate rate of change\n-        # correctly\n-        if any(filter(lambda x: x.startswith(\"rate:\"), agg_methods)):\n-            back_window += 1\n+    def add_measures_to_metrics(self, metrics_and_measures):\n+        \"\"\"Update a metric with a new measures, computing new aggregations.\n \n+        :param metrics_and_measures: A dict there keys are `storage.Metric`\n+                                     objects and values are timeseries array of\n+                                     the new measures.\n+        \"\"\"\n         with utils.StopWatch() as sw:\n-            raw_measures = (\n-                self._get_or_create_unaggregated_timeseries(\n-                    [metric])[metric]\n-            )\n-        LOG.debug(\"Retrieve unaggregated measures for %s in %.2fs\",\n-                  metric.id, sw.elapsed())\n+            raw_measures = self._get_or_create_unaggregated_timeseries(\n+                metrics_and_measures.keys())\n+        LOG.debug(\"Retrieve unaggregated measures for %d metric in %.2fs\",\n+                  len(metrics_and_measures), sw.elapsed())\n \n-        if raw_measures is None:\n-            ts = None\n-        else:\n-            try:\n-                ts = carbonara.BoundTimeSerie.unserialize(\n-                    raw_measures, block_size, back_window)\n-            except carbonara.InvalidData:\n-                LOG.error(\"Data corruption detected for %s \"\n-                          \"unaggregated timeserie, creating a new one\",\n-                          metric.id)\n-                ts = None\n+        new_boundts = []\n \n-        if ts is None:\n-            # This is the first time we treat measures for this\n-            # metric, or data are corrupted, create a new one\n-            ts = carbonara.BoundTimeSerie(block_size=block_size,\n-                                          back_window=back_window)\n-            current_first_block_timestamp = None\n-        else:\n-            current_first_block_timestamp = ts.first_block_timestamp()\n-\n-        # NOTE(jd) This is Python where you need such\n-        # hack to pass a variable around a closure,\n-        # sorry.\n-        computed_points = {\"number\": 0}\n-\n-        def _map_compute_splits_operations(bound_timeserie):\n-            # NOTE (gordc): bound_timeserie is entire set of\n-            # unaggregated measures matching largest\n-            # granularity. the following takes only the points\n-            # affected by new measures for specific granularity\n-            tstamp = max(bound_timeserie.first, measures['timestamps'][0])\n-            new_first_block_timestamp = bound_timeserie.first_block_timestamp()\n-            computed_points['number'] = len(bound_timeserie)\n-\n-            aggregations = metric.archive_policy.aggregations\n-\n-            grouped_timeseries = {\n-                granularity: bound_timeserie.group_serie(\n-                    granularity,\n-                    carbonara.round_timestamp(tstamp, granularity))\n-                for granularity, aggregations\n-                # No need to sort the aggregation, they are already\n-                in itertools.groupby(aggregations, ATTRGETTER_GRANULARITY)\n-            }\n-\n-            aggregations_and_timeseries = {\n-                aggregation: carbonara.AggregatedTimeSerie.from_grouped_serie(\n-                    grouped_timeseries[aggregation.granularity], aggregation)\n-                for aggregation in aggregations\n-            }\n-\n-            deleted_keys, keys_and_split_to_store = (\n-                self._compute_split_operations(\n-                    metric, aggregations_and_timeseries,\n-                    current_first_block_timestamp,\n-                    new_first_block_timestamp)\n-            )\n+        for metric, measures in six.iteritems(metrics_and_measures):\n+            if len(measures) == 0:\n+                continue\n \n-            return (new_first_block_timestamp,\n-                    deleted_keys,\n-                    keys_and_split_to_store)\n+            measures = numpy.sort(measures, order='timestamps')\n \n-        with utils.StopWatch() as sw:\n-            (new_first_block_timestamp,\n-             deleted_keys,\n-             keys_and_splits_to_store) = ts.set_values(\n-                 measures,\n-                 before_truncate_callback=_map_compute_splits_operations,\n-            )\n-            self._delete_metric_splits(metric, deleted_keys)\n-            self._store_timeserie_splits(metric, keys_and_splits_to_store,\n-                                         new_first_block_timestamp)\n-\n-        number_of_operations = (len(agg_methods) * len(definition))\n-        perf = \"\"\n-        elapsed = sw.elapsed()\n-        if elapsed > 0:\n-            perf = \" (%d points\/s, %d measures\/s)\" % (\n-                ((number_of_operations * computed_points['number']) \/\n-                    elapsed),\n-                ((number_of_operations * len(measures)) \/ elapsed)\n-            )\n-        LOG.debug(\"Computed new metric %s with %d new measures \"\n-                  \"in %.2f seconds%s\",\n-                  metric.id, len(measures), elapsed, perf)\n+            agg_methods = list(metric.archive_policy.aggregation_methods)\n+            block_size = metric.archive_policy.max_block_size\n+            back_window = metric.archive_policy.back_window\n+            definition = metric.archive_policy.definition\n+            # NOTE(sileht): We keep one more blocks to calculate rate of change\n+            # correctly\n+            if any(filter(lambda x: x.startswith(\"rate:\"), agg_methods)):\n+                back_window += 1\n \n-        self._store_unaggregated_timeseries([(metric, ts.serialize())])\n+            if raw_measures[metric] is None:\n+                ts = None\n+            else:\n+                try:\n+                    ts = carbonara.BoundTimeSerie.unserialize(\n+                        raw_measures[metric], block_size, back_window)\n+                except carbonara.InvalidData:\n+                    LOG.error(\"Data corruption detected for %s \"\n+                              \"unaggregated timeserie, creating a new one\",\n+                              metric.id)\n+                    ts = None\n+\n+            if ts is None:\n+                # This is the first time we treat measures for this\n+                # metric, or data are corrupted, create a new one\n+                ts = carbonara.BoundTimeSerie(block_size=block_size,\n+                                              back_window=back_window)\n+                current_first_block_timestamp = None\n+            else:\n+                current_first_block_timestamp = ts.first_block_timestamp()\n+\n+            # NOTE(jd) This is Python where you need such\n+            # hack to pass a variable around a closure,\n+            # sorry.\n+            computed_points = {\"number\": 0}\n+\n+            def _map_compute_splits_operations(bound_timeserie):\n+                # NOTE (gordc): bound_timeserie is entire set of\n+                # unaggregated measures matching largest\n+                # granularity. the following takes only the points\n+                # affected by new measures for specific granularity\n+                tstamp = max(bound_timeserie.first, measures['timestamps'][0])\n+                new_first_block_timestamp = (\n+                    bound_timeserie.first_block_timestamp()\n+                )\n+                computed_points['number'] = len(bound_timeserie)\n+\n+                aggregations = metric.archive_policy.aggregations\n+\n+                grouped_timeseries = {\n+                    granularity: bound_timeserie.group_serie(\n+                        granularity,\n+                        carbonara.round_timestamp(tstamp, granularity))\n+                    for granularity, aggregations\n+                    # No need to sort the aggregation, they are already\n+                    in itertools.groupby(aggregations, ATTRGETTER_GRANULARITY)\n+                }\n+\n+                aggregations_and_timeseries = {\n+                    aggregation:\n+                    carbonara.AggregatedTimeSerie.from_grouped_serie(\n+                        grouped_timeseries[aggregation.granularity],\n+                        aggregation)\n+                    for aggregation in aggregations\n+                }\n+\n+                deleted_keys, keys_and_split_to_store = (\n+                    self._compute_split_operations(\n+                        metric, aggregations_and_timeseries,\n+                        current_first_block_timestamp,\n+                        new_first_block_timestamp)\n+                )\n+\n+                return (new_first_block_timestamp,\n+                        deleted_keys,\n+                        keys_and_split_to_store)\n+\n+            with utils.StopWatch() as sw:\n+                (new_first_block_timestamp,\n+                 deleted_keys,\n+                 keys_and_splits_to_store) = ts.set_values(\n+                     measures,\n+                     before_truncate_callback=_map_compute_splits_operations)\n+                self._delete_metric_splits(metric, deleted_keys)\n+                self._store_timeserie_splits(metric, keys_and_splits_to_store,\n+                                             new_first_block_timestamp)\n+\n+            new_boundts.append((metric, ts.serialize()))\n+\n+            number_of_operations = (len(agg_methods) * len(definition))\n+            perf = \"\"\n+            elapsed = sw.elapsed()\n+            if elapsed > 0:\n+                perf = \" (%d points\/s, %d measures\/s)\" % (\n+                    ((number_of_operations * computed_points['number']) \/\n+                        elapsed),\n+                    ((number_of_operations * len(measures)) \/ elapsed)\n+                )\n+            LOG.debug(\"Computed new metric %s with %d new measures \"\n+                      \"in %.2f seconds%s\",\n+                      metric.id, len(measures), elapsed, perf)\n+\n+        self._store_unaggregated_timeseries(new_boundts)\n \n     def find_measure(self, metric, predicate, granularity, aggregation=\"mean\",\n                      from_timestamp=None, to_timestamp=None):","changes":223}],"committer":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"stats":{"deletions":117,"additions":129,"total":246},"author":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/ff8e9989ea755f909a07cff91ec81ee3110fdb08","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/ff8e9989ea755f909a07cff91ec81ee3110fdb08\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/ff8e9989ea755f909a07cff91ec81ee3110fdb08","sha":"ff8e9989ea755f909a07cff91ec81ee3110fdb08","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/06514c8307d8955364525fbb7db7f4161679c559","sha":"06514c8307d8955364525fbb7db7f4161679c559","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/06514c8307d8955364525fbb7db7f4161679c559"}],"commit":{"committer":{"date":"2018-03-16T14:25:21Z","name":"Julien Danjou","email":"julien@danjou.info"},"author":{"date":"2018-03-05T15:11:13Z","name":"Julien Danjou","email":"julien@danjou.info"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/ff8e9989ea755f909a07cff91ec81ee3110fdb08","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/5b26c59a1514f1c07c0dadd24976e538e4d1b608","sha":"5b26c59a1514f1c07c0dadd24976e538e4d1b608"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"chef\/storage: process all metrics from the sack in one single batch\n\nThis allows in this first step to retrieve and store the unaggregated\ntimeseries all at once."}},{"files":[{"status":"modified","deletions":2,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/963cb15a6ba3e64a392f6d1b06a89338ad707755\/gnocchi\/storage\/__init__.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/963cb15a6ba3e64a392f6d1b06a89338ad707755\/gnocchi\/storage\/__init__.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/__init__.py?ref=963cb15a6ba3e64a392f6d1b06a89338ad707755","filename":"gnocchi\/storage\/__init__.py","sha":"8b4d12fc335586d7bd658a79c6a9c5694dbc467a","additions":10,"patch":"@@ -481,10 +481,18 @@ def _delete_metric(metric):\n     def _delete_metric_splits_unbatched(metric, keys, aggregation, version=3):\n         raise NotImplementedError\n \n-    def _delete_metric_splits(self, metric, keys_and_aggregations, version=3):\n+    def _delete_metric_splits(self, metrics_keys_aggregations, version=3):\n+        \"\"\"Delete splits of metrics.\n+\n+        :param metrics_keys_aggregations: A dict where keys are\n+                                         `storage.Metric` and values are lists\n+                                         of (key, aggregation) tuples.\n+        \"\"\"\n         utils.parallel_map(\n             utils.return_none_on_failure(self._delete_metric_splits_unbatched),\n             ((metric, key, aggregation)\n+             for metric, keys_and_aggregations\n+             in six.iteritems(metrics_keys_aggregations)\n              for key, aggregation in keys_and_aggregations))\n \n     def add_measures_to_metrics(self, metrics_and_measures):\n@@ -590,7 +598,7 @@ def _map_compute_splits_operations(bound_timeserie):\n                  keys_and_splits_to_store) = ts.set_values(\n                      measures,\n                      before_truncate_callback=_map_compute_splits_operations)\n-                self._delete_metric_splits(metric, deleted_keys)\n+                self._delete_metric_splits({metric: deleted_keys})\n                 self._store_timeserie_splits(metric, keys_and_splits_to_store,\n                                              new_first_block_timestamp)\n ","changes":12},{"status":"modified","deletions":16,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/963cb15a6ba3e64a392f6d1b06a89338ad707755\/gnocchi\/storage\/ceph.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/963cb15a6ba3e64a392f6d1b06a89338ad707755\/gnocchi\/storage\/ceph.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/ceph.py?ref=963cb15a6ba3e64a392f6d1b06a89338ad707755","filename":"gnocchi\/storage\/ceph.py","sha":"ed4e860135472cc47e0abd7c9f0f28dfa087b37c","additions":20,"patch":"@@ -94,23 +94,27 @@ def _store_metric_splits(self, metric, keys_aggregations_data_offset,\n             self.ioctx.operate_write_op(\n                 op, self._build_unaggregated_timeserie_path(metric, 3))\n \n-    def _delete_metric_splits(self, metric, keys_and_aggregations, version=3):\n-        names = tuple(\n-            self._get_object_name(metric, key, aggregation.method, version)\n-            for key, aggregation in keys_and_aggregations\n-        )\n+    def _delete_metric_splits(self, metric, metrics_keys_aggregations,\n+                              version=3):\n         with rados.WriteOpCtx() as op:\n-            for name in names:\n-                try:\n-                    self.ioctx.remove_object(name)\n-                except rados.ObjectNotFound:\n-                    # It's possible that we already remove that object and then\n-                    # crashed before removing it from the OMAP key list; then\n-                    # no big deal anyway.\n-                    pass\n-            self.ioctx.remove_omap_keys(op, names)\n-            self.ioctx.operate_write_op(\n-                op, self._build_unaggregated_timeserie_path(metric, 3))\n+            for metric, keys_and_aggregations in six.iteritems(\n+                    metrics_keys_aggregations):\n+                names = tuple(\n+                    self._get_object_name(\n+                        metric, key, aggregation.method, version)\n+                    for key, aggregation in keys_and_aggregations\n+                )\n+                for name in names:\n+                    try:\n+                        self.ioctx.remove_object(name)\n+                    except rados.ObjectNotFound:\n+                        # It's possible that we already remove that object and\n+                        # then crashed before removing it from the OMAP key\n+                        # list; then no big deal anyway.\n+                        pass\n+                self.ioctx.remove_omap_keys(op, names)\n+                self.ioctx.operate_write_op(\n+                    op, self._build_unaggregated_timeserie_path(metric, 3))\n \n     def _delete_metric(self, metric):\n         with rados.ReadOpCtx() as op:","changes":36},{"status":"modified","deletions":5,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/963cb15a6ba3e64a392f6d1b06a89338ad707755\/gnocchi\/storage\/redis.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/963cb15a6ba3e64a392f6d1b06a89338ad707755\/gnocchi\/storage\/redis.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/redis.py?ref=963cb15a6ba3e64a392f6d1b06a89338ad707755","filename":"gnocchi\/storage\/redis.py","sha":"2d0986afe891c3e7939da1dc53eab2cb5a810c9b","additions":7,"patch":"@@ -126,12 +126,14 @@ def _list_split_keys(self, metric, aggregations, version=3):\n             }\n         return keys\n \n-    def _delete_metric_splits(self, metric, keys_and_aggregations, version=3):\n-        metric_key = self._metric_key(metric)\n+    def _delete_metric_splits(self, metrics_keys_aggregations, version=3):\n         pipe = self._client.pipeline(transaction=False)\n-        for key, aggregation in keys_and_aggregations:\n-            pipe.hdel(metric_key, self._aggregated_field_for_split(\n-                aggregation.method, key, version))\n+        for metric, keys_and_aggregations in six.iteritems(\n+                metrics_keys_aggregations):\n+            metric_key = self._metric_key(metric)\n+            for key, aggregation in keys_and_aggregations:\n+                pipe.hdel(metric_key, self._aggregated_field_for_split(\n+                    aggregation.method, key, version))\n         pipe.execute()\n \n     def _store_metric_splits(self, metric, keys_aggregations_data_offset,","changes":12},{"status":"modified","deletions":2,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/963cb15a6ba3e64a392f6d1b06a89338ad707755\/gnocchi\/tests\/test_storage.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/963cb15a6ba3e64a392f6d1b06a89338ad707755\/gnocchi\/tests\/test_storage.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/test_storage.py?ref=963cb15a6ba3e64a392f6d1b06a89338ad707755","filename":"gnocchi\/tests\/test_storage.py","sha":"513c4e0e68664edba9e4958d5027723247ae29fd","additions":2,"patch":"@@ -776,10 +776,10 @@ def test_rewrite_measures_corruption_missing_file(self):\n         # Test what happens if we delete the latest split and then need to\n         # compress it!\n         self.storage._delete_metric_splits(\n-            self.metric, [(carbonara.SplitKey(\n+            {self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451952000, 's'),\n                 numpy.timedelta64(1, 'm'),\n-            ), aggregation)])\n+            ), aggregation)]})\n \n         # Now store brand new points that should force a rewrite of one of the\n         # split (keep in mind the back window size in one hour here). We move","changes":4}],"committer":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"stats":{"deletions":25,"additions":39,"total":64},"author":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/963cb15a6ba3e64a392f6d1b06a89338ad707755","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/963cb15a6ba3e64a392f6d1b06a89338ad707755\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/963cb15a6ba3e64a392f6d1b06a89338ad707755","sha":"963cb15a6ba3e64a392f6d1b06a89338ad707755","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/ff8e9989ea755f909a07cff91ec81ee3110fdb08","sha":"ff8e9989ea755f909a07cff91ec81ee3110fdb08","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/ff8e9989ea755f909a07cff91ec81ee3110fdb08"}],"commit":{"committer":{"date":"2018-03-16T14:25:21Z","name":"Julien Danjou","email":"julien@danjou.info"},"author":{"date":"2018-03-07T09:29:49Z","name":"Julien Danjou","email":"julien@danjou.info"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/963cb15a6ba3e64a392f6d1b06a89338ad707755","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/aab1523db0703ef7a5af1287b275b9f68083c9d5","sha":"aab1523db0703ef7a5af1287b275b9f68083c9d5"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"storage: _delete_metric_splits can now batch over multiple metrics"}},{"files":[{"status":"modified","deletions":9,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/16f0e7b057f6240e3044341fded19d54b4b486a9\/gnocchi\/storage\/__init__.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/16f0e7b057f6240e3044341fded19d54b4b486a9\/gnocchi\/storage\/__init__.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/__init__.py?ref=16f0e7b057f6240e3044341fded19d54b4b486a9","filename":"gnocchi\/storage\/__init__.py","sha":"6a72c67d550dcdea5a0486fc58d7e79b62d9177d","additions":30,"patch":"@@ -166,19 +166,39 @@ def _store_unaggregated_timeseries(self, metrics_and_data, version=3):\n             ((metric, data, version) for metric, data in metrics_and_data))\n \n     @staticmethod\n-    def _store_metric_splits(metric, keys_aggregations_data_offset, version=3):\n-        \"\"\"Store metric split.\n+    def _store_metric_splits_unbatched(metric, key, aggregation, data, offset,\n+                                       version=3):\n+        \"\"\"Store a metric split.\n \n-        Store a bunch of splits for a metric.\n+        :param metric: A metric.\n+        :param key: The `carbonara.SplitKey`.\n+        :param aggregation: The `carbonara.Aggregation`.\n+        :param data: The actual data to write.\n+        :param offset: The offset to write to.\n+        :param version: Storage engine format version.\n+        \"\"\"\n+        raise NotImplementedError\n \n-        :param metric: The metric to store for\n-        :param keys_aggregations_data_offset: A list of\n-                                             (key, aggregation, data, offset)\n-                                             tuples\n+    def _store_metric_splits(self, metrics_keys_aggregations_data_offset,\n+                             version=3):\n+        \"\"\"Store metric splits.\n \n+        Store a bunch of splits for some metrics.\n+\n+        :param metrics_keys_aggregations_data_offset: A dict where keys are\n+                                                      `storage.Metric` and\n+                                                      values are a list of\n+                                                      (key, aggregation,\n+                                                       data, offset) tuples.\n         :param version: Storage engine format version.\n         \"\"\"\n-        raise NotImplementedError\n+        utils.parallel_map(\n+            self._store_metric_splits_unbatched,\n+            ((metric, key, aggregation, data, offset, version)\n+             for metric, keys_aggregations_data_offset\n+             in six.iteritems(metrics_keys_aggregations_data_offset)\n+             for key, aggregation, data, offset\n+             in keys_aggregations_data_offset))\n \n     @staticmethod\n     def _list_split_keys(metric, aggregations, version=3):\n@@ -352,7 +372,8 @@ def _store_timeserie_splits(self, metric, keys_and_aggregations_and_splits,\n                 keys_aggregations_data_offset.append(\n                     (key, split.aggregation, data, offset))\n \n-        return self._store_metric_splits(metric, keys_aggregations_data_offset)\n+        return self._store_metric_splits(\n+            {metric: keys_aggregations_data_offset})\n \n     def _compute_split_operations(self, metric, aggregations_and_timeseries,\n                                   previous_oldest_mutable_timestamp,","changes":39},{"status":"modified","deletions":10,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/16f0e7b057f6240e3044341fded19d54b4b486a9\/gnocchi\/storage\/ceph.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/16f0e7b057f6240e3044341fded19d54b4b486a9\/gnocchi\/storage\/ceph.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/ceph.py?ref=16f0e7b057f6240e3044341fded19d54b4b486a9","filename":"gnocchi\/storage\/ceph.py","sha":"a9c45e1bc99eb2c75da0d74122dfcb7e4432eb33","additions":13,"patch":"@@ -81,18 +81,21 @@ def _create_metric(self, metric):\n         else:\n             self.ioctx.write_full(name, b\"\")\n \n-    def _store_metric_splits(self, metric, keys_aggregations_data_offset,\n+    def _store_metric_splits(self, metrics_keys_aggregations_data_offset,\n                              version=3):\n         with rados.WriteOpCtx() as op:\n-            for key, agg, data, offset in keys_aggregations_data_offset:\n-                name = self._get_object_name(metric, key, agg.method, version)\n-                if offset is None:\n-                    self.ioctx.write_full(name, data)\n-                else:\n-                    self.ioctx.write(name, data, offset=offset)\n-                self.ioctx.set_omap(op, (name,), (b\"\",))\n-            self.ioctx.operate_write_op(\n-                op, self._build_unaggregated_timeserie_path(metric, 3))\n+            for metric, keys_aggregations_data_offset in six.iteritems(\n+                    metrics_keys_aggregations_data_offset):\n+                for key, agg, data, offset in keys_aggregations_data_offset:\n+                    name = self._get_object_name(\n+                        metric, key, agg.method, version)\n+                    if offset is None:\n+                        self.ioctx.write_full(name, data)\n+                    else:\n+                        self.ioctx.write(name, data, offset=offset)\n+                    self.ioctx.set_omap(op, (name,), (b\"\",))\n+                self.ioctx.operate_write_op(\n+                    op, self._build_unaggregated_timeserie_path(metric, 3))\n \n     def _delete_metric_splits(self, metric, metrics_keys_aggregations,\n                               version=3):","changes":23},{"status":"modified","deletions":7,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/16f0e7b057f6240e3044341fded19d54b4b486a9\/gnocchi\/storage\/file.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/16f0e7b057f6240e3044341fded19d54b4b486a9\/gnocchi\/storage\/file.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/file.py?ref=16f0e7b057f6240e3044341fded19d54b4b486a9","filename":"gnocchi\/storage\/file.py","sha":"010d851b7425f611e353832383db44ef8a2dfa6e","additions":6,"patch":"@@ -163,13 +163,12 @@ def _delete_metric_splits_unbatched(\n         os.unlink(self._build_metric_path_for_split(\n             metric, aggregation.method, key, version))\n \n-    def _store_metric_splits(self, metric, keys_aggregations_data_offset,\n-                             version=3):\n-        for key, aggregation, data, offset in keys_aggregations_data_offset:\n-            self._atomic_file_store(\n-                self._build_metric_path_for_split(\n-                    metric, aggregation.method, key, version),\n-                data)\n+    def _store_metric_splits_unbatched(self, metric, key, aggregation, data,\n+                                       offset, version):\n+        self._atomic_file_store(\n+            self._build_metric_path_for_split(\n+                metric, aggregation.method, key, version),\n+            data)\n \n     def _delete_metric(self, metric):\n         path = self._build_metric_dir(metric)","changes":13},{"status":"modified","deletions":6,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/16f0e7b057f6240e3044341fded19d54b4b486a9\/gnocchi\/storage\/redis.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/16f0e7b057f6240e3044341fded19d54b4b486a9\/gnocchi\/storage\/redis.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/redis.py?ref=16f0e7b057f6240e3044341fded19d54b4b486a9","filename":"gnocchi\/storage\/redis.py","sha":"569eb94ca41026905a5779740a76a2d4ed8e076f","additions":8,"patch":"@@ -136,14 +136,16 @@ def _delete_metric_splits(self, metrics_keys_aggregations, version=3):\n                     aggregation.method, key, version))\n         pipe.execute()\n \n-    def _store_metric_splits(self, metric, keys_aggregations_data_offset,\n+    def _store_metric_splits(self, metrics_keys_aggregations_data_offset,\n                              version=3):\n         pipe = self._client.pipeline(transaction=False)\n-        metric_key = self._metric_key(metric)\n-        for key, aggregation, data, offset in keys_aggregations_data_offset:\n-            key = self._aggregated_field_for_split(\n-                aggregation.method, key, version)\n-            pipe.hset(metric_key, key, data)\n+        for metric, keys_aggs_data_offset in six.iteritems(\n+                metrics_keys_aggregations_data_offset):\n+            metric_key = self._metric_key(metric)\n+            for key, aggregation, data, offset in keys_aggs_data_offset:\n+                key = self._aggregated_field_for_split(\n+                    aggregation.method, key, version)\n+                pipe.hset(metric_key, key, data)\n         pipe.execute()\n \n     def _delete_metric(self, metric):","changes":14},{"status":"modified","deletions":8,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/16f0e7b057f6240e3044341fded19d54b4b486a9\/gnocchi\/storage\/s3.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/16f0e7b057f6240e3044341fded19d54b4b486a9\/gnocchi\/storage\/s3.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/s3.py?ref=16f0e7b057f6240e3044341fded19d54b4b486a9","filename":"gnocchi\/storage\/s3.py","sha":"29134d635c6ee65b68bba51da3550679cf00a83f","additions":7,"patch":"@@ -120,14 +120,13 @@ def _head():\n                 wait=self._consistency_wait,\n                 stop=self._consistency_stop)(_head)\n \n-    def _store_metric_splits(self, metric, keys_aggregations_data_offset,\n-                             version=3):\n-        for key, aggregation, data, offset in keys_aggregations_data_offset:\n-            self._put_object_safe(\n-                Bucket=self._bucket_name,\n-                Key=self._prefix(metric) + self._object_name(\n-                    key, aggregation.method, version),\n-                Body=data)\n+    def _store_metric_splits_unbatched(self, metric, key, aggregation, data,\n+                                       offset, version):\n+        self._put_object_safe(\n+            Bucket=self._bucket_name,\n+            Key=self._prefix(metric) + self._object_name(\n+                key, aggregation.method, version),\n+            Body=data)\n \n     def _delete_metric_splits_unbatched(self, metric, key, aggregation,\n                                         version=3):","changes":15},{"status":"modified","deletions":7,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/16f0e7b057f6240e3044341fded19d54b4b486a9\/gnocchi\/storage\/swift.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/16f0e7b057f6240e3044341fded19d54b4b486a9\/gnocchi\/storage\/swift.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/swift.py?ref=16f0e7b057f6240e3044341fded19d54b4b486a9","filename":"gnocchi\/storage\/swift.py","sha":"287173dc843aca4bc51f15e82481968fbda34744","additions":6,"patch":"@@ -116,13 +116,12 @@ def _create_metric(self, metric):\n         if resp['status'] == 204:\n             raise storage.MetricAlreadyExists(metric)\n \n-    def _store_metric_splits(self, metric, keys_aggregations_data_offset,\n-                             version=3):\n-        for key, aggregation, data, offset in keys_aggregations_data_offset:\n-            self.swift.put_object(\n-                self._container_name(metric),\n-                self._object_name(key, aggregation.method, version),\n-                data)\n+    def _store_metric_splits_unbatched(self, metric, key, aggregation, data,\n+                                       offset, version):\n+        self.swift.put_object(\n+            self._container_name(metric),\n+            self._object_name(key, aggregation.method, version),\n+            data)\n \n     def _delete_metric_splits_unbatched(\n             self, metric, key, aggregation, version=3):","changes":13},{"status":"modified","deletions":8,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/16f0e7b057f6240e3044341fded19d54b4b486a9\/gnocchi\/tests\/test_storage.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/16f0e7b057f6240e3044341fded19d54b4b486a9\/gnocchi\/tests\/test_storage.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/test_storage.py?ref=16f0e7b057f6240e3044341fded19d54b4b486a9","filename":"gnocchi\/tests\/test_storage.py","sha":"9bc6a5465073b3def0932ecb7dead6345c0042f5","additions":9,"patch":"@@ -287,11 +287,12 @@ def test_add_measures_update_subset_split(self):\n         for call in c.mock_calls:\n             # policy is 60 points and split is 48. should only update 2nd half\n             args = call[1]\n-            if args[0] == m_sql:\n-                for key, aggregation, data, offset in args[1]:\n-                    if (key.sampling == numpy.timedelta64(1, 'm')\n-                       and aggregation.method == \"mean\"):\n-                        count += 1\n+            for metric, key_agg_data_offset in six.iteritems(args[0]):\n+                if metric == m_sql:\n+                    for key, aggregation, data, offset in key_agg_data_offset:\n+                        if (key.sampling == numpy.timedelta64(1, 'm')\n+                           and aggregation.method == \"mean\"):\n+                            count += 1\n         self.assertEqual(1, count)\n \n     def test_add_measures_update_subset(self):\n@@ -859,13 +860,13 @@ def test_rewrite_measures_corruption_bad_data(self):\n         ]}, self.storage.get_measures(self.metric, [aggregation]))\n \n         # Test what happens if we write garbage\n-        self.storage._store_metric_splits(\n-            self.metric, [\n+        self.storage._store_metric_splits({\n+            self.metric: [\n                 (carbonara.SplitKey(\n                     numpy.datetime64(1451952000, 's'),\n                     numpy.timedelta64(1, 'm')),\n                  aggregation, b\"oh really?\", None),\n-            ])\n+            ]})\n \n         # Now store brand new points that should force a rewrite of one of the\n         # split (keep in mind the back window size in one hour here). We move","changes":17}],"committer":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"stats":{"deletions":55,"additions":79,"total":134},"author":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/16f0e7b057f6240e3044341fded19d54b4b486a9","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/16f0e7b057f6240e3044341fded19d54b4b486a9\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/16f0e7b057f6240e3044341fded19d54b4b486a9","sha":"16f0e7b057f6240e3044341fded19d54b4b486a9","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/963cb15a6ba3e64a392f6d1b06a89338ad707755","sha":"963cb15a6ba3e64a392f6d1b06a89338ad707755","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/963cb15a6ba3e64a392f6d1b06a89338ad707755"}],"commit":{"committer":{"date":"2018-03-16T14:25:21Z","name":"Julien Danjou","email":"julien@danjou.info"},"author":{"date":"2018-03-07T10:26:50Z","name":"Julien Danjou","email":"julien@danjou.info"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/16f0e7b057f6240e3044341fded19d54b4b486a9","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/070732966c747d3c806600d38c9bc28e4bd726de","sha":"070732966c747d3c806600d38c9bc28e4bd726de"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"storage: batch split storage on multiple metrics"}},{"files":[{"status":"modified","deletions":45,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/c5862235ba773f3cc7df10a57520f2ece2896b55\/gnocchi\/storage\/__init__.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/c5862235ba773f3cc7df10a57520f2ece2896b55\/gnocchi\/storage\/__init__.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/__init__.py?ref=c5862235ba773f3cc7df10a57520f2ece2896b55","filename":"gnocchi\/storage\/__init__.py","sha":"948570ba1902920692ea22a5654573504e944525","additions":62,"patch":"@@ -331,49 +331,64 @@ def _get_measures_timeserie(self, metric, aggregation, keys,\n             ts.truncate(aggregation.timespan)\n         return ts\n \n-    def _store_timeserie_splits(self, metric, keys_and_aggregations_and_splits,\n-                                oldest_mutable_timestamp):\n-        keys_to_rewrite = []\n-        splits_to_rewrite = []\n-        for (key, aggregation), split in six.iteritems(\n-                keys_and_aggregations_and_splits):\n-            # NOTE(jd) We write the full split only if the driver works that\n-            # way (self.WRITE_FULL) or if the oldest_mutable_timestamp is out\n-            # of range.\n-            write_full = (\n-                self.WRITE_FULL or next(key) <= oldest_mutable_timestamp\n-            )\n-            if write_full:\n-                keys_to_rewrite.append(key)\n-                splits_to_rewrite.append(split)\n-\n-        # Update the splits that were passed as argument with the data already\n-        # stored in the case that we need to rewrite them fully.\n-        # First, fetch all those existing splits.\n-        existing_data = self._get_splits_and_unserialize(\n-            metric, [(key, split.aggregation)\n-                     for key, split\n-                     in six.moves.zip(keys_to_rewrite, splits_to_rewrite)])\n-\n-        for key, split, existing in six.moves.zip(\n-                keys_to_rewrite, splits_to_rewrite, existing_data):\n-            if existing:\n-                existing.merge(split)\n-                keys_and_aggregations_and_splits[\n-                    (key, split.aggregation)] = existing\n-\n-        keys_aggregations_data_offset = []\n-        for (key, aggregation), split in six.iteritems(\n-                keys_and_aggregations_and_splits):\n-            # Do not store the split if it's empty.\n-            if split:\n-                offset, data = split.serialize(\n-                    key, compressed=key in keys_to_rewrite)\n-                keys_aggregations_data_offset.append(\n-                    (key, split.aggregation, data, offset))\n-\n-        return self._store_metric_splits(\n-            {metric: keys_aggregations_data_offset})\n+    def _update_metric_splits(self, metrics_keys_aggregations_splits):\n+        \"\"\"Store splits of `carbonara.`AggregatedTimeSerie` for a metric.\n+\n+        This reads the existing split and merge it with the new one give as\n+        argument, then writing it to the storage.\n+\n+        :param metrics_keys_aggregations_splits: A dict where keys are\n+                                                 `storage.Metric` and values\n+                                                 are tuples of the form\n+                                                 ({(key, aggregation): split},\n+                                                  oldest_mutable_timestamp)\n+        \"\"\"\n+        metrics_splits_to_store = {}\n+\n+        for metric, (keys_and_aggregations_and_splits,\n+                     oldest_mutable_timestamp) in six.iteritems(\n+                         metrics_keys_aggregations_splits):\n+            keys_to_rewrite = []\n+            splits_to_rewrite = []\n+            for (key, aggregation), split in six.iteritems(\n+                    keys_and_aggregations_and_splits):\n+                # NOTE(jd) We write the full split only if the driver works\n+                # that way (self.WRITE_FULL) or if the oldest_mutable_timestamp\n+                # is out of range.\n+                write_full = (\n+                    self.WRITE_FULL or next(key) <= oldest_mutable_timestamp\n+                )\n+                if write_full:\n+                    keys_to_rewrite.append(key)\n+                    splits_to_rewrite.append(split)\n+\n+            # Update the splits that were passed as argument with the data\n+            # already stored in the case that we need to rewrite them fully.\n+            # First, fetch all those existing splits.\n+            existing_data = self._get_splits_and_unserialize(\n+                metric, [(key, split.aggregation)\n+                         for key, split\n+                         in six.moves.zip(keys_to_rewrite, splits_to_rewrite)])\n+\n+            for key, split, existing in six.moves.zip(\n+                    keys_to_rewrite, splits_to_rewrite, existing_data):\n+                if existing:\n+                    existing.merge(split)\n+                    keys_and_aggregations_and_splits[\n+                        (key, split.aggregation)] = existing\n+\n+            keys_aggregations_data_offset = []\n+            for (key, aggregation), split in six.iteritems(\n+                    keys_and_aggregations_and_splits):\n+                # Do not store the split if it's empty.\n+                if split:\n+                    offset, data = split.serialize(\n+                        key, compressed=key in keys_to_rewrite)\n+                    keys_aggregations_data_offset.append(\n+                        (key, split.aggregation, data, offset))\n+            metrics_splits_to_store[metric] = keys_aggregations_data_offset\n+\n+        return self._store_metric_splits(metrics_splits_to_store)\n \n     def _compute_split_operations(self, metric, aggregations_and_timeseries,\n                                   previous_oldest_mutable_timestamp,\n@@ -620,8 +635,10 @@ def _map_compute_splits_operations(bound_timeserie):\n                      measures,\n                      before_truncate_callback=_map_compute_splits_operations)\n                 self._delete_metric_splits({metric: deleted_keys})\n-                self._store_timeserie_splits(metric, keys_and_splits_to_store,\n-                                             new_first_block_timestamp)\n+                self._update_metric_splits({\n+                    metric: (keys_and_splits_to_store,\n+                             new_first_block_timestamp),\n+                })\n \n             new_boundts.append((metric, ts.serialize()))\n ","changes":107}],"committer":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"stats":{"deletions":45,"additions":62,"total":107},"author":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/c5862235ba773f3cc7df10a57520f2ece2896b55","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/c5862235ba773f3cc7df10a57520f2ece2896b55\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/c5862235ba773f3cc7df10a57520f2ece2896b55","sha":"c5862235ba773f3cc7df10a57520f2ece2896b55","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/16f0e7b057f6240e3044341fded19d54b4b486a9","sha":"16f0e7b057f6240e3044341fded19d54b4b486a9","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/16f0e7b057f6240e3044341fded19d54b4b486a9"}],"commit":{"committer":{"date":"2018-03-16T14:25:21Z","name":"Julien Danjou","email":"julien@danjou.info"},"author":{"date":"2018-03-07T11:11:15Z","name":"Julien Danjou","email":"julien@danjou.info"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/c5862235ba773f3cc7df10a57520f2ece2896b55","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/ca08f770fc7bf7a313d41714c034ea9e50762f09","sha":"ca08f770fc7bf7a313d41714c034ea9e50762f09"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"storage: update_metric_splits can batch several metrics at once"}},{"files":[{"status":"modified","deletions":6,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/f2708198382d9daccc2d80490b7184a67980b49e\/gnocchi\/storage\/__init__.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/f2708198382d9daccc2d80490b7184a67980b49e\/gnocchi\/storage\/__init__.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/__init__.py?ref=f2708198382d9daccc2d80490b7184a67980b49e","filename":"gnocchi\/storage\/__init__.py","sha":"3e3775ea00d7b0f097027540ebadc23e9fc66d79","additions":10,"patch":"@@ -545,6 +545,8 @@ def add_measures_to_metrics(self, metrics_and_measures):\n                   len(metrics_and_measures), sw.elapsed())\n \n         new_boundts = []\n+        splits_to_delete = {}\n+        splits_to_update = {}\n \n         for metric, measures in six.iteritems(metrics_and_measures):\n             if len(measures) == 0:\n@@ -633,12 +635,12 @@ def _map_compute_splits_operations(bound_timeserie):\n                  deleted_keys,\n                  keys_and_splits_to_store) = ts.set_values(\n                      measures,\n-                     before_truncate_callback=_map_compute_splits_operations)\n-                self._delete_metric_splits({metric: deleted_keys})\n-                self._update_metric_splits({\n-                    metric: (keys_and_splits_to_store,\n-                             new_first_block_timestamp),\n-                })\n+                     before_truncate_callback=_map_compute_splits_operations,\n+                )\n+\n+            splits_to_delete[metric] = deleted_keys\n+            splits_to_update[metric] = (keys_and_splits_to_store,\n+                                        new_first_block_timestamp)\n \n             new_boundts.append((metric, ts.serialize()))\n \n@@ -655,6 +657,8 @@ def _map_compute_splits_operations(bound_timeserie):\n                       \"in %.2f seconds%s\",\n                       metric.id, len(measures), elapsed, perf)\n \n+        self._delete_metric_splits(splits_to_delete)\n+        self._update_metric_splits(splits_to_update)\n         self._store_unaggregated_timeseries(new_boundts)\n \n     def find_measure(self, metric, predicate, granularity, aggregation=\"mean\",","changes":16}],"committer":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"stats":{"deletions":6,"additions":10,"total":16},"author":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/f2708198382d9daccc2d80490b7184a67980b49e","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/f2708198382d9daccc2d80490b7184a67980b49e\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/f2708198382d9daccc2d80490b7184a67980b49e","sha":"f2708198382d9daccc2d80490b7184a67980b49e","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/c5862235ba773f3cc7df10a57520f2ece2896b55","sha":"c5862235ba773f3cc7df10a57520f2ece2896b55","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/c5862235ba773f3cc7df10a57520f2ece2896b55"}],"commit":{"committer":{"date":"2018-03-16T14:25:21Z","name":"Julien Danjou","email":"julien@danjou.info"},"author":{"date":"2018-03-07T11:19:49Z","name":"Julien Danjou","email":"julien@danjou.info"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/f2708198382d9daccc2d80490b7184a67980b49e","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/2713485e4c064092a7ad9756b05c9354f5324dab","sha":"2713485e4c064092a7ad9756b05c9354f5324dab"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"storage: update and delete all splits for all metrics at once"}},{"files":[{"status":"modified","deletions":7,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/df74dd8348ecc04bfbdab3507b0a55a0d1287afc\/gnocchi\/storage\/__init__.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/df74dd8348ecc04bfbdab3507b0a55a0d1287afc\/gnocchi\/storage\/__init__.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/__init__.py?ref=df74dd8348ecc04bfbdab3507b0a55a0d1287afc","filename":"gnocchi\/storage\/__init__.py","sha":"c23fc79d81194808d2ccc672395b6c24b5f9a4be","additions":13,"patch":"@@ -107,14 +107,19 @@ def __init__(conf):\n     def upgrade():\n         pass\n \n-    def _get_measures(self, metric, keys_and_aggregations, version=3):\n-        return utils.parallel_map(\n-            self._get_measures_unbatched,\n-            ((metric, key, aggregation, version)\n-             for key, aggregation in keys_and_aggregations))\n+    def _get_splits(self, metrics_keys_aggregations, version=3):\n+        # FIXME(jd) Call parallel_map only once\n+        return {\n+            metric: utils.parallel_map(\n+                self._get_splits_unbatched,\n+                ((metric, key, aggregation, version)\n+                 for key, aggregation in keys_and_aggregations))\n+            for metric, keys_and_aggregations\n+            in six.iteritems(metrics_keys_aggregations)\n+        }\n \n     @staticmethod\n-    def _get_measures_unbatched(metric, timestamp_key, aggregation, version=3):\n+    def _get_splits_unbatched(metric, timestamp_key, aggregation, version=3):\n         raise NotImplementedError\n \n     @staticmethod\n@@ -282,7 +287,8 @@ def _get_splits_and_unserialize(self, metric, keys_and_aggregations):\n         \"\"\"\n         if not keys_and_aggregations:\n             return []\n-        raw_measures = self._get_measures(metric, keys_and_aggregations)\n+        raw_measures = self._get_splits(\n+            {metric: keys_and_aggregations})[metric]\n         results = []\n         for (key, aggregation), raw in six.moves.zip(\n                 keys_and_aggregations, raw_measures):","changes":20},{"status":"modified","deletions":1,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/df74dd8348ecc04bfbdab3507b0a55a0d1287afc\/gnocchi\/storage\/ceph.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/df74dd8348ecc04bfbdab3507b0a55a0d1287afc\/gnocchi\/storage\/ceph.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/ceph.py?ref=df74dd8348ecc04bfbdab3507b0a55a0d1287afc","filename":"gnocchi\/storage\/ceph.py","sha":"50c467acbb2df37ebb903ae783dcbb81b43cb46b","additions":1,"patch":"@@ -151,7 +151,7 @@ def _delete_metric(self, metric):\n             # It's possible that the object does not exists\n             pass\n \n-    def _get_measures_unbatched(self, metric, key, aggregation, version=3):\n+    def _get_splits_unbatched(self, metric, key, aggregation, version=3):\n         try:\n             name = self._get_object_name(\n                 metric, key, aggregation.method, version)","changes":2},{"status":"modified","deletions":1,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/df74dd8348ecc04bfbdab3507b0a55a0d1287afc\/gnocchi\/storage\/file.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/df74dd8348ecc04bfbdab3507b0a55a0d1287afc\/gnocchi\/storage\/file.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/file.py?ref=df74dd8348ecc04bfbdab3507b0a55a0d1287afc","filename":"gnocchi\/storage\/file.py","sha":"56929a1a5663d320af4380cc8222e3f72ef5fd8a","additions":1,"patch":"@@ -180,7 +180,7 @@ def _delete_metric(self, metric):\n                 # measures)\n                 raise\n \n-    def _get_measures_unbatched(self, metric, key, aggregation, version=3):\n+    def _get_splits_unbatched(self, metric, key, aggregation, version=3):\n         path = self._build_metric_path_for_split(\n             metric, aggregation.method, key, version)\n         try:","changes":2},{"status":"modified","deletions":7,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/df74dd8348ecc04bfbdab3507b0a55a0d1287afc\/gnocchi\/storage\/redis.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/df74dd8348ecc04bfbdab3507b0a55a0d1287afc\/gnocchi\/storage\/redis.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/redis.py?ref=df74dd8348ecc04bfbdab3507b0a55a0d1287afc","filename":"gnocchi\/storage\/redis.py","sha":"b3c02fa89447eb0eaf2f49f71493eb9edc664f60","additions":14,"patch":"@@ -151,10 +151,17 @@ def _store_metric_splits(self, metrics_keys_aggregations_data_offset,\n     def _delete_metric(self, metric):\n         self._client.delete(self._metric_key(metric))\n \n-    def _get_measures(self, metric, keys_and_aggregations, version=3):\n-        if not keys_and_aggregations:\n-            return []\n-        return self._client.hmget(\n-            self._metric_key(metric),\n-            [self._aggregated_field_for_split(aggregation.method, key, version)\n-             for key, aggregation in keys_and_aggregations])\n+    def _get_splits(self, metrics_keys_aggregations, version=3):\n+        pipe = self._client.pipeline(transaction=False)\n+        # Use a list of metric with a constant sorting\n+        metrics = list(metrics_keys_aggregations.keys())\n+        for metric in metrics:\n+            pipe.hmget(\n+                self._metric_key(metric),\n+                [self._aggregated_field_for_split(aggregation.method,\n+                                                  key, version)\n+                 for key, aggregation in metrics_keys_aggregations[metric]])\n+        return {\n+            metric: splits\n+            for metric, splits in six.moves.zip(metrics, pipe.execute())\n+        }","changes":21},{"status":"modified","deletions":1,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/df74dd8348ecc04bfbdab3507b0a55a0d1287afc\/gnocchi\/storage\/s3.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/df74dd8348ecc04bfbdab3507b0a55a0d1287afc\/gnocchi\/storage\/s3.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/s3.py?ref=df74dd8348ecc04bfbdab3507b0a55a0d1287afc","filename":"gnocchi\/storage\/s3.py","sha":"c5a29ae7ff286d9a0da5089d3f99cc21f8a953f8","additions":1,"patch":"@@ -156,7 +156,7 @@ def _delete_metric(self, metric):\n             s3.bulk_delete(self.s3, bucket,\n                            [c['Key'] for c in response.get('Contents', ())])\n \n-    def _get_measures_unbatched(self, metric, key, aggregation, version=3):\n+    def _get_splits_unbatched(self, metric, key, aggregation, version=3):\n         try:\n             response = self.s3.get_object(\n                 Bucket=self._bucket_name,","changes":2},{"status":"modified","deletions":1,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/df74dd8348ecc04bfbdab3507b0a55a0d1287afc\/gnocchi\/storage\/swift.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/df74dd8348ecc04bfbdab3507b0a55a0d1287afc\/gnocchi\/storage\/swift.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/swift.py?ref=df74dd8348ecc04bfbdab3507b0a55a0d1287afc","filename":"gnocchi\/storage\/swift.py","sha":"c1a1ff65a7f1255e4bd7a5aa8de587ad0bcbc04d","additions":1,"patch":"@@ -147,7 +147,7 @@ def _delete_metric(self, metric):\n                     # Deleted in the meantime? Whatever.\n                     raise\n \n-    def _get_measures_unbatched(self, metric, key, aggregation, version=3):\n+    def _get_splits_unbatched(self, metric, key, aggregation, version=3):\n         try:\n             headers, contents = self.swift.get_object(\n                 self._container_name(metric), self._object_name(","changes":2},{"status":"modified","deletions":74,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/df74dd8348ecc04bfbdab3507b0a55a0d1287afc\/gnocchi\/tests\/test_storage.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/df74dd8348ecc04bfbdab3507b0a55a0d1287afc\/gnocchi\/tests\/test_storage.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/test_storage.py?ref=df74dd8348ecc04bfbdab3507b0a55a0d1287afc","filename":"gnocchi\/tests\/test_storage.py","sha":"ac9a11a49fcff8d5e290f55359140a99e944bc27","additions":80,"patch":"@@ -383,19 +383,21 @@ def test_get_measures_return(self):\n         aggregation = self.metric.archive_policy.get_aggregation(\n             \"mean\", numpy.timedelta64(5, 'm'))\n \n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits({\n+            self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451520000, 's'),\n                 numpy.timedelta64(5, 'm'),\n-            ), aggregation)])\n+            ), aggregation)]})\n+        self.assertEqual(1, len(data))\n+        data = data[self.metric]\n         self.assertEqual(1, len(data))\n         self.assertIsInstance(data[0], bytes)\n         self.assertGreater(len(data[0]), 0)\n         existing = data[0]\n \n         # Now retrieve an existing and a non-existing key\n-        data = self.storage._get_measures(\n-            self.metric, [\n+        data = self.storage._get_splits({\n+            self.metric: [\n                 (carbonara.SplitKey(\n                     numpy.datetime64(1451520000, 's'),\n                     numpy.timedelta64(5, 'm'),\n@@ -404,16 +406,18 @@ def test_get_measures_return(self):\n                     numpy.datetime64(1451520010, 's'),\n                     numpy.timedelta64(5, 'm'),\n                 ), aggregation),\n-            ])\n+            ]})\n+        self.assertEqual(1, len(data))\n+        data = data[self.metric]\n         self.assertEqual(2, len(data))\n         self.assertIsInstance(data[0], bytes)\n         self.assertGreater(len(data[0]), 0)\n         self.assertEqual(existing, data[0])\n         self.assertIsNone(data[1])\n \n         # Now retrieve a non-existing and an existing key\n-        data = self.storage._get_measures(\n-            self.metric, [\n+        data = self.storage._get_splits({\n+            self.metric: [\n                 (carbonara.SplitKey(\n                     numpy.datetime64(155152000, 's'),\n                     numpy.timedelta64(5, 'm'),\n@@ -422,7 +426,9 @@ def test_get_measures_return(self):\n                     numpy.datetime64(1451520000, 's'),\n                     numpy.timedelta64(5, 'm'),\n                 ), aggregation),\n-            ])\n+            ]})\n+        self.assertEqual(1, len(data))\n+        data = data[self.metric]\n         self.assertEqual(2, len(data))\n         self.assertIsInstance(data[1], bytes)\n         self.assertGreater(len(data[1]), 0)\n@@ -431,8 +437,8 @@ def test_get_measures_return(self):\n \n         m2, _ = self._create_metric()\n         # Now retrieve a non-existing (= no aggregated measures) metric\n-        data = self.storage._get_measures(\n-            m2, [\n+        data = self.storage._get_splits({\n+            m2: [\n                 (carbonara.SplitKey(\n                     numpy.datetime64(1451520010, 's'),\n                     numpy.timedelta64(5, 'm'),\n@@ -441,8 +447,8 @@ def test_get_measures_return(self):\n                     numpy.datetime64(1451520000, 's'),\n                     numpy.timedelta64(5, 'm'),\n                 ), aggregation),\n-            ])\n-        self.assertEqual([None, None], data)\n+            ]})\n+        self.assertEqual({m2: [None, None]}, data)\n \n     def test_rewrite_measures(self):\n         # Create an archive policy that spans on several splits. Each split\n@@ -484,23 +490,23 @@ def test_rewrite_measures(self):\n         aggregation = self.metric.archive_policy.get_aggregation(\n             \"mean\", numpy.timedelta64(1, 'm'))\n \n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits({\n+            self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451520000, 's'),\n                 numpy.timedelta64(1, 'm'),\n-            ), aggregation)])[0]\n+            ), aggregation)]})[self.metric][0]\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits({\n+            self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451736000, 's'),\n                 numpy.timedelta64(60, 's'),\n-            ), aggregation)])[0]\n+            ), aggregation)]})[self.metric][0]\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits({\n+            self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451952000, 's'),\n                 numpy.timedelta64(60, 's'),\n-            ), aggregation)])[0]\n+            ), aggregation)]})[self.metric][0]\n         assertCompressedIfWriteFull(\n             carbonara.AggregatedTimeSerie.is_compressed(data))\n \n@@ -535,30 +541,30 @@ def test_rewrite_measures(self):\n                                    numpy.timedelta64(1, 'm')),\n             },\n         }, self.storage._list_split_keys(self.metric, [agg]))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits({\n+            self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451520000, 's'),\n                 numpy.timedelta64(60, 's'),\n-            ), aggregation)])[0]\n+            ), aggregation)]})[self.metric][0]\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits({\n+            self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451736000, 's'),\n                 numpy.timedelta64(60, 's'),\n-            ), aggregation)])[0]\n+            ), aggregation)]})[self.metric][0]\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits({\n+            self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451952000, 's'),\n                 numpy.timedelta64(1, 'm'),\n-            ), aggregation)])[0]\n+            ), aggregation)]})[self.metric][0]\n         # Now this one is compressed because it has been rewritten!\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits({\n+            self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1452384000, 's'),\n                 numpy.timedelta64(60, 's'),\n-            ), aggregation)])[0]\n+            ), aggregation)]})[self.metric][0]\n         assertCompressedIfWriteFull(\n             carbonara.AggregatedTimeSerie.is_compressed(data))\n \n@@ -612,23 +618,23 @@ def test_rewrite_measures_oldest_mutable_timestamp_eq_next_key(self):\n         aggregation = self.metric.archive_policy.get_aggregation(\n             \"mean\", numpy.timedelta64(1, 'm'))\n \n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits(\n+            {self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451520000, 's'),\n                 numpy.timedelta64(1, 'm'),\n-            ), aggregation)])[0]\n+            ), aggregation)]})[self.metric][0]\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits(\n+            {self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451736000, 's'),\n                 numpy.timedelta64(1, 'm'),\n-            ), aggregation)])[0]\n+            ), aggregation)]})[self.metric][0]\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits(\n+            {self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451952000, 's'),\n                 numpy.timedelta64(1, 'm')\n-            ), aggregation)])[0]\n+            ), aggregation)]})[self.metric][0]\n         assertCompressedIfWriteFull(\n             carbonara.AggregatedTimeSerie.is_compressed(data))\n \n@@ -665,30 +671,30 @@ def test_rewrite_measures_oldest_mutable_timestamp_eq_next_key(self):\n                                    numpy.timedelta64(1, 'm')),\n             }\n         }, self.storage._list_split_keys(self.metric, [agg]))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits({\n+            self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451520000, 's'),\n                 numpy.timedelta64(1, 'm'),\n-            ), agg)])[0]\n+            ), agg)]})[self.metric][0]\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits({\n+            self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451736000, 's'),\n                 numpy.timedelta64(1, 'm'),\n-            ), agg)])[0]\n+            ), agg)]})[self.metric][0]\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits({\n+            self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451952000, 's'),\n                 numpy.timedelta64(60, 's')\n-            ), agg)])[0]\n+            ), agg)]})[self.metric][0]\n         # Now this one is compressed because it has been rewritten!\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits({\n+            self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1452384000, 's'),\n                 numpy.timedelta64(1, 'm'),\n-            ), agg)])[0]\n+            ), agg)]})[self.metric][0]\n         assertCompressedIfWriteFull(\n             carbonara.AggregatedTimeSerie.is_compressed(data))\n \n@@ -742,24 +748,24 @@ def test_rewrite_measures_corruption_missing_file(self):\n         aggregation = self.metric.archive_policy.get_aggregation(\n             \"mean\", numpy.timedelta64(1, 'm'))\n \n-        data = self.storage._get_measures(\n-            self.metric,\n+        data = self.storage._get_splits({\n+            self.metric:\n             [(carbonara.SplitKey(\n                 numpy.datetime64(1451520000, 's'),\n                 numpy.timedelta64(1, 'm'),\n-            ), aggregation)])[0]\n+            ), aggregation)]})[self.metric][0]\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits({\n+            self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451736000, 's'),\n                 numpy.timedelta64(1, 'm')\n-            ), aggregation)])[0]\n+            ), aggregation)]})[self.metric][0]\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits({\n+            self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451952000, 's'),\n                 numpy.timedelta64(1, 'm'),\n-            ), aggregation)])[0]\n+            ), aggregation)]})[self.metric][0]\n         assertCompressedIfWriteFull(\n             carbonara.AggregatedTimeSerie.is_compressed(data))\n \n@@ -832,23 +838,23 @@ def test_rewrite_measures_corruption_bad_data(self):\n         aggregation = self.metric.archive_policy.get_aggregation(\n             \"mean\", numpy.timedelta64(1, 'm'))\n \n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits({\n+            self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451520000, 's'),\n                 numpy.timedelta64(60, 's'),\n-            ), aggregation)])[0]\n+            ), aggregation)]})[self.metric][0]\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits({\n+            self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451736000, 's'),\n                 numpy.timedelta64(1, 'm'),\n-            ), aggregation)])[0]\n+            ), aggregation)]})[self.metric][0]\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits({\n+            self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451952000, 's'),\n                 numpy.timedelta64(1, 'm'),\n-            ), aggregation)])[0]\n+            ), aggregation)]})[self.metric][0]\n         assertCompressedIfWriteFull(\n             carbonara.AggregatedTimeSerie.is_compressed(data))\n \n@@ -934,7 +940,7 @@ def test_updated_measures(self):\n             (datetime64(2014, 1, 1, 12, 10), numpy.timedelta64(5, 'm'), 44.0),\n         ]}, self.storage.get_measures(self.metric, aggregations))\n \n-    def test_add_and_get_measures(self):\n+    def test_add_and_get_splits(self):\n         self.incoming.add_measures(self.metric.id, [\n             incoming.Measure(datetime64(2014, 1, 1, 12, 0, 1), 69),\n             incoming.Measure(datetime64(2014, 1, 1, 12, 7, 31), 42),","changes":154}],"committer":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"stats":{"deletions":92,"additions":111,"total":203},"author":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/df74dd8348ecc04bfbdab3507b0a55a0d1287afc","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/df74dd8348ecc04bfbdab3507b0a55a0d1287afc\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/df74dd8348ecc04bfbdab3507b0a55a0d1287afc","sha":"df74dd8348ecc04bfbdab3507b0a55a0d1287afc","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/f2708198382d9daccc2d80490b7184a67980b49e","sha":"f2708198382d9daccc2d80490b7184a67980b49e","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/f2708198382d9daccc2d80490b7184a67980b49e"}],"commit":{"committer":{"date":"2018-03-16T14:25:21Z","name":"Julien Danjou","email":"julien@danjou.info"},"author":{"date":"2018-03-07T13:31:57Z","name":"Julien Danjou","email":"julien@danjou.info"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/df74dd8348ecc04bfbdab3507b0a55a0d1287afc","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/7224b9f64fb7f11de2aaa17c4f2ef3025c30fa63","sha":"7224b9f64fb7f11de2aaa17c4f2ef3025c30fa63"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"storage: allow to batch splits retrieval for multiple metrics"}},{"files":[{"status":"modified","deletions":26,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/54c20a0eaf6e0774f6f67a0501222255834bead7\/gnocchi\/storage\/__init__.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/54c20a0eaf6e0774f6f67a0501222255834bead7\/gnocchi\/storage\/__init__.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/__init__.py?ref=54c20a0eaf6e0774f6f67a0501222255834bead7","filename":"gnocchi\/storage\/__init__.py","sha":"695944bc0e41b6829c2283e4c2032d46f7f536cb","additions":29,"patch":"@@ -14,6 +14,7 @@\n # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n # License for the specific language governing permissions and limitations\n # under the License.\n+import collections\n import itertools\n import operator\n \n@@ -277,31 +278,32 @@ def get_measures(self, metric, aggregations,\n                                                      ATTRGETTER_METHOD)\n         }\n \n-    def _get_splits_and_unserialize(self, metric, keys_and_aggregations):\n+    def _get_splits_and_unserialize(self, metrics_keys_aggregations):\n         \"\"\"Get splits and unserialize them\n \n-        :param metric: The metric to retrieve.\n-        :param keys_and_aggregations: A list of tuple (SplitKey, Aggregation)\n-                                      to retrieve.\n-        :return: A list of AggregatedTimeSerie.\n+        :param metrics_keys_aggregations: A dict where keys are\n+                                         `storage.Metric` and values are tuples\n+                                          of (SplitKey, Aggregation) to\n+                                          retrieve.\n+        :return: A dict where keys are `storage.Metric` and values are lists\n+                 of `carbonara.AggregatedTimeSerie`.\n         \"\"\"\n-        if not keys_and_aggregations:\n-            return []\n-        raw_measures = self._get_splits(\n-            {metric: keys_and_aggregations})[metric]\n-        results = []\n-        for (key, aggregation), raw in six.moves.zip(\n-                keys_and_aggregations, raw_measures):\n-            try:\n-                ts = carbonara.AggregatedTimeSerie.unserialize(\n-                    raw, key, aggregation)\n-            except carbonara.InvalidData:\n-                LOG.error(\"Data corruption detected for %s \"\n-                          \"aggregated `%s' timeserie, granularity `%s' \"\n-                          \"around time `%s', ignoring.\",\n-                          metric.id, aggregation.method, key.sampling, key)\n-                ts = carbonara.AggregatedTimeSerie(aggregation)\n-            results.append(ts)\n+        raw_measures = self._get_splits(metrics_keys_aggregations)\n+        results = collections.defaultdict(list)\n+        for metric, keys_and_aggregations in six.iteritems(\n+                metrics_keys_aggregations):\n+            for (key, aggregation), raw in six.moves.zip(\n+                    keys_and_aggregations, raw_measures[metric]):\n+                try:\n+                    ts = carbonara.AggregatedTimeSerie.unserialize(\n+                        raw, key, aggregation)\n+                except carbonara.InvalidData:\n+                    LOG.error(\"Data corruption detected for %s \"\n+                              \"aggregated `%s' timeserie, granularity `%s' \"\n+                              \"around time `%s', ignoring.\",\n+                              metric.id, aggregation.method, key.sampling, key)\n+                    ts = carbonara.AggregatedTimeSerie(aggregation)\n+                results[metric].append(ts)\n         return results\n \n     def _get_measures_timeserie(self, metric, aggregation, keys,\n@@ -321,7 +323,7 @@ def _get_measures_timeserie(self, metric, aggregation, keys,\n         ]\n \n         timeseries = self._get_splits_and_unserialize(\n-            metric, keys_and_aggregations)\n+            {metric: keys_and_aggregations})[metric]\n \n         ts = carbonara.AggregatedTimeSerie.from_timeseries(\n             timeseries, aggregation)\n@@ -371,10 +373,11 @@ def _update_metric_splits(self, metrics_keys_aggregations_splits):\n             # Update the splits that were passed as argument with the data\n             # already stored in the case that we need to rewrite them fully.\n             # First, fetch all those existing splits.\n-            existing_data = self._get_splits_and_unserialize(\n-                metric, [(key, split.aggregation)\n+            existing_data = self._get_splits_and_unserialize({\n+                metric: [(key, split.aggregation)\n                          for key, split\n-                         in six.moves.zip(keys_to_rewrite, splits_to_rewrite)])\n+                         in six.moves.zip(keys_to_rewrite, splits_to_rewrite)]\n+            })[metric]\n \n             for key, split, existing in six.moves.zip(\n                     keys_to_rewrite, splits_to_rewrite, existing_data):","changes":55},{"status":"modified","deletions":8,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/54c20a0eaf6e0774f6f67a0501222255834bead7\/gnocchi\/tests\/test_storage.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/54c20a0eaf6e0774f6f67a0501222255834bead7\/gnocchi\/tests\/test_storage.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/test_storage.py?ref=54c20a0eaf6e0774f6f67a0501222255834bead7","filename":"gnocchi\/tests\/test_storage.py","sha":"a824926015dc040599cce0b8d6db76214d14341c","additions":8,"patch":"@@ -76,14 +76,14 @@ def test_corrupted_split(self):\n \n         with mock.patch('gnocchi.carbonara.AggregatedTimeSerie.unserialize',\n                         side_effect=carbonara.InvalidData()):\n-            results = self.storage._get_splits_and_unserialize(\n-                self.metric,\n-                [\n+            results = self.storage._get_splits_and_unserialize({\n+                self.metric: [\n                     (carbonara.SplitKey(\n                         numpy.datetime64(1387800000, 's'),\n                         numpy.timedelta64(5, 'm')),\n                      aggregation)\n-                ])\n+                ],\n+            })[self.metric]\n             self.assertEqual(1, len(results))\n             self.assertIsInstance(results[0], carbonara.AggregatedTimeSerie)\n             # Assert it's an empty one since corrupted\n@@ -99,14 +99,14 @@ def test_get_splits_and_unserialize(self):\n         aggregation = self.metric.archive_policy.get_aggregation(\n             \"mean\", numpy.timedelta64(5, 'm'))\n \n-        results = self.storage._get_splits_and_unserialize(\n-            self.metric,\n-            [\n+        results = self.storage._get_splits_and_unserialize({\n+            self.metric: [\n                 (carbonara.SplitKey(\n                     numpy.datetime64(1387800000, 's'),\n                     numpy.timedelta64(5, 'm')),\n                  aggregation)\n-            ])\n+            ],\n+        })[self.metric]\n         self.assertEqual(1, len(results))\n         self.assertIsInstance(results[0], carbonara.AggregatedTimeSerie)\n         # Assert it's not empty one since corrupted","changes":16}],"committer":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"stats":{"deletions":34,"additions":37,"total":71},"author":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/54c20a0eaf6e0774f6f67a0501222255834bead7","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/54c20a0eaf6e0774f6f67a0501222255834bead7\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/54c20a0eaf6e0774f6f67a0501222255834bead7","sha":"54c20a0eaf6e0774f6f67a0501222255834bead7","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/df74dd8348ecc04bfbdab3507b0a55a0d1287afc","sha":"df74dd8348ecc04bfbdab3507b0a55a0d1287afc","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/df74dd8348ecc04bfbdab3507b0a55a0d1287afc"}],"commit":{"committer":{"date":"2018-03-16T14:25:21Z","name":"Julien Danjou","email":"julien@danjou.info"},"author":{"date":"2018-03-07T14:08:23Z","name":"Julien Danjou","email":"julien@danjou.info"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/54c20a0eaf6e0774f6f67a0501222255834bead7","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/cceb1c635853187b26191723ea52e1a059a031a5","sha":"cceb1c635853187b26191723ea52e1a059a031a5"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"storage: allow to unserialize splits for multiple metrics at once"}},{"files":[{"status":"modified","deletions":6,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/a72d42a41d0ca151f231aa4f483e7a2e47a717ec\/gnocchi\/storage\/__init__.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/a72d42a41d0ca151f231aa4f483e7a2e47a717ec\/gnocchi\/storage\/__init__.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/__init__.py?ref=a72d42a41d0ca151f231aa4f483e7a2e47a717ec","filename":"gnocchi\/storage\/__init__.py","sha":"19b842a03a7b12bb69e809eb1f9fda606f928131","additions":12,"patch":"@@ -352,6 +352,7 @@ def _update_metric_splits(self, metrics_keys_aggregations_splits):\n                                                   oldest_mutable_timestamp)\n         \"\"\"\n         metrics_splits_to_store = {}\n+        splits_to_get = {}\n \n         for metric, (keys_and_aggregations_and_splits,\n                      oldest_mutable_timestamp) in six.iteritems(\n@@ -373,14 +374,19 @@ def _update_metric_splits(self, metrics_keys_aggregations_splits):\n             # Update the splits that were passed as argument with the data\n             # already stored in the case that we need to rewrite them fully.\n             # First, fetch all those existing splits.\n-            existing_data = self._get_splits_and_unserialize({\n-                metric: [(key, split.aggregation)\n-                         for key, split\n-                         in six.moves.zip(keys_to_rewrite, splits_to_rewrite)]\n-            })[metric]\n+            splits_to_get[metric] = [\n+                (key, split.aggregation)\n+                for key, split\n+                in six.moves.zip(keys_to_rewrite, splits_to_rewrite)\n+            ]\n \n+        existing_data = self._get_splits_and_unserialize(splits_to_get)\n+\n+        for metric, (keys_and_aggregations_and_splits,\n+                     oldest_mutable_timestamp) in six.iteritems(\n+                         metrics_keys_aggregations_splits):\n             for key, split, existing in six.moves.zip(\n-                    keys_to_rewrite, splits_to_rewrite, existing_data):\n+                    keys_to_rewrite, splits_to_rewrite, existing_data[metric]):\n                 if existing:\n                     existing.merge(split)\n                     keys_and_aggregations_and_splits[","changes":18}],"committer":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"stats":{"deletions":6,"additions":12,"total":18},"author":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/a72d42a41d0ca151f231aa4f483e7a2e47a717ec","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/a72d42a41d0ca151f231aa4f483e7a2e47a717ec\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/a72d42a41d0ca151f231aa4f483e7a2e47a717ec","sha":"a72d42a41d0ca151f231aa4f483e7a2e47a717ec","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/54c20a0eaf6e0774f6f67a0501222255834bead7","sha":"54c20a0eaf6e0774f6f67a0501222255834bead7","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/54c20a0eaf6e0774f6f67a0501222255834bead7"}],"commit":{"committer":{"date":"2018-03-16T14:25:21Z","name":"Julien Danjou","email":"julien@danjou.info"},"author":{"date":"2018-03-08T16:36:04Z","name":"Julien Danjou","email":"julien@danjou.info"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/a72d42a41d0ca151f231aa4f483e7a2e47a717ec","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/a6aa05697401f2650128fe87de8b57ded4d9dc6c","sha":"a6aa05697401f2650128fe87de8b57ded4d9dc6c"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"storage: fetch all splits for all metrics at the same time"}},{"files":[{"status":"modified","deletions":3,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/8eb8cfb4026556c4818215b415f907fa2fd15e2e\/gnocchi\/storage\/__init__.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/8eb8cfb4026556c4818215b415f907fa2fd15e2e\/gnocchi\/storage\/__init__.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/__init__.py?ref=8eb8cfb4026556c4818215b415f907fa2fd15e2e","filename":"gnocchi\/storage\/__init__.py","sha":"6fc9eef65bd5bacc1328041e151669d44bb4c7d0","additions":25,"patch":"@@ -207,7 +207,7 @@ def _store_metric_splits(self, metrics_keys_aggregations_data_offset,\n              in keys_aggregations_data_offset))\n \n     @staticmethod\n-    def _list_split_keys(metric, aggregations, version=3):\n+    def _list_split_keys_unbatched(self, metric, aggregations, version=3):\n         \"\"\"List split keys for a metric.\n \n         :param metric: The metric to look key for.\n@@ -218,6 +218,28 @@ def _list_split_keys(metric, aggregations, version=3):\n         \"\"\"\n         raise NotImplementedError\n \n+    def _list_split_keys(self, metrics_and_aggregations, version=3):\n+        \"\"\"List split keys for metrics.\n+\n+        :param metrics_and_aggregations: Dict of\n+                                         {`storage.Metric`:\n+                                          [`carbonara.Aggregation`]}\n+                                         to look for.\n+        :param version: Storage engine format version.\n+        :return: A dict where keys are `storage.Metric` and values are dicts\n+                 where keys are `carbonara.Aggregation` objects and values are\n+                 a set of `carbonara.SplitKey` objects.\n+        \"\"\"\n+        metrics = list(metrics_and_aggregations.keys())\n+        r = utils.parallel_map(\n+            self._list_split_keys_unbatched,\n+            ((metric, metrics_and_aggregations[metric], version)\n+             for metric in metrics))\n+        return {\n+            metric: results\n+            for metric, results in six.moves.zip(metrics, r)\n+        }\n+\n     @staticmethod\n     def _version_check(name, v):\n \n@@ -236,7 +258,7 @@ def get_aggregated_measures(self, metric, aggregations,\n         :param from timestamp: The timestamp to get the measure from.\n         :param to timestamp: The timestamp to get the measure to.\n         \"\"\"\n-        keys = self._list_split_keys(metric, aggregations)\n+        keys = self._list_split_keys({metric: aggregations})[metric]\n         timeseries = utils.parallel_map(\n             self._get_measures_timeserie,\n             ((metric, agg, keys[agg], from_timestamp, to_timestamp)\n@@ -458,7 +480,7 @@ def _compute_split_operations(self, metric, aggregations_and_timeseries,\n                     aggregations_needing_list_of_keys.add(aggregation)\n \n         all_existing_keys = self._list_split_keys(\n-            metric, aggregations_needing_list_of_keys)\n+            {metric: aggregations_needing_list_of_keys})[metric]\n \n         # NOTE(jd) This dict uses (key, aggregation) tuples as keys because\n         # using just (key) would not carry the aggregation method and therefore","changes":28},{"status":"modified","deletions":1,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/8eb8cfb4026556c4818215b415f907fa2fd15e2e\/gnocchi\/storage\/ceph.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/8eb8cfb4026556c4818215b415f907fa2fd15e2e\/gnocchi\/storage\/ceph.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/ceph.py?ref=8eb8cfb4026556c4818215b415f907fa2fd15e2e","filename":"gnocchi\/storage\/ceph.py","sha":"3f9dd861600b6f22c1eff4f01442fe6072b7c1cc","additions":1,"patch":"@@ -159,7 +159,7 @@ def _get_splits_unbatched(self, metric, key, aggregation, version=3):\n         except rados.ObjectNotFound:\n             return\n \n-    def _list_split_keys(self, metric, aggregations, version=3):\n+    def _list_split_keys_unbatched(self, metric, aggregations, version=3):\n         with rados.ReadOpCtx() as op:\n             omaps, ret = self.ioctx.get_omap_vals(op, \"\", \"\", -1)\n             try:","changes":2},{"status":"modified","deletions":1,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/8eb8cfb4026556c4818215b415f907fa2fd15e2e\/gnocchi\/storage\/file.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/8eb8cfb4026556c4818215b415f907fa2fd15e2e\/gnocchi\/storage\/file.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/file.py?ref=8eb8cfb4026556c4818215b415f907fa2fd15e2e","filename":"gnocchi\/storage\/file.py","sha":"bb3049b85e2a32ef56e31f8c03215fbc91a1af42","additions":1,"patch":"@@ -125,7 +125,7 @@ def _get_or_create_unaggregated_timeseries_unbatched(\n         except storage.MetricAlreadyExists:\n             pass\n \n-    def _list_split_keys(self, metric, aggregations, version=3):\n+    def _list_split_keys_unbatched(self, metric, aggregations, version=3):\n         keys = collections.defaultdict(set)\n         for method, grouped_aggregations in itertools.groupby(\n                 sorted(aggregations, key=ATTRGETTER_METHOD),","changes":2},{"status":"modified","deletions":37,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/8eb8cfb4026556c4818215b415f907fa2fd15e2e\/gnocchi\/storage\/redis.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/8eb8cfb4026556c4818215b415f907fa2fd15e2e\/gnocchi\/storage\/redis.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/redis.py?ref=8eb8cfb4026556c4818215b415f907fa2fd15e2e","filename":"gnocchi\/storage\/redis.py","sha":"0fd6614e2ae65ce2bcbd42f44b1a9e24b5428cda","additions":55,"patch":"@@ -13,6 +13,8 @@\n # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n # License for the specific language governing permissions and limitations\n # under the License.\n+import collections\n+\n import six\n \n from gnocchi import carbonara\n@@ -95,35 +97,44 @@ def _get_or_create_unaggregated_timeseries(self, metrics, version=3):\n         }\n         return ts\n \n-    def _list_split_keys(self, metric, aggregations, version=3):\n-        key = self._metric_key(metric)\n+    def _list_split_keys(self, metrics_and_aggregations, version=3):\n         pipe = self._client.pipeline(transaction=False)\n-        pipe.exists(key)\n-        for aggregation in aggregations:\n-            self._scripts[\"list_split_keys\"](\n-                keys=[key], args=[self._aggregated_field_for_split(\n-                    aggregation.method, \"*\",\n-                    version, aggregation.granularity)],\n-                client=pipe,\n-            )\n+        # Keep an ordered list of metrics\n+        metrics = list(metrics_and_aggregations.keys())\n+        for metric in metrics:\n+            key = self._metric_key(metric)\n+            pipe.exists(key)\n+            aggregations = metrics_and_aggregations[metric]\n+            for aggregation in aggregations:\n+                self._scripts[\"list_split_keys\"](\n+                    keys=[key], args=[self._aggregated_field_for_split(\n+                        aggregation.method, \"*\",\n+                        version, aggregation.granularity)],\n+                    client=pipe,\n+                )\n         results = pipe.execute()\n-        metric_exists_p = results.pop(0)\n-        if not metric_exists_p:\n-            raise storage.MetricDoesNotExist(metric)\n-        keys = {}\n-        for aggregation, k in six.moves.zip(aggregations, results):\n-            if not k:\n-                keys[aggregation] = set()\n-                continue\n-            timestamps, methods, granularities = list(zip(*k))\n-            timestamps = utils.to_timestamps(timestamps)\n-            granularities = map(utils.to_timespan, granularities)\n-            keys[aggregation] = {\n-                carbonara.SplitKey(timestamp,\n-                                   sampling=granularity)\n-                for timestamp, granularity\n-                in six.moves.zip(timestamps, granularities)\n-            }\n+        keys = collections.defaultdict(dict)\n+        for metric in metrics:\n+            metric_exists_p = results.pop(0)\n+            if not metric_exists_p:\n+                raise storage.MetricDoesNotExist(metric)\n+            aggregations = metrics_and_aggregations[metric]\n+            keys_for_aggregations = results[:len(aggregations)]\n+            del results[:len(aggregations)]\n+            for aggregation, k in six.moves.zip(\n+                    aggregations, keys_for_aggregations):\n+                if not k:\n+                    keys[metric][aggregation] = set()\n+                    continue\n+                timestamps, methods, granularities = list(zip(*k))\n+                timestamps = utils.to_timestamps(timestamps)\n+                granularities = map(utils.to_timespan, granularities)\n+                keys[metric][aggregation] = {\n+                    carbonara.SplitKey(timestamp,\n+                                       sampling=granularity)\n+                    for timestamp, granularity\n+                    in six.moves.zip(timestamps, granularities)\n+                }\n         return keys\n \n     def _delete_metric_splits(self, metrics_keys_aggregations, version=3):\n@@ -155,13 +166,20 @@ def _get_splits(self, metrics_keys_aggregations, version=3):\n         pipe = self._client.pipeline(transaction=False)\n         # Use a list of metric with a constant sorting\n         metrics = list(metrics_keys_aggregations.keys())\n-        for metric in metrics:\n-            pipe.hmget(\n-                self._metric_key(metric),\n-                [self._aggregated_field_for_split(aggregation.method,\n-                                                  key, version)\n-                 for key, aggregation in metrics_keys_aggregations[metric]])\n-        return {\n-            metric: splits\n-            for metric, splits in six.moves.zip(metrics, pipe.execute())\n-        }\n+        results = {}\n+        for metric in list(metrics):\n+            keys_and_aggregations = metrics_keys_aggregations[metric]\n+            if keys_and_aggregations:\n+                pipe.hmget(\n+                    self._metric_key(metric),\n+                    [self._aggregated_field_for_split(aggregation.method,\n+                                                      key, version)\n+                     for key, aggregation in keys_and_aggregations])\n+            else:\n+                metrics.remove(metric)\n+                results[metric] = []\n+\n+        for metric, splits in six.moves.zip(metrics, pipe.execute()):\n+            results[metric] = splits\n+\n+        return results","changes":92},{"status":"modified","deletions":1,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/8eb8cfb4026556c4818215b415f907fa2fd15e2e\/gnocchi\/storage\/s3.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/8eb8cfb4026556c4818215b415f907fa2fd15e2e\/gnocchi\/storage\/s3.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/s3.py?ref=8eb8cfb4026556c4818215b415f907fa2fd15e2e","filename":"gnocchi\/storage\/s3.py","sha":"16b73e5cc897f4f0db400404accb67e5a4523949","additions":1,"patch":"@@ -178,7 +178,7 @@ def _metric_exists_p(self, metric, version):\n             raise\n         return True\n \n-    def _list_split_keys(self, metric, aggregations, version=3):\n+    def _list_split_keys_unbatched(self, metric, aggregations, version=3):\n         bucket = self._bucket_name\n         keys = {}\n         for aggregation in aggregations:","changes":2},{"status":"modified","deletions":1,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/8eb8cfb4026556c4818215b415f907fa2fd15e2e\/gnocchi\/storage\/swift.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/8eb8cfb4026556c4818215b415f907fa2fd15e2e\/gnocchi\/storage\/swift.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/swift.py?ref=8eb8cfb4026556c4818215b415f907fa2fd15e2e","filename":"gnocchi\/storage\/swift.py","sha":"9fbb41eac802cdbd4be2a0c673cc92feb2fba9fb","additions":1,"patch":"@@ -158,7 +158,7 @@ def _get_splits_unbatched(self, metric, key, aggregation, version=3):\n             raise\n         return contents\n \n-    def _list_split_keys(self, metric, aggregations, version=3):\n+    def _list_split_keys_unbatched(self, metric, aggregations, version=3):\n         container = self._container_name(metric)\n         try:\n             headers, files = self.swift.get_container(","changes":2},{"status":"modified","deletions":71,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/8eb8cfb4026556c4818215b415f907fa2fd15e2e\/gnocchi\/tests\/test_storage.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/8eb8cfb4026556c4818215b415f907fa2fd15e2e\/gnocchi\/tests\/test_storage.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/test_storage.py?ref=8eb8cfb4026556c4818215b415f907fa2fd15e2e","filename":"gnocchi\/tests\/test_storage.py","sha":"36666621fe96a2e974184962e1b9ff42aec9ea08","additions":81,"patch":"@@ -350,26 +350,27 @@ def test_delete_old_measures(self):\n         agg = self.metric.archive_policy.get_aggregation(\n             \"mean\", numpy.timedelta64(1, 'D'))\n         self.assertEqual({\n-            agg: {carbonara.SplitKey(numpy.datetime64(1244160000, 's'),\n-                                     numpy.timedelta64(1, 'D'))},\n-        }, self.storage._list_split_keys(\n-            self.metric, [agg]))\n+            self.metric: {\n+                agg: {carbonara.SplitKey(numpy.datetime64(1244160000, 's'),\n+                                         numpy.timedelta64(1, 'D'))},\n+            },\n+        }, self.storage._list_split_keys({self.metric: [agg]}))\n         agg = self.metric.archive_policy.get_aggregation(\n             \"mean\", numpy.timedelta64(1, 'h'))\n         self.assertEqual({\n-            agg: {carbonara.SplitKey(numpy.datetime64(1412640000, 's'),\n-                                     numpy.timedelta64(1, 'h'))},\n-        }, self.storage._list_split_keys(\n-            self.metric, [agg],\n-        ))\n+            self.metric: {\n+                agg: {carbonara.SplitKey(numpy.datetime64(1412640000, 's'),\n+                                         numpy.timedelta64(1, 'h'))},\n+            },\n+        }, self.storage._list_split_keys({self.metric: [agg]}))\n         agg = self.metric.archive_policy.get_aggregation(\n             \"mean\", numpy.timedelta64(5, 'm'))\n         self.assertEqual({\n-            agg: {carbonara.SplitKey(numpy.datetime64(1419120000, 's'),\n-                                     numpy.timedelta64(5, 'm'))},\n-        }, self.storage._list_split_keys(\n-            self.metric, [agg],\n-        ))\n+            self.metric: {\n+                agg: {carbonara.SplitKey(numpy.datetime64(1419120000, 's'),\n+                                         numpy.timedelta64(5, 'm'))},\n+            }\n+        }, self.storage._list_split_keys({self.metric: [agg]}))\n \n     def test_get_measures_return(self):\n         self.incoming.add_measures(self.metric.id, [\n@@ -472,15 +473,17 @@ def test_rewrite_measures(self):\n         agg = self.metric.archive_policy.get_aggregation(\n             \"mean\", numpy.timedelta64(1, 'm'))\n         self.assertEqual({\n-            agg: {\n-                carbonara.SplitKey(numpy.datetime64(1451520000, 's'),\n-                                   numpy.timedelta64(1, 'm')),\n-                carbonara.SplitKey(numpy.datetime64(1451736000, 's'),\n-                                   numpy.timedelta64(1, 'm')),\n-                carbonara.SplitKey(numpy.datetime64(1451952000, 's'),\n-                                   numpy.timedelta64(1, 'm')),\n-            },\n-        }, self.storage._list_split_keys(self.metric, [agg]))\n+            self.metric: {\n+                agg: {\n+                    carbonara.SplitKey(numpy.datetime64(1451520000, 's'),\n+                                       numpy.timedelta64(1, 'm')),\n+                    carbonara.SplitKey(numpy.datetime64(1451736000, 's'),\n+                                       numpy.timedelta64(1, 'm')),\n+                    carbonara.SplitKey(numpy.datetime64(1451952000, 's'),\n+                                       numpy.timedelta64(1, 'm')),\n+                },\n+            }\n+        }, self.storage._list_split_keys({self.metric: [agg]}))\n \n         if self.storage.WRITE_FULL:\n             assertCompressedIfWriteFull = self.assertTrue\n@@ -530,17 +533,19 @@ def test_rewrite_measures(self):\n         agg = self.metric.archive_policy.get_aggregation(\n             \"mean\", numpy.timedelta64(1, 'm'))\n         self.assertEqual({\n-            agg: {\n-                carbonara.SplitKey(numpy.datetime64(1452384000, 's'),\n-                                   numpy.timedelta64(1, 'm')),\n-                carbonara.SplitKey(numpy.datetime64(1451736000, 's'),\n-                                   numpy.timedelta64(1, 'm')),\n-                carbonara.SplitKey(numpy.datetime64(1451520000, 's'),\n-                                   numpy.timedelta64(1, 'm')),\n-                carbonara.SplitKey(numpy.datetime64(1451952000, 's'),\n-                                   numpy.timedelta64(1, 'm')),\n+            self.metric: {\n+                agg: {\n+                    carbonara.SplitKey(numpy.datetime64(1452384000, 's'),\n+                                       numpy.timedelta64(1, 'm')),\n+                    carbonara.SplitKey(numpy.datetime64(1451736000, 's'),\n+                                       numpy.timedelta64(1, 'm')),\n+                    carbonara.SplitKey(numpy.datetime64(1451520000, 's'),\n+                                       numpy.timedelta64(1, 'm')),\n+                    carbonara.SplitKey(numpy.datetime64(1451952000, 's'),\n+                                       numpy.timedelta64(1, 'm')),\n+                },\n             },\n-        }, self.storage._list_split_keys(self.metric, [agg]))\n+        }, self.storage._list_split_keys({self.metric: [agg]}))\n         data = self.storage._get_splits({\n             self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451520000, 's'),\n@@ -600,15 +605,17 @@ def test_rewrite_measures_oldest_mutable_timestamp_eq_next_key(self):\n         agg = self.metric.archive_policy.get_aggregation(\n             \"mean\", numpy.timedelta64(1, 'm'))\n         self.assertEqual({\n-            agg: {\n-                carbonara.SplitKey(numpy.datetime64(1451520000, 's'),\n-                                   numpy.timedelta64(1, 'm')),\n-                carbonara.SplitKey(numpy.datetime64(1451736000, 's'),\n-                                   numpy.timedelta64(1, 'm')),\n-                carbonara.SplitKey(numpy.datetime64(1451952000, 's'),\n-                                   numpy.timedelta64(1, 'm')),\n+            self.metric: {\n+                agg: {\n+                    carbonara.SplitKey(numpy.datetime64(1451520000, 's'),\n+                                       numpy.timedelta64(1, 'm')),\n+                    carbonara.SplitKey(numpy.datetime64(1451736000, 's'),\n+                                       numpy.timedelta64(1, 'm')),\n+                    carbonara.SplitKey(numpy.datetime64(1451952000, 's'),\n+                                       numpy.timedelta64(1, 'm')),\n+                },\n             },\n-        }, self.storage._list_split_keys(self.metric, [agg]))\n+        }, self.storage._list_split_keys({self.metric: [agg]}))\n \n         if self.storage.WRITE_FULL:\n             assertCompressedIfWriteFull = self.assertTrue\n@@ -660,17 +667,19 @@ def test_rewrite_measures_oldest_mutable_timestamp_eq_next_key(self):\n         agg = self.metric.archive_policy.get_aggregation(\n             \"mean\", numpy.timedelta64(1, 'm'))\n         self.assertEqual({\n-            agg: {\n-                carbonara.SplitKey(numpy.datetime64('2016-01-10T00:00:00'),\n-                                   numpy.timedelta64(1, 'm')),\n-                carbonara.SplitKey(numpy.datetime64('2016-01-02T12:00:00'),\n-                                   numpy.timedelta64(1, 'm')),\n-                carbonara.SplitKey(numpy.datetime64('2015-12-31T00:00:00'),\n-                                   numpy.timedelta64(1, 'm')),\n-                carbonara.SplitKey(numpy.datetime64('2016-01-05T00:00:00'),\n-                                   numpy.timedelta64(1, 'm')),\n-            }\n-        }, self.storage._list_split_keys(self.metric, [agg]))\n+            self.metric: {\n+                agg: {\n+                    carbonara.SplitKey(numpy.datetime64('2016-01-10T00:00:00'),\n+                                       numpy.timedelta64(1, 'm')),\n+                    carbonara.SplitKey(numpy.datetime64('2016-01-02T12:00:00'),\n+                                       numpy.timedelta64(1, 'm')),\n+                    carbonara.SplitKey(numpy.datetime64('2015-12-31T00:00:00'),\n+                                       numpy.timedelta64(1, 'm')),\n+                    carbonara.SplitKey(numpy.datetime64('2016-01-05T00:00:00'),\n+                                       numpy.timedelta64(1, 'm')),\n+                },\n+            },\n+        }, self.storage._list_split_keys({self.metric: [agg]}))\n         data = self.storage._get_splits({\n             self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451520000, 's'),\n@@ -728,18 +737,17 @@ def test_rewrite_measures_corruption_missing_file(self):\n         agg = self.metric.archive_policy.get_aggregation(\n             \"mean\", numpy.timedelta64(1, 'm'))\n         self.assertEqual({\n-            agg: {\n-                carbonara.SplitKey(numpy.datetime64('2015-12-31T00:00:00'),\n-                                   numpy.timedelta64(1, 'm')),\n-                carbonara.SplitKey(numpy.datetime64('2016-01-02T12:00:00'),\n-                                   numpy.timedelta64(1, 'm')),\n-                carbonara.SplitKey(numpy.datetime64('2016-01-05T00:00:00'),\n-                                   numpy.timedelta64(1, 'm')),\n+            self.metric: {\n+                agg: {\n+                    carbonara.SplitKey(numpy.datetime64('2015-12-31T00:00:00'),\n+                                       numpy.timedelta64(1, 'm')),\n+                    carbonara.SplitKey(numpy.datetime64('2016-01-02T12:00:00'),\n+                                       numpy.timedelta64(1, 'm')),\n+                    carbonara.SplitKey(numpy.datetime64('2016-01-05T00:00:00'),\n+                                       numpy.timedelta64(1, 'm')),\n+                },\n             },\n-        }, self.storage._list_split_keys(\n-            self.metric,\n-            [agg],\n-        ))\n+        }, self.storage._list_split_keys({self.metric: [agg]}))\n         if self.storage.WRITE_FULL:\n             assertCompressedIfWriteFull = self.assertTrue\n         else:\n@@ -820,15 +828,17 @@ def test_rewrite_measures_corruption_bad_data(self):\n         agg = self.metric.archive_policy.get_aggregation(\n             \"mean\", numpy.timedelta64(1, 'm'))\n         self.assertEqual({\n-            agg: {\n-                carbonara.SplitKey(numpy.datetime64(1451520000, 's'),\n-                                   numpy.timedelta64(1, 'm')),\n-                carbonara.SplitKey(numpy.datetime64(1451736000, 's'),\n-                                   numpy.timedelta64(1, 'm')),\n-                carbonara.SplitKey(numpy.datetime64(1451952000, 's'),\n-                                   numpy.timedelta64(1, 'm')),\n+            self.metric: {\n+                agg: {\n+                    carbonara.SplitKey(numpy.datetime64(1451520000, 's'),\n+                                       numpy.timedelta64(1, 'm')),\n+                    carbonara.SplitKey(numpy.datetime64(1451736000, 's'),\n+                                       numpy.timedelta64(1, 'm')),\n+                    carbonara.SplitKey(numpy.datetime64(1451952000, 's'),\n+                                       numpy.timedelta64(1, 'm')),\n+                },\n             },\n-        }, self.storage._list_split_keys(self.metric, [agg]))\n+        }, self.storage._list_split_keys({self.metric: [agg]}))\n \n         if self.storage.WRITE_FULL:\n             assertCompressedIfWriteFull = self.assertTrue","changes":152}],"committer":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"stats":{"deletions":115,"additions":165,"total":280},"author":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/8eb8cfb4026556c4818215b415f907fa2fd15e2e","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/8eb8cfb4026556c4818215b415f907fa2fd15e2e\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/8eb8cfb4026556c4818215b415f907fa2fd15e2e","sha":"8eb8cfb4026556c4818215b415f907fa2fd15e2e","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/a72d42a41d0ca151f231aa4f483e7a2e47a717ec","sha":"a72d42a41d0ca151f231aa4f483e7a2e47a717ec","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/a72d42a41d0ca151f231aa4f483e7a2e47a717ec"}],"commit":{"committer":{"date":"2018-03-16T14:25:22Z","name":"Julien Danjou","email":"julien@danjou.info"},"author":{"date":"2018-03-08T16:25:08Z","name":"Julien Danjou","email":"julien@danjou.info"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/8eb8cfb4026556c4818215b415f907fa2fd15e2e","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/c961c0214d3522869a0f62a83ba53004c5b86fff","sha":"c961c0214d3522869a0f62a83ba53004c5b86fff"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"storage: allow to list split keys for different metric at the same time"}},{"files":[{"status":"modified","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/aa5e571cb6aaaa352a59d6985429e153ebe89a22\/gnocchi\/cli\/metricd.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/aa5e571cb6aaaa352a59d6985429e153ebe89a22\/gnocchi\/cli\/metricd.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/cli\/metricd.py?ref=aa5e571cb6aaaa352a59d6985429e153ebe89a22","filename":"gnocchi\/cli\/metricd.py","sha":"859efea4e1ea69539f7757b50ae86d0104c10b03","additions":2,"patch":"@@ -242,6 +242,8 @@ def _run_job(self):\n                 LOG.error(\"Unexpected error processing assigned job\",\n                           exc_info=True)\n         LOG.debug(\"%d metrics processed from %d sacks\", m_count, s_count)\n+        # Update statistics\n+        self.coord.update_capabitilities(self.GROUP_ID, self.statistics)\n         if sacks == self._get_sacks_to_process():\n             # We just did a full scan of all sacks, reset the timer\n             self._last_full_sack_scan.reset()","changes":2},{"status":"modified","deletions":1,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/aa5e571cb6aaaa352a59d6985429e153ebe89a22\/gnocchi\/rest\/api.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/aa5e571cb6aaaa352a59d6985429e153ebe89a22\/gnocchi\/rest\/api.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/rest\/api.py?ref=aa5e571cb6aaaa352a59d6985429e153ebe89a22","filename":"gnocchi\/rest\/api.py","sha":"6bb910323c3112f259196c32c665b039ef664387","additions":12,"patch":"@@ -2005,9 +2005,20 @@ def get(details=True):\n             report_dict[\"storage\"][\"measures_to_process\"] = report['details']\n         report_dict['metricd'] = {}\n         if members_req:\n-            report_dict['metricd']['processors'] = members_req.get()\n+            members = members_req.get()\n+            caps = [\n+                pecan.request.coordinator.get_member_capabilities(\n+                    metricd.MetricProcessor.GROUP_ID, member)\n+                for member in members\n+            ]\n+            report_dict['metricd']['processors'] = members\n+            report_dict['metricd']['statistics'] = {\n+                member: cap.get()\n+                for member, cap in six.moves.zip(members, caps)\n+            }\n         else:\n             report_dict['metricd']['processors'] = None\n+            report_dict['metricd']['statistics'] = {}\n         return report_dict\n \n ","changes":13},{"status":"modified","deletions":24,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/aa5e571cb6aaaa352a59d6985429e153ebe89a22\/gnocchi\/storage\/__init__.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/aa5e571cb6aaaa352a59d6985429e153ebe89a22\/gnocchi\/storage\/__init__.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/__init__.py?ref=aa5e571cb6aaaa352a59d6985429e153ebe89a22","filename":"gnocchi\/storage\/__init__.py","sha":"a1701e042768a57cf4c5ae7b0b8eabbacf8a02fb","additions":37,"patch":"@@ -98,11 +98,31 @@ def get_driver(conf):\n         conf.storage)\n \n \n+class Statistics(collections.defaultdict):\n+    class StatisticsTimeContext(object):\n+        def __init__(self, stats, name):\n+            self.stats = stats\n+            self.name = name + \" time\"\n+\n+        def __enter__(self):\n+            self.sw = utils.StopWatch()\n+            self.sw.start()\n+            return self\n+\n+        def __exit__(self, type, value, traceback):\n+            self.stats[self.name] += self.sw.elapsed()\n+\n+    def __init__(self):\n+        super(Statistics, self).__init__(lambda: 0)\n+\n+    def time(self, name):\n+        return self.StatisticsTimeContext(self, name)\n+\n+\n class StorageDriver(object):\n \n-    @staticmethod\n-    def __init__(conf):\n-        pass\n+    def __init__(self, conf):\n+        self.statistics = Statistics()\n \n     @staticmethod\n     def upgrade():\n@@ -575,11 +595,12 @@ def add_measures_to_metrics(self, metrics_and_measures):\n                                      objects and values are timeseries array of\n                                      the new measures.\n         \"\"\"\n-        with utils.StopWatch() as sw:\n+        with self.statistics.time(\"raw measures fetch\"):\n             raw_measures = self._get_or_create_unaggregated_timeseries(\n                 metrics_and_measures.keys())\n-        LOG.debug(\"Retrieve unaggregated measures for %d metric in %.2fs\",\n-                  len(metrics_and_measures), sw.elapsed())\n+        self.statistics[\"raw measures fetch\"] += len(metrics_and_measures)\n+        self.statistics[\"processed measures\"] += sum(\n+            map(len, metrics_and_measures.values()))\n \n         new_boundts = []\n         splits_to_delete = {}\n@@ -594,7 +615,6 @@ def add_measures_to_metrics(self, metrics_and_measures):\n             agg_methods = list(metric.archive_policy.aggregation_methods)\n             block_size = metric.archive_policy.max_block_size\n             back_window = metric.archive_policy.back_window\n-            definition = metric.archive_policy.definition\n             # NOTE(sileht): We keep one more blocks to calculate rate of change\n             # correctly\n             if any(filter(lambda x: x.startswith(\"rate:\"), agg_methods)):\n@@ -667,7 +687,7 @@ def _map_compute_splits_operations(bound_timeserie):\n                         deleted_keys,\n                         keys_and_split_to_store)\n \n-            with utils.StopWatch() as sw:\n+            with self.statistics.time(\"aggregated measures compute\"):\n                 (new_first_block_timestamp,\n                  deleted_keys,\n                  keys_and_splits_to_store) = ts.set_values(\n@@ -681,22 +701,15 @@ def _map_compute_splits_operations(bound_timeserie):\n \n             new_boundts.append((metric, ts.serialize()))\n \n-            number_of_operations = (len(agg_methods) * len(definition))\n-            perf = \"\"\n-            elapsed = sw.elapsed()\n-            if elapsed > 0:\n-                perf = \" (%d points\/s, %d measures\/s)\" % (\n-                    ((number_of_operations * computed_points['number']) \/\n-                        elapsed),\n-                    ((number_of_operations * len(measures)) \/ elapsed)\n-                )\n-            LOG.debug(\"Computed new metric %s with %d new measures \"\n-                      \"in %.2f seconds%s\",\n-                      metric.id, len(measures), elapsed, perf)\n-\n-        self._delete_metric_splits(splits_to_delete)\n-        self._update_metric_splits(splits_to_update)\n-        self._store_unaggregated_timeseries(new_boundts)\n+        with self.statistics.time(\"splits delete\"):\n+            self._delete_metric_splits(splits_to_delete)\n+        self.statistics[\"splits delete\"] += len(splits_to_delete)\n+        with self.statistics.time(\"splits update\"):\n+            self._update_metric_splits(splits_to_update)\n+        self.statistics[\"splits delete\"] += len(splits_to_update)\n+        with self.statistics.time(\"raw measures store\"):\n+            self._store_unaggregated_timeseries(new_boundts)\n+        self.statistics[\"raw measures store\"] += len(new_boundts)\n \n     def find_measure(self, metric, predicate, granularity, aggregation=\"mean\",\n                      from_timestamp=None, to_timestamp=None):","changes":61},{"status":"modified","deletions":2,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/aa5e571cb6aaaa352a59d6985429e153ebe89a22\/gnocchi\/tests\/functional\/gabbits\/base.yaml","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/aa5e571cb6aaaa352a59d6985429e153ebe89a22\/gnocchi\/tests\/functional\/gabbits\/base.yaml","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/functional\/gabbits\/base.yaml?ref=aa5e571cb6aaaa352a59d6985429e153ebe89a22","filename":"gnocchi\/tests\/functional\/gabbits\/base.yaml","sha":"fdde5f496a7dd14f9ac312c2eef4aef084643caf","additions":2,"patch":"@@ -132,7 +132,7 @@ tests:\n     authorization: \"basic YWRtaW46\"\n   response_json_paths:\n     $.storage.`len`: 2\n-    $.metricd.`len`: 1\n+    $.metricd.`len`: 2\n \n - name: get status, no details\n   GET: \/v1\/status?details=False\n@@ -141,4 +141,4 @@ tests:\n     authorization: \"basic YWRtaW46\"\n   response_json_paths:\n     $.storage.`len`: 1\n-    $.metricd.`len`: 1\n+    $.metricd.`len`: 2","changes":4}],"committer":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"stats":{"deletions":27,"additions":53,"total":80},"author":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/aa5e571cb6aaaa352a59d6985429e153ebe89a22","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/aa5e571cb6aaaa352a59d6985429e153ebe89a22\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/aa5e571cb6aaaa352a59d6985429e153ebe89a22","sha":"aa5e571cb6aaaa352a59d6985429e153ebe89a22","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/8eb8cfb4026556c4818215b415f907fa2fd15e2e","sha":"8eb8cfb4026556c4818215b415f907fa2fd15e2e","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/8eb8cfb4026556c4818215b415f907fa2fd15e2e"}],"commit":{"committer":{"date":"2018-03-16T14:25:22Z","name":"Julien Danjou","email":"julien@danjou.info"},"author":{"date":"2018-03-12T16:05:11Z","name":"Julien Danjou","email":"julien@danjou.info"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/aa5e571cb6aaaa352a59d6985429e153ebe89a22","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/56f64939809ef86ce710cf6413e5d31725699c49","sha":"56f64939809ef86ce710cf6413e5d31725699c49"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"metricd: publish statistics about processing speed\n\nCloses #600"}},{"files":[{"status":"modified","deletions":6,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/5300f9224ac138800025472bf6f42e5073757335\/gnocchi\/cli\/metricd.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/5300f9224ac138800025472bf6f42e5073757335\/gnocchi\/cli\/metricd.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/cli\/metricd.py?ref=5300f9224ac138800025472bf6f42e5073757335","filename":"gnocchi\/cli\/metricd.py","sha":"9344d52397ccd20b3926b6d859fddf6c7fa2e3ff","additions":7,"patch":"@@ -297,14 +297,15 @@ def metricd_tester(conf):\n     index = indexer.get_driver(conf)\n     s = storage.get_driver(conf)\n     inc = incoming.get_driver(conf)\n-    metrics = set()\n+    c = chef.Chef(None, inc, index, s)\n+    metrics_count = 0\n     for sack in inc.iter_sacks():\n-        metrics.update(inc.list_metric_with_measures_to_process(sack))\n-        if len(metrics) >= conf.stop_after_processing_metrics:\n+        try:\n+            metrics_count += c.process_new_measures_for_sack(s, True)\n+        except chef.SackAlreadyLocked:\n+            continue\n+        if metrics_count >= conf.stop_after_processing_metrics:\n             break\n-    c = chef.Chef(None, inc, index, s)\n-    c.process_new_measures(\n-        list(metrics)[:conf.stop_after_processing_metrics], True)\n \n \n def metricd():","changes":13}],"committer":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"stats":{"deletions":6,"additions":7,"total":13},"author":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/5300f9224ac138800025472bf6f42e5073757335","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/5300f9224ac138800025472bf6f42e5073757335\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/5300f9224ac138800025472bf6f42e5073757335","sha":"5300f9224ac138800025472bf6f42e5073757335","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/aa5e571cb6aaaa352a59d6985429e153ebe89a22","sha":"aa5e571cb6aaaa352a59d6985429e153ebe89a22","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/aa5e571cb6aaaa352a59d6985429e153ebe89a22"}],"commit":{"committer":{"date":"2018-03-16T14:25:22Z","name":"Julien Danjou","email":"julien@danjou.info"},"author":{"date":"2018-03-13T08:43:35Z","name":"Julien Danjou","email":"julien@danjou.info"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/5300f9224ac138800025472bf6f42e5073757335","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/8f1990c6497468ab93ae6fe86efdef89a372be30","sha":"8f1990c6497468ab93ae6fe86efdef89a372be30"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"metricd: use process_new_measures_for_sack in test code"}},{"files":[{"status":"modified","deletions":5,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/fd297c0edd0e4f24bf102a7768bf84983a564f29\/gnocchi\/tests\/functional\/fixtures.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/fd297c0edd0e4f24bf102a7768bf84983a564f29\/gnocchi\/tests\/functional\/fixtures.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/functional\/fixtures.py?ref=fd297c0edd0e4f24bf102a7768bf84983a564f29","filename":"gnocchi\/tests\/functional\/fixtures.py","sha":"50187086903f2600f11d284cf7b1d59254ef8f7e","additions":2,"patch":"@@ -257,11 +257,8 @@ def __init__(self, chef, name='metricd'):\n \n     def run(self):\n         while self.flag:\n-            metrics = utils.list_all_incoming_metrics(self.chef.incoming)\n-            metrics = self.chef.index.list_metrics(\n-                attribute_filter={\"in\": {\"id\": metrics}})\n-            for metric in metrics:\n-                self.chef.refresh_metric(metric, timeout=None)\n+            for sack in self.chef.incoming.iter_sacks():\n+                self.chef.process_new_measures_for_sack(sack)\n             time.sleep(0.1)\n \n     def stop(self):","changes":7}],"committer":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"stats":{"deletions":5,"additions":2,"total":7},"author":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/fd297c0edd0e4f24bf102a7768bf84983a564f29","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/fd297c0edd0e4f24bf102a7768bf84983a564f29\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/fd297c0edd0e4f24bf102a7768bf84983a564f29","sha":"fd297c0edd0e4f24bf102a7768bf84983a564f29","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/5300f9224ac138800025472bf6f42e5073757335","sha":"5300f9224ac138800025472bf6f42e5073757335","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/5300f9224ac138800025472bf6f42e5073757335"}],"commit":{"committer":{"date":"2018-03-16T14:25:22Z","name":"Julien Danjou","email":"julien@danjou.info"},"author":{"date":"2018-03-13T08:51:40Z","name":"Julien Danjou","email":"julien@danjou.info"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/fd297c0edd0e4f24bf102a7768bf84983a564f29","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/9e60d4c86a7877bb8dc32eab912e2742e0bb6a21","sha":"9e60d4c86a7877bb8dc32eab912e2742e0bb6a21"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"tests: process sack by sack rather than metric by metric in functional tests"}},{"files":[{"status":"modified","deletions":27,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/45370f5edbb7e3b056cd34531592c222bed317d9\/gnocchi\/chef.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/45370f5edbb7e3b056cd34531592c222bed317d9\/gnocchi\/chef.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/chef.py?ref=45370f5edbb7e3b056cd34531592c222bed317d9","filename":"gnocchi\/chef.py","sha":"e26bc487faf0cd66f6c194f43e8e4740b82d3229","additions":30,"patch":"@@ -102,57 +102,60 @@ def expunge_metrics(self, sync=False):\n                         LOG.error(\"Unable to expunge metric %s from storage\",\n                                   metric, exc_info=True)\n \n-    def refresh_metric(self, metric, timeout):\n-        s = self.incoming.sack_for_metric(metric.id)\n-        lock = self.get_sack_lock(s)\n-        if not lock.acquire(blocking=timeout):\n-            raise SackAlreadyLocked(s)\n-        try:\n-            self.process_new_measures([str(metric.id)])\n-        finally:\n-            lock.release()\n-\n-    def process_new_measures(self, metrics_to_process, sync=False):\n-        \"\"\"Process added measures in background.\n+    def refresh_metrics(self, metrics, timeout=None, sync=False):\n+        \"\"\"Process added measures in background for some metrics only.\n \n-        Some drivers might need to have a background task running that process\n-        the measures sent to metrics. This is used for that.\n+        :param metrics: The list of `indexer.Metric` to refresh.\n+        :param timeout: Time to wait for the process to happen.\n+        :param sync: If an error occurs, raise, otherwise just log it.\n         \"\"\"\n         # process only active metrics. deleted metrics with unprocessed\n         # measures will be skipped until cleaned by janitor.\n-        metrics = self.index.list_metrics(\n-            attribute_filter={\"in\": {\"id\": metrics_to_process}})\n         metrics_by_id = {m.id: m for m in metrics}\n-        # NOTE(gordc): must lock at sack level\n-        try:\n-            LOG.debug(\"Processing measures for %s\", metrics)\n-            with self.incoming.process_measure_for_metrics(\n-                    [m.id for m in metrics]) as metrics_and_measures:\n+        metrics_to_refresh = sorted(\n+            ((metric, self.incoming.sack_for_metric(metric.id))\n+             for metric in metrics),\n+            key=ITEMGETTER_1)\n+        for sack, metric_and_sack in itertools.groupby(\n+                metrics_to_refresh, ITEMGETTER_1):\n+            lock = self.get_sack_lock(sack)\n+            # FIXME(jd) timeout should be global for all sack locking\n+            if not lock.acquire(blocking=timeout):\n+                raise SackAlreadyLocked(sack)\n+            metrics = [m[0].id for m in metric_and_sack]\n+            try:\n+                LOG.debug(\"Processing measures for %d metrics\", len(metrics))\n+                with self.incoming.process_measure_for_metrics(\n+                        metrics) as metrics_and_measures:\n                     self.storage.add_measures_to_metrics({\n                         metrics_by_id[metric]: measures\n                         for metric, measures\n                         in six.iteritems(metrics_and_measures)\n                     })\n                     LOG.debug(\"Measures for %d metrics processed\",\n                               len(metrics))\n-        except Exception:\n-            if sync:\n-                raise\n-            LOG.error(\"Error processing new measures\", exc_info=True)\n+            except Exception:\n+                if sync:\n+                    raise\n+                LOG.error(\"Error processing new measures\", exc_info=True)\n+            finally:\n+                lock.release()\n \n-    def process_new_measures_for_sack(self, sack, sync=False):\n+    def process_new_measures_for_sack(self, sack, blocking=False, sync=False):\n         \"\"\"Process added measures in background.\n \n         Lock a sack and try to process measures from it. If the sack cannot be\n         locked, the method will raise `SackAlreadyLocked`.\n \n         :param sack: The sack to process new measures for.\n+        :param blocking: Block to be sure the sack is processed or raise\n+                         `SackAlreadyLocked` otherwise.\n         :param sync: If True, raise any issue immediately otherwise just log it\n         :return: The number of metrics processed.\n \n         \"\"\"\n         lock = self.get_sack_lock(sack)\n-        if not lock.acquire(blocking=False):\n+        if not lock.acquire(blocking=blocking):\n             raise SackAlreadyLocked(sack)\n         LOG.debug(\"Processing measures for sack %s\", sack)\n         try:","changes":57},{"status":"modified","deletions":1,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/45370f5edbb7e3b056cd34531592c222bed317d9\/gnocchi\/cli\/metricd.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/45370f5edbb7e3b056cd34531592c222bed317d9\/gnocchi\/cli\/metricd.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/cli\/metricd.py?ref=45370f5edbb7e3b056cd34531592c222bed317d9","filename":"gnocchi\/cli\/metricd.py","sha":"873698d9a2f539ae3e7ea37406e602f6c4bfb17f","additions":2,"patch":"@@ -301,7 +301,8 @@ def metricd_tester(conf):\n     metrics_count = 0\n     for sack in inc.iter_sacks():\n         try:\n-            metrics_count += c.process_new_measures_for_sack(s, True)\n+            metrics_count += c.process_new_measures_for_sack(\n+                s, blocking=False, sync=True)\n         except chef.SackAlreadyLocked:\n             continue\n         if metrics_count >= conf.stop_after_processing_metrics:","changes":3},{"status":"modified","deletions":4,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/45370f5edbb7e3b056cd34531592c222bed317d9\/gnocchi\/incoming\/__init__.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/45370f5edbb7e3b056cd34531592c222bed317d9\/gnocchi\/incoming\/__init__.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/incoming\/__init__.py?ref=45370f5edbb7e3b056cd34531592c222bed317d9","filename":"gnocchi\/incoming\/__init__.py","sha":"f716adfa5cfbc0ff25ad610f154d7730c9992829","additions":0,"patch":"@@ -199,10 +199,6 @@ def measures_report(self, details=True):\n     def _build_report(details):\n         raise exceptions.NotImplementedError\n \n-    @staticmethod\n-    def list_metric_with_measures_to_process(sack):\n-        raise exceptions.NotImplementedError\n-\n     @staticmethod\n     def delete_unprocessed_measures_for_metric(metric_id):\n         raise exceptions.NotImplementedError","changes":4},{"status":"modified","deletions":13,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/45370f5edbb7e3b056cd34531592c222bed317d9\/gnocchi\/incoming\/ceph.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/45370f5edbb7e3b056cd34531592c222bed317d9\/gnocchi\/incoming\/ceph.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/incoming\/ceph.py?ref=45370f5edbb7e3b056cd34531592c222bed317d9","filename":"gnocchi\/incoming\/ceph.py","sha":"8a39fa8e4a38ad3e8bf6a5eba114439d1bcf40f3","additions":0,"patch":"@@ -157,19 +157,6 @@ def _list_keys_to_process(self, sack, prefix=\"\", marker=\"\", limit=-1):\n \n             return dict(omaps)\n \n-    def list_metric_with_measures_to_process(self, sack):\n-        names = set()\n-        marker = \"\"\n-        while True:\n-            obj_names = list(self._list_keys_to_process(\n-                sack, marker=marker, limit=self.Q_LIMIT).keys())\n-            names.update(name.split(\"_\")[1] for name in obj_names)\n-            if len(obj_names) < self.Q_LIMIT:\n-                break\n-            else:\n-                marker = obj_names[-1]\n-        return names\n-\n     def delete_unprocessed_measures_for_metric(self, metric_id):\n         sack = self.sack_for_metric(metric_id)\n         key_prefix = self.MEASURE_PREFIX + \"_\" + str(metric_id)","changes":13},{"status":"modified","deletions":4,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/45370f5edbb7e3b056cd34531592c222bed317d9\/gnocchi\/incoming\/file.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/45370f5edbb7e3b056cd34531592c222bed317d9\/gnocchi\/incoming\/file.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/incoming\/file.py?ref=45370f5edbb7e3b056cd34531592c222bed317d9","filename":"gnocchi\/incoming\/file.py","sha":"446807e83b9e71e730807ac905da7e8d68b12653","additions":1,"patch":"@@ -110,17 +110,14 @@ def build_metric_report(metric, sack):\n                     self._list_measures_container_for_metric_str(sack, metric))\n \n         for sack in self.iter_sacks():\n-            for metric in self.list_metric_with_measures_to_process(sack):\n+            for metric in set(self._list_target(self._sack_path(sack))):\n                 build_metric_report(metric, sack)\n         return (report_vars['metrics'] or\n                 len(report_vars['metric_details'].keys()),\n                 report_vars['measures'] or\n                 sum(report_vars['metric_details'].values()),\n                 report_vars['metric_details'] if details else None)\n \n-    def list_metric_with_measures_to_process(self, sack):\n-        return set(self._list_target(self._sack_path(sack)))\n-\n     def _list_measures_container_for_metric_str(self, sack, metric_id):\n         return self._list_target(self._measure_path(sack, metric_id))\n ","changes":5},{"status":"modified","deletions":5,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/45370f5edbb7e3b056cd34531592c222bed317d9\/gnocchi\/incoming\/redis.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/45370f5edbb7e3b056cd34531592c222bed317d9\/gnocchi\/incoming\/redis.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/incoming\/redis.py?ref=45370f5edbb7e3b056cd34531592c222bed317d9","filename":"gnocchi\/incoming\/redis.py","sha":"2a5191b418571af2bad0c4d141baf439797447ae","additions":0,"patch":"@@ -123,11 +123,6 @@ def update_report(results, m_list):\n         return (metrics, report_vars['measures'],\n                 report_vars['metric_details'] if details else None)\n \n-    def list_metric_with_measures_to_process(self, sack):\n-        match = redis.SEP.join([str(sack).encode(), b\"*\"])\n-        keys = self._client.scan_iter(match=match, count=1000)\n-        return set([k.split(redis.SEP)[1].decode(\"utf8\") for k in keys])\n-\n     def delete_unprocessed_measures_for_metric(self, metric_id):\n         self._client.delete(self._build_measure_path(metric_id))\n ","changes":5},{"status":"modified","deletions":7,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/45370f5edbb7e3b056cd34531592c222bed317d9\/gnocchi\/incoming\/s3.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/45370f5edbb7e3b056cd34531592c222bed317d9\/gnocchi\/incoming\/s3.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/incoming\/s3.py?ref=45370f5edbb7e3b056cd34531592c222bed317d9","filename":"gnocchi\/incoming\/s3.py","sha":"c4f7b45d835d70dccd673dc908f21287da4f4127","additions":0,"patch":"@@ -123,13 +123,6 @@ def _list_files(self, path_items, **kwargs):\n                 **kwargs)\n             yield response\n \n-    def list_metric_with_measures_to_process(self, sack):\n-        metrics = set()\n-        for response in self._list_files((str(sack),), Delimiter=\"\/\"):\n-            for p in response.get('CommonPrefixes', ()):\n-                metrics.add(p['Prefix'].split('\/', 2)[1])\n-        return metrics\n-\n     def _list_measure_files(self, path_items):\n         files = set()\n         for response in self._list_files(path_items):","changes":7},{"status":"modified","deletions":5,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/45370f5edbb7e3b056cd34531592c222bed317d9\/gnocchi\/incoming\/swift.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/45370f5edbb7e3b056cd34531592c222bed317d9\/gnocchi\/incoming\/swift.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/incoming\/swift.py?ref=45370f5edbb7e3b056cd34531592c222bed317d9","filename":"gnocchi\/incoming\/swift.py","sha":"4445eee40d338c8d04b8b1011065453ab1cd441d","additions":0,"patch":"@@ -78,11 +78,6 @@ def _build_report(self, details):\n         return (nb_metrics or len(metric_details), measures,\n                 metric_details if details else None)\n \n-    def list_metric_with_measures_to_process(self, sack):\n-        headers, files = self.swift.get_container(\n-            str(sack), delimiter='\/', full_listing=True)\n-        return set(f['subdir'][:-1] for f in files if 'subdir' in f)\n-\n     def _list_measure_files_for_metric(self, sack, metric_id):\n         headers, files = self.swift.get_container(\n             str(sack), path=six.text_type(metric_id),","changes":5},{"status":"modified","deletions":4,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/45370f5edbb7e3b056cd34531592c222bed317d9\/gnocchi\/rest\/api.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/45370f5edbb7e3b056cd34531592c222bed317d9\/gnocchi\/rest\/api.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/rest\/api.py?ref=45370f5edbb7e3b056cd34531592c222bed317d9","filename":"gnocchi\/rest\/api.py","sha":"78194b639c175e0b0d38fe57fc51a305e3a6a62e","additions":4,"patch":"@@ -529,8 +529,8 @@ def get_measures(self, start=None, stop=None, aggregation='mean',\n         if (strtobool(\"refresh\", refresh) and\n                 pecan.request.incoming.has_unprocessed(self.metric.id)):\n             try:\n-                pecan.request.chef.refresh_metric(\n-                    self.metric,\n+                pecan.request.chef.refresh_metrics(\n+                    [self.metric],\n                     pecan.request.conf.api.operation_timeout)\n             except chef.SackAlreadyLocked as e:\n                 abort(503, 'Unable to refresh metric: %s. Metric is locked. '\n@@ -1902,8 +1902,8 @@ def get_cross_metric_measures_from_objs(metrics, start=None, stop=None,\n                     if pecan.request.incoming.has_unprocessed(m.id)]\n                 for m in metrics_to_update:\n                     try:\n-                        pecan.request.chef.refresh_metric(\n-                            m, pecan.request.conf.api.operation_timeout)\n+                        pecan.request.chef.refresh_metrics(\n+                            [m], pecan.request.conf.api.operation_timeout)\n                     except chef.SackLockTimeoutError as e:\n                         abort(503, 'Unable to refresh metric: %s. '\n                               'Metric is locked. '","changes":8},{"status":"modified","deletions":2,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/45370f5edbb7e3b056cd34531592c222bed317d9\/gnocchi\/tests\/base.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/45370f5edbb7e3b056cd34531592c222bed317d9\/gnocchi\/tests\/base.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/base.py?ref=45370f5edbb7e3b056cd34531592c222bed317d9","filename":"gnocchi\/tests\/base.py","sha":"6fbf4150619a06c35ae01504e61d00e99cb2fd58","additions":3,"patch":"@@ -390,6 +390,7 @@ def _create_metric(self, archive_policy_name=\"low\"):\n     def trigger_processing(self, metrics=None):\n         if metrics is None:\n             self.chef.process_new_measures_for_sack(\n-                self.incoming.sack_for_metric(self.metric.id), sync=True)\n+                self.incoming.sack_for_metric(self.metric.id),\n+                blocking=True, sync=True)\n         else:\n-            self.chef.process_new_measures(metrics, sync=True)\n+            self.chef.refresh_metrics(metrics, sync=True)","changes":5},{"status":"modified","deletions":1,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/45370f5edbb7e3b056cd34531592c222bed317d9\/gnocchi\/tests\/functional\/fixtures.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/45370f5edbb7e3b056cd34531592c222bed317d9\/gnocchi\/tests\/functional\/fixtures.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/functional\/fixtures.py?ref=45370f5edbb7e3b056cd34531592c222bed317d9","filename":"gnocchi\/tests\/functional\/fixtures.py","sha":"56ac32a37948b7aba9099eab448dddebf777195c","additions":1,"patch":"@@ -258,7 +258,7 @@ def __init__(self, chef, name='metricd'):\n     def run(self):\n         while self.flag:\n             for sack in self.chef.incoming.iter_sacks():\n-                self.chef.process_new_measures_for_sack(sack)\n+                self.chef.process_new_measures_for_sack(sack, blocking=True)\n             time.sleep(0.1)\n \n     def stop(self):","changes":2},{"status":"modified","deletions":12,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/45370f5edbb7e3b056cd34531592c222bed317d9\/gnocchi\/tests\/test_aggregates.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/45370f5edbb7e3b056cd34531592c222bed317d9\/gnocchi\/tests\/test_aggregates.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/test_aggregates.py?ref=45370f5edbb7e3b056cd34531592c222bed317d9","filename":"gnocchi\/tests\/test_aggregates.py","sha":"093361a7e16e22415e5292d5377d393516618a41","additions":12,"patch":"@@ -1031,7 +1031,7 @@ def test_add_and_get_measures(self):\n             incoming.Measure(datetime64(2014, 1, 1, 12, 10, 31), 4),\n             incoming.Measure(datetime64(2014, 1, 1, 12, 13, 10), 4),\n         ])\n-        self.trigger_processing([str(self.metric.id), str(metric2.id)])\n+        self.trigger_processing([self.metric, metric2])\n \n         values = processor.get_measures(\n             self.storage,\n@@ -1190,7 +1190,7 @@ def test_add_and_get_measures_with_holes(self):\n             incoming.Measure(datetime64(2014, 1, 1, 12, 9, 31), 6),\n             incoming.Measure(datetime64(2014, 1, 1, 12, 13, 10), 2),\n         ])\n-        self.trigger_processing([str(self.metric.id), str(metric2.id)])\n+        self.trigger_processing([self.metric, metric2])\n \n         values = processor.get_measures(\n             self.storage,\n@@ -1228,7 +1228,7 @@ def test_resample(self):\n             incoming.Measure(datetime64(2014, 1, 1, 14, 2, 31), 4),\n             incoming.Measure(datetime64(2014, 1, 1, 15, 3, 10), 4),\n         ])\n-        self.trigger_processing([str(self.metric.id), str(metric2.id)])\n+        self.trigger_processing([self.metric, metric2])\n \n         values = processor.get_measures(\n             self.storage,\n@@ -1265,7 +1265,7 @@ def test_resample_minus_2_on_right(self):\n             incoming.Measure(datetime64(2014, 1, 1, 14, 2, 31), 4),\n             incoming.Measure(datetime64(2014, 1, 1, 15, 3, 10), 4),\n         ])\n-        self.trigger_processing([str(self.metric.id), str(metric2.id)])\n+        self.trigger_processing([self.metric, metric2])\n \n         values = processor.get_measures(\n             self.storage,\n@@ -1302,7 +1302,7 @@ def test_resample_minus_2_on_left(self):\n             incoming.Measure(datetime64(2014, 1, 1, 14, 2, 31), 4),\n             incoming.Measure(datetime64(2014, 1, 1, 15, 3, 10), 4),\n         ])\n-        self.trigger_processing([str(self.metric.id), str(metric2.id)])\n+        self.trigger_processing([self.metric, metric2])\n \n         values = processor.get_measures(\n             self.storage,\n@@ -1341,7 +1341,7 @@ def test_rolling(self):\n             incoming.Measure(datetime64(2014, 1, 1, 12, 10, 31), 4),\n             incoming.Measure(datetime64(2014, 1, 1, 12, 15, 10), 4),\n         ])\n-        self.trigger_processing([str(self.metric.id), str(metric2.id)])\n+        self.trigger_processing([self.metric, metric2])\n \n         values = processor.get_measures(\n             self.storage,\n@@ -1385,7 +1385,7 @@ def test_binary_operator_with_two_references(self):\n             incoming.Measure(datetime64(2014, 1, 1, 14, 2, 31), 4),\n             incoming.Measure(datetime64(2014, 1, 1, 15, 3, 10), 4),\n         ])\n-        self.trigger_processing([str(self.metric.id), str(metric2.id)])\n+        self.trigger_processing([self.metric, metric2])\n \n         values = processor.get_measures(\n             self.storage,\n@@ -1414,7 +1414,7 @@ def test_binary_operator_ts_on_left(self):\n             incoming.Measure(datetime64(2014, 1, 1, 14, 2, 31), 4),\n             incoming.Measure(datetime64(2014, 1, 1, 15, 3, 45), 44),\n         ])\n-        self.trigger_processing([str(self.metric.id)])\n+        self.trigger_processing()\n \n         values = processor.get_measures(\n             self.storage, [processor.MetricReference(self.metric, \"mean\")],\n@@ -1441,7 +1441,7 @@ def test_binary_operator_ts_on_right(self):\n             incoming.Measure(datetime64(2014, 1, 1, 14, 2, 31), 4),\n             incoming.Measure(datetime64(2014, 1, 1, 15, 3, 45), 44),\n         ])\n-        self.trigger_processing([str(self.metric.id)])\n+        self.trigger_processing()\n \n         values = processor.get_measures(\n             self.storage, [processor.MetricReference(self.metric, \"mean\")],\n@@ -1473,7 +1473,7 @@ def test_mix(self):\n             incoming.Measure(datetime64(2014, 1, 1, 14, 2, 31), 4),\n             incoming.Measure(datetime64(2014, 1, 1, 15, 3, 10), 4),\n         ])\n-        self.trigger_processing([str(self.metric.id), str(metric2.id)])\n+        self.trigger_processing([self.metric, metric2])\n \n         values = processor.get_measures(\n             self.storage,\n@@ -1511,7 +1511,7 @@ def test_bool(self):\n             incoming.Measure(datetime64(2014, 1, 1, 14, 2, 31), 4),\n             incoming.Measure(datetime64(2014, 1, 1, 15, 3, 10), 4),\n         ])\n-        self.trigger_processing([str(self.metric.id), str(metric2.id)])\n+        self.trigger_processing([self.metric, metric2])\n \n         values = processor.get_measures(\n             self.storage,\n@@ -1557,7 +1557,7 @@ def test_unary_operator(self):\n             incoming.Measure(datetime64(2014, 1, 1, 14, 2, 31), 4),\n             incoming.Measure(datetime64(2014, 1, 1, 15, 3, 10), -4),\n         ])\n-        self.trigger_processing([str(self.metric.id), str(metric2.id)])\n+        self.trigger_processing([self.metric, metric2])\n \n         values = processor.get_measures(\n             self.storage,","changes":24},{"status":"modified","deletions":3,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/45370f5edbb7e3b056cd34531592c222bed317d9\/gnocchi\/tests\/test_rest.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/45370f5edbb7e3b056cd34531592c222bed317d9\/gnocchi\/tests\/test_rest.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/test_rest.py?ref=45370f5edbb7e3b056cd34531592c222bed317d9","filename":"gnocchi\/tests\/test_rest.py","sha":"01f26d904042597c64f7a8ae1ba512931d4c37f4","additions":3,"patch":"@@ -37,7 +37,6 @@\n from gnocchi.rest import api\n from gnocchi.rest import app\n from gnocchi.tests import base as tests_base\n-from gnocchi.tests import utils as tests_utils\n from gnocchi import utils\n \n \n@@ -127,8 +126,9 @@ def do_request(self, req, *args, **kwargs):\n         elif self.auth_mode == \"remoteuser\":\n             req.remote_user = self.user\n         response = super(TestingApp, self).do_request(req, *args, **kwargs)\n-        metrics = tests_utils.list_all_incoming_metrics(self.chef.incoming)\n-        self.chef.process_new_measures(metrics, sync=True)\n+        for sack in self.chef.incoming.iter_sacks():\n+            self.chef.process_new_measures_for_sack(\n+                sack, blocking=True, sync=True)\n         return response\n \n ","changes":6},{"status":"modified","deletions":4,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/45370f5edbb7e3b056cd34531592c222bed317d9\/gnocchi\/tests\/test_statsd.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/45370f5edbb7e3b056cd34531592c222bed317d9\/gnocchi\/tests\/test_statsd.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/test_statsd.py?ref=45370f5edbb7e3b056cd34531592c222bed317d9","filename":"gnocchi\/tests\/test_statsd.py","sha":"2b4e8ea1068c38ec919c679c8a45e91550f4fdce","additions":4,"patch":"@@ -73,7 +73,7 @@ def _test_gauge_or_ms(self, metric_type, utcnow):\n \n         metric = r.get_metric(metric_key)\n \n-        self.chef.process_new_measures([str(metric.id)], sync=True)\n+        self.chef.refresh_metrics([metric], sync=True)\n \n         measures = self.storage.get_measures(metric, self.aggregations)\n         self.assertEqual({\"mean\": [\n@@ -92,7 +92,7 @@ def _test_gauge_or_ms(self, metric_type, utcnow):\n             (\"127.0.0.1\", 12345))\n         self.stats.flush()\n \n-        self.chef.process_new_measures([str(metric.id)], sync=True)\n+        self.chef.refresh_metrics([metric], sync=True)\n \n         measures = self.storage.get_measures(metric, self.aggregations)\n         self.assertEqual({\"mean\": [\n@@ -124,7 +124,7 @@ def test_counter(self, utcnow):\n         metric = r.get_metric(metric_key)\n         self.assertIsNotNone(metric)\n \n-        self.chef.process_new_measures([str(metric.id)], sync=True)\n+        self.chef.refresh_metrics([metric], sync=True)\n \n         measures = self.storage.get_measures(metric, self.aggregations)\n         self.assertEqual({\"mean\": [\n@@ -142,7 +142,7 @@ def test_counter(self, utcnow):\n             (\"127.0.0.1\", 12345))\n         self.stats.flush()\n \n-        self.chef.process_new_measures([str(metric.id)], sync=True)\n+        self.chef.refresh_metrics([metric], sync=True)\n \n         measures = self.storage.get_measures(metric, self.aggregations)\n         self.assertEqual({\"mean\": [","changes":8},{"status":"modified","deletions":28,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/45370f5edbb7e3b056cd34531592c222bed317d9\/gnocchi\/tests\/test_storage.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/45370f5edbb7e3b056cd34531592c222bed317d9\/gnocchi\/tests\/test_storage.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/test_storage.py?ref=45370f5edbb7e3b056cd34531592c222bed317d9","filename":"gnocchi\/tests\/test_storage.py","sha":"b95fd4bc2b42ee5872bc1670175c6eee00a503f2","additions":10,"patch":"@@ -31,7 +31,6 @@\n from gnocchi.storage import s3\n from gnocchi.storage import swift\n from gnocchi.tests import base as tests_base\n-from gnocchi.tests import utils as tests_utils\n \n \n def datetime64(*args):\n@@ -167,23 +166,6 @@ def test_aborted_initial_processing(self):\n         self.assertIn((datetime64(2014, 1, 1, 12),\n                        numpy.timedelta64(5, 'm'), 5.0), m)\n \n-    def test_list_metric_with_measures_to_process(self):\n-        metrics = tests_utils.list_all_incoming_metrics(self.incoming)\n-        self.assertEqual(set(), metrics)\n-        self.incoming.add_measures(self.metric.id, [\n-            incoming.Measure(datetime64(2014, 1, 1, 12, 0, 1), 69),\n-        ])\n-        m2, __ = self._create_metric('medium')\n-        self.incoming.add_measures(m2.id, [\n-            incoming.Measure(datetime64(2014, 1, 1, 12, 0, 1), 69),\n-        ])\n-        metrics = tests_utils.list_all_incoming_metrics(self.incoming)\n-        m_list = [str(self.metric.id), str(m2.id)]\n-        self.assertEqual(set(m_list), metrics)\n-        self.trigger_processing(m_list)\n-        metrics = tests_utils.list_all_incoming_metrics(self.incoming)\n-        self.assertEqual(set([]), metrics)\n-\n     def test_delete_nonempty_metric(self):\n         self.incoming.add_measures(self.metric.id, [\n             incoming.Measure(datetime64(2014, 1, 1, 12, 0, 1), 69),\n@@ -242,7 +224,7 @@ def test_get_aggregated_measures(self):\n         self.incoming.add_measures(self.metric.id, [\n             incoming.Measure(datetime64(2014, 1, 1, 12, i, j), 100)\n             for i in six.moves.range(0, 60) for j in six.moves.range(0, 60)])\n-        self.trigger_processing([str(self.metric.id)])\n+        self.trigger_processing([self.metric])\n \n         aggregations = self.metric.archive_policy.aggregations\n \n@@ -258,7 +240,7 @@ def test_add_measures_big(self):\n         self.incoming.add_measures(m.id, [\n             incoming.Measure(datetime64(2014, 1, 1, 12, i, j), 100)\n             for i in six.moves.range(0, 60) for j in six.moves.range(0, 60)])\n-        self.trigger_processing([str(m.id)])\n+        self.trigger_processing([m])\n \n         aggregations = (\n             m.archive_policy.get_aggregations_for_method(\"mean\")\n@@ -274,21 +256,21 @@ def test_add_measures_update_subset_split(self):\n             incoming.Measure(datetime64(2014, 1, 6, i, j, 0), 100)\n             for i in six.moves.range(2) for j in six.moves.range(0, 60, 2)]\n         self.incoming.add_measures(m.id, measures)\n-        self.trigger_processing([str(m.id)])\n+        self.trigger_processing([m])\n \n         # add measure to end, in same aggregate time as last point.\n         self.incoming.add_measures(m.id, [\n             incoming.Measure(datetime64(2014, 1, 6, 1, 58, 1), 100)])\n \n         with mock.patch.object(self.storage, '_store_metric_splits') as c:\n             # should only resample last aggregate\n-            self.trigger_processing([str(m.id)])\n+            self.trigger_processing([m])\n         count = 0\n         for call in c.mock_calls:\n             # policy is 60 points and split is 48. should only update 2nd half\n             args = call[1]\n             for metric, key_agg_data_offset in six.iteritems(args[0]):\n-                if metric == m_sql:\n+                if metric.id == m_sql.id:\n                     for key, aggregation, data, offset in key_agg_data_offset:\n                         if (key.sampling == numpy.timedelta64(1, 'm')\n                            and aggregation.method == \"mean\"):\n@@ -301,14 +283,14 @@ def test_add_measures_update_subset(self):\n             incoming.Measure(datetime64(2014, 1, 6, i, j, 0), 100)\n             for i in six.moves.range(2) for j in six.moves.range(0, 60, 2)]\n         self.incoming.add_measures(m.id, measures)\n-        self.trigger_processing([str(m.id)])\n+        self.trigger_processing([m])\n \n         # add measure to end, in same aggregate time as last point.\n         new_point = datetime64(2014, 1, 6, 1, 58, 1)\n         self.incoming.add_measures(m.id, [incoming.Measure(new_point, 100)])\n \n         with mock.patch.object(self.incoming, 'add_measures') as c:\n-            self.trigger_processing([str(m.id)])\n+            self.trigger_processing([m])\n         for __, args, __ in c.mock_calls:\n             self.assertEqual(\n                 list(args[3])[0][0], carbonara.round_timestamp(\n@@ -1078,7 +1060,7 @@ def test_find_measures(self):\n             incoming.Measure(datetime64(2014, 1, 1, 12, 9, 31), 6),\n             incoming.Measure(datetime64(2014, 1, 1, 12, 13, 10), 2),\n         ])\n-        self.trigger_processing([str(self.metric.id), str(metric2.id)])\n+        self.trigger_processing([self.metric, metric2])\n \n         self.assertEqual(\n             [\n@@ -1133,7 +1115,7 @@ def test_resize_policy(self):\n             incoming.Measure(datetime64(2014, 1, 1, 12, 0, 5), 1),\n             incoming.Measure(datetime64(2014, 1, 1, 12, 0, 10), 1),\n         ])\n-        self.trigger_processing([str(m.id)])\n+        self.trigger_processing([m])\n \n         aggregation = m.archive_policy.get_aggregation(\n             \"mean\", numpy.timedelta64(5, 's'))\n@@ -1150,7 +1132,7 @@ def test_resize_policy(self):\n         self.incoming.add_measures(m.id, [\n             incoming.Measure(datetime64(2014, 1, 1, 12, 0, 15), 1),\n         ])\n-        self.trigger_processing([str(m.id)])\n+        self.trigger_processing([m])\n         self.assertEqual({\"mean\": [\n             (datetime64(2014, 1, 1, 12, 0, 5), numpy.timedelta64(5, 's'), 1),\n             (datetime64(2014, 1, 1, 12, 0, 10), numpy.timedelta64(5, 's'), 1),","changes":38},{"status":"modified","deletions":5,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/45370f5edbb7e3b056cd34531592c222bed317d9\/gnocchi\/tests\/utils.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/45370f5edbb7e3b056cd34531592c222bed317d9\/gnocchi\/tests\/utils.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/utils.py?ref=45370f5edbb7e3b056cd34531592c222bed317d9","filename":"gnocchi\/tests\/utils.py","sha":"a9773ce994d176b44920d05447e63d93461b6866","additions":0,"patch":"@@ -17,11 +17,6 @@\n from gnocchi import opts\n \n \n-def list_all_incoming_metrics(incoming):\n-    return set.union(*[incoming.list_metric_with_measures_to_process(sack)\n-                       for sack in incoming.iter_sacks()])\n-\n-\n def prepare_conf():\n     conf = cfg.ConfigOpts()\n ","changes":5}],"committer":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"stats":{"deletions":125,"additions":70,"total":195},"author":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/45370f5edbb7e3b056cd34531592c222bed317d9","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/45370f5edbb7e3b056cd34531592c222bed317d9\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/45370f5edbb7e3b056cd34531592c222bed317d9","sha":"45370f5edbb7e3b056cd34531592c222bed317d9","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/fd297c0edd0e4f24bf102a7768bf84983a564f29","sha":"fd297c0edd0e4f24bf102a7768bf84983a564f29","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/fd297c0edd0e4f24bf102a7768bf84983a564f29"}],"commit":{"committer":{"date":"2018-03-16T14:25:22Z","name":"Julien Danjou","email":"julien@danjou.info"},"author":{"date":"2018-03-13T10:16:38Z","name":"Julien Danjou","email":"julien@danjou.info"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/45370f5edbb7e3b056cd34531592c222bed317d9","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/8b670863e6c377f3753cfb185ef5cfdf11813c84","sha":"8b670863e6c377f3753cfb185ef5cfdf11813c84"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"chef: merge refresh_metric and process_new_measures\n\nThis simplifies the code base by just allowing to process new measures sack per\nsack with the existing process_new_measures_for_sack() or to use the new\nrefresh_metrics() who takes a list of metrics. Since the list of metric must be\nknown, there's no need to use list_metric_with_measures_to_process() anymore,\nso it can be removed."}},{"files":[{"status":"added","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/5c2c673df012d5a7ebb8d33eac02dba2fb8989a7\/gnocchi\/cli\/injector.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/5c2c673df012d5a7ebb8d33eac02dba2fb8989a7\/gnocchi\/cli\/injector.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/cli\/injector.py?ref=5c2c673df012d5a7ebb8d33eac02dba2fb8989a7","filename":"gnocchi\/cli\/injector.py","sha":"2892e28d170d3789b0efaa5a97c8b216adadc9af","additions":114,"patch":"@@ -0,0 +1,114 @@\n+# -*- encoding: utf-8 -*-\n+#\n+# Copyright (c) 2018 Red Hat\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#    http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+# implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+import random\n+import time\n+import uuid\n+\n+import daiquiri\n+import numpy\n+from oslo_config import cfg\n+\n+from gnocchi import chef\n+from gnocchi.cli import metricd\n+from gnocchi import incoming\n+from gnocchi import indexer\n+from gnocchi import storage\n+from gnocchi import service\n+from gnocchi import utils\n+\n+LOG = daiquiri.getLogger(__name__)\n+\n+\n+def injector():\n+    conf = cfg.ConfigOpts()\n+    conf.register_cli_opts([\n+        cfg.IntOpt(\"--measures\",\n+                   help=\"Measures per metric.\"),\n+        cfg.IntOpt(\"--metrics\",\n+                   help=\"Number of metrics to create.\"),\n+        cfg.IntOpt(\"--archive-policy-name\",\n+                   help=\"Name of archive policy to use.\",\n+                   default=\"low\"),\n+        cfg.IntOpt(\"--interval\",\n+                   help=\"Interval to sleep between metrics sending.\"),\n+        cfg.BoolOpt(\"--process\", default=False,\n+                    help=\"Process the ingested measures.\"),\n+    ])\n+    return _inject(service.prepare_service(conf=conf, log_to_std=True),\n+                   metrics=conf.metrics,\n+                   measures=conf.measures,\n+                   archive_policy_name=conf.archive_policy_name,\n+                   process=conf.process,\n+                   interval=conf.interval)\n+\n+\n+def _inject(conf, metrics, measures, archive_policy_name=\"low\", process=False,\n+            interval=None):\n+    inc = incoming.get_driver(conf)\n+    coord = metricd.get_coordinator_and_start(str(uuid.uuid4()),\n+                                              conf.coordination_url)\n+    store = storage.get_driver(conf)\n+    idx = indexer.get_driver(conf)\n+\n+    LOG.info(\"Creating %d metrics\", metrics)\n+    with utils.StopWatch() as sw:\n+        metrics = [\n+            idx.create_metric(uuid.uuid4(), \"admin\",\n+                              archive_policy_name).id\n+            for _ in range(metrics)\n+        ]\n+    LOG.info(\"Created %d metrics in %.2fs\", metrics, sw.elapsed())\n+\n+    LOG.info(\"Generating %d measures per metric for %d metrics\u2026 \",\n+             measures, metrics)\n+    now = numpy.datetime64(utils.utcnow())\n+    with utils.StopWatch() as sw:\n+        measures = {\n+            m_id: [incoming.Measure(\n+                now + numpy.timedelta64(seconds=s),\n+                random.randint(-999999, 999999)) for s in range(measures)]\n+            for m_id in metrics\n+        }\n+    LOG.info(\"\u2026 done in %.2fs\", sw.elapsed())\n+\n+    interval_timer = utils.StopWatch().start()\n+\n+    while True:\n+        interval_timer.reset()\n+        with utils.StopWatch() as sw:\n+            inc.add_measures_batch(measures)\n+        total_measures = sum(map(len, measures.values()))\n+        LOG.info(\"Pushed %d measures in %.2fs\",\n+                 total_measures,\n+                 sw.elapsed())\n+\n+        if process:\n+            c = chef.Chef(coord, inc, idx, store)\n+\n+            with utils.StopWatch() as sw:\n+                for s in inc.iter_sacks():\n+                    c.process_new_measures_for_sack(s)\n+            LOG.info(\"Processed %d sacks in %.2fs\",\n+                     inc.NUM_SACKS,sw.elapsed())\n+            LOG.info(\"Speed: %.2f measures\/s\",\n+                     float(total_measures) \/ sw.elapsed())\n+\n+        if interval is None:\n+            break\n+        time.sleep(max(0, conf.interval - interval_timer.elapsed()))\n+\n+    return total_measures","changes":114},{"status":"added","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/5c2c673df012d5a7ebb8d33eac02dba2fb8989a7\/gnocchi\/tests\/test_injector.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/5c2c673df012d5a7ebb8d33eac02dba2fb8989a7\/gnocchi\/tests\/test_injector.py","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/test_injector.py?ref=5c2c673df012d5a7ebb8d33eac02dba2fb8989a7","filename":"gnocchi\/tests\/test_injector.py","sha":"3acecc2451a2a2a1b9f21282fb3c4e2137db7d46","additions":30,"patch":"@@ -0,0 +1,30 @@\n+# -*- encoding: utf-8 -*-\n+#\n+# Copyright \u00a9 2018 Red Hat, Inc.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n+# not use this file except in compliance with the License. You may obtain\n+# a copy of the License at\n+#\n+#      http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+# License for the specific language governing permissions and limitations\n+# under the License.\n+\n+from gnocchi.cli import injector\n+from gnocchi.tests import base\n+\n+\n+class InjectorTestCase(base.TestCase):\n+    def test_inject(self):\n+        self.assertEqual(100, injector._inject(\n+            self.conf,\n+            measures=10, metrics=10))\n+\n+    def test_inject_process(self):\n+        self.assertEqual(100, injector._inject(\n+            self.conf,\n+            measures=10, metrics=10, process=True))","changes":30},{"status":"modified","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/5c2c673df012d5a7ebb8d33eac02dba2fb8989a7\/setup.cfg","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/5c2c673df012d5a7ebb8d33eac02dba2fb8989a7\/setup.cfg","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/setup.cfg?ref=5c2c673df012d5a7ebb8d33eac02dba2fb8989a7","filename":"setup.cfg","sha":"a04646747a65c1fd3416a1d9fcb8e49d606c141b","additions":1,"patch":"@@ -145,6 +145,7 @@ console_scripts =\n     gnocchi-change-sack-size = gnocchi.cli.manage:change_sack_size\n     gnocchi-statsd = gnocchi.cli.statsd:statsd\n     gnocchi-metricd = gnocchi.cli.metricd:metricd\n+    gnocchi-injector = gnocchi.cli.injector:injector\n \n oslo.config.opts =\n     gnocchi = gnocchi.opts:list_opts","changes":1}],"committer":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"stats":{"deletions":0,"additions":145,"total":145},"author":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/5c2c673df012d5a7ebb8d33eac02dba2fb8989a7","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/5c2c673df012d5a7ebb8d33eac02dba2fb8989a7\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/5c2c673df012d5a7ebb8d33eac02dba2fb8989a7","sha":"5c2c673df012d5a7ebb8d33eac02dba2fb8989a7","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/45370f5edbb7e3b056cd34531592c222bed317d9","sha":"45370f5edbb7e3b056cd34531592c222bed317d9","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/45370f5edbb7e3b056cd34531592c222bed317d9"}],"commit":{"committer":{"date":"2018-03-16T14:25:22Z","name":"Julien Danjou","email":"julien@danjou.info"},"author":{"date":"2018-03-13T15:57:10Z","name":"Julien Danjou","email":"julien@danjou.info"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/5c2c673df012d5a7ebb8d33eac02dba2fb8989a7","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/7cc091d3178289bb0adb77af1cf389b6769c11a6","sha":"7cc091d3178289bb0adb77af1cf389b6769c11a6"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"Add gnocchi-injector\n\nThis allows to inject measures and maybe process them in a single tool. This is\nuseful to generate load to test metricd and also profile the processing code."}}],"diff_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/746.diff","pastamaker_ci_statuses":{},"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/746","body":"This PR is for tracking the current branch of batching a lot of operations.","head":{"repo":{"issues_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/issues{\/number}","deployments_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/deployments","has_wiki":true,"forks_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/forks","mirror_url":null,"issue_events_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/issues\/events{\/number}","subscription_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/subscription","merges_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/merges","collaborators_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/collaborators{\/collaborator}","updated_at":"2017-05-19T16:20:11Z","private":false,"pulls_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/pulls{\/number}","owner":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"trees_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/git\/trees{\/sha}","full_name":"jd\/gnocchi","issue_comment_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/issues\/comments{\/number}","statuses_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/statuses\/{sha}","id":91824535,"keys_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/keys{\/key_id}","size":5098,"tags_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/tags","archived":false,"contributors_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/contributors","downloads_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/downloads","assignees_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/assignees{\/user}","contents_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/contents\/{+path}","has_pages":false,"git_refs_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/git\/refs{\/sha}","has_projects":true,"clone_url":"https:\/\/github.com\/jd\/gnocchi.git","watchers_count":0,"git_tags_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/git\/tags{\/sha}","milestones_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/milestones{\/number}","stargazers_count":0,"homepage":null,"branches_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/branches{\/branch}","fork":true,"commits_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/commits{\/sha}","releases_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/releases{\/id}","description":"Timeseries database","has_downloads":true,"labels_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/labels{\/name}","events_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/events","comments_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/comments{\/number}","html_url":"https:\/\/github.com\/jd\/gnocchi","compare_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/compare\/{base}...{head}","language":"Python","git_url":"git:\/\/github.com\/jd\/gnocchi.git","svn_url":"https:\/\/github.com\/jd\/gnocchi","notifications_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/notifications{?since,all,participating}","has_issues":false,"ssh_url":"git@github.com:jd\/gnocchi.git","blobs_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/git\/blobs{\/sha}","forks":0,"hooks_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/hooks","open_issues_count":0,"watchers":0,"name":"gnocchi","license":null,"url":"https:\/\/api.github.com\/repos\/jd\/gnocchi","created_at":"2017-05-19T16:20:08Z","archive_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/{archive_format}{\/ref}","pushed_at":"2018-03-16T14:42:33Z","forks_count":0,"default_branch":"master","teams_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/teams","open_issues":0,"languages_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/languages","git_commits_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/git\/commits{\/sha}","subscribers_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/subscribers","stargazers_url":"https:\/\/api.github.com\/repos\/jd\/gnocchi\/stargazers"},"sha":"5c2c673df012d5a7ebb8d33eac02dba2fb8989a7","ref":"megabatch","user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"label":"jd:megabatch"},"pastamaker_weight":-1,"commits":15,"author_association":"OWNER","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/746\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/746","pastamaker_travis_url":"https:\/\/travis-ci.org\/gnocchixyz\/gnocchi\/builds\/354340231?utm_source=github_status&utm_medium=notification","updated_at":"2018-03-16T14:26:28Z","pastamaker_approved":false,"base":{"repo":{"issues_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues{\/number}","deployments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/deployments","has_wiki":false,"forks_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/forks","mirror_url":null,"issue_events_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/events{\/number}","subscription_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/subscription","merges_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/merges","collaborators_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/collaborators{\/collaborator}","updated_at":"2018-03-16T14:24:50Z","private":false,"pulls_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls{\/number}","owner":{"following_url":"https:\/\/api.github.com\/users\/gnocchixyz\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/gnocchixyz\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/gnocchixyz\/orgs","url":"https:\/\/api.github.com\/users\/gnocchixyz","events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/events{\/privacy}","html_url":"https:\/\/github.com\/gnocchixyz","subscriptions_url":"https:\/\/api.github.com\/users\/gnocchixyz\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/26142905?v=4","repos_url":"https:\/\/api.github.com\/users\/gnocchixyz\/repos","received_events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/gnocchixyz\/starred{\/owner}{\/repo}","site_admin":false,"login":"gnocchixyz","type":"Organization","id":26142905,"followers_url":"https:\/\/api.github.com\/users\/gnocchixyz\/followers"},"trees_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees{\/sha}","full_name":"gnocchixyz\/gnocchi","issue_comment_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments{\/number}","statuses_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/statuses\/{sha}","id":91715647,"keys_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/keys{\/key_id}","size":4903,"tags_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/tags","archived":false,"contributors_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contributors","downloads_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/downloads","assignees_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/assignees{\/user}","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/{+path}","has_pages":false,"git_refs_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/refs{\/sha}","has_projects":false,"clone_url":"https:\/\/github.com\/gnocchixyz\/gnocchi.git","watchers_count":132,"git_tags_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/tags{\/sha}","milestones_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/milestones{\/number}","stargazers_count":132,"homepage":null,"branches_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/branches{\/branch}","fork":false,"commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits{\/sha}","releases_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/releases{\/id}","description":"Timeseries database","has_downloads":true,"labels_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/labels{\/name}","events_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/events","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/comments{\/number}","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi","compare_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/compare\/{base}...{head}","language":"Python","git_url":"git:\/\/github.com\/gnocchixyz\/gnocchi.git","svn_url":"https:\/\/github.com\/gnocchixyz\/gnocchi","notifications_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/notifications{?since,all,participating}","has_issues":true,"ssh_url":"git@github.com:gnocchixyz\/gnocchi.git","blobs_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/blobs{\/sha}","forks":30,"hooks_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/hooks","open_issues_count":51,"watchers":132,"name":"gnocchi","license":{"spdx_id":"Apache-2.0","url":"https:\/\/api.github.com\/licenses\/apache-2.0","name":"Apache License 2.0","key":"apache-2.0"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi","created_at":"2017-05-18T16:32:52Z","archive_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/{archive_format}{\/ref}","pushed_at":"2018-03-16T14:42:29Z","forks_count":30,"default_branch":"master","teams_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/teams","open_issues":51,"languages_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/languages","git_commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits{\/sha}","subscribers_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/subscribers","stargazers_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/stargazers"},"sha":"ea9531da7387fb38d72bc863134ca0ce863f8375","ref":"master","user":{"following_url":"https:\/\/api.github.com\/users\/gnocchixyz\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/gnocchixyz\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/gnocchixyz\/orgs","url":"https:\/\/api.github.com\/users\/gnocchixyz","events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/events{\/privacy}","html_url":"https:\/\/github.com\/gnocchixyz","subscriptions_url":"https:\/\/api.github.com\/users\/gnocchixyz\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/26142905?v=4","repos_url":"https:\/\/api.github.com\/users\/gnocchixyz\/repos","received_events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/gnocchixyz\/starred{\/owner}{\/repo}","site_admin":false,"login":"gnocchixyz","type":"Organization","id":26142905,"followers_url":"https:\/\/api.github.com\/users\/gnocchixyz\/followers"},"label":"gnocchixyz:master"},"rebaseable":true,"milestone":null,"pastamaker_travis_detail":{"commit_id":105535693,"repository_id":13523406,"jobs":[{"build_id":354340231,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/354340232\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"2506.1","allow_failure":false,"queue":"builds.gce","state":"failed","commit_id":105535693,"finished_at":"2018-03-16T14:43:50Z","started_at":"2018-03-16T14:42:22Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=pep8"},"id":354340232},{"build_id":354340231,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/354340234\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"2506.2","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":105535693,"finished_at":"2018-03-16T14:49:55Z","started_at":"2018-03-16T14:44:24Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=docs"},"id":354340234},{"build_id":354340231,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/354340235\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"2506.3","allow_failure":false,"queue":"builds.gce","state":"canceled","commit_id":105535693,"finished_at":"2018-03-16T15:03:55Z","started_at":"2018-03-16T14:44:39Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=docs-gnocchi.xyz"},"id":354340235},{"build_id":354340231,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/354340236\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"2506.4","allow_failure":false,"queue":"builds.gce","state":"errored","commit_id":105535693,"finished_at":"2018-03-16T14:57:03Z","started_at":"2018-03-16T14:50:27Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-mysql-ceph-upgrade-from-4.0"},"id":354340236},{"build_id":354340231,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/354340237\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"2506.5","allow_failure":false,"queue":"builds.gce","state":"canceled","commit_id":105535693,"finished_at":"2018-03-16T15:03:55Z","started_at":"2018-03-16T14:57:36Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-postgresql-file-upgrade-from-4.0"},"id":354340237},{"build_id":354340231,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/354340238\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"2506.6","allow_failure":false,"queue":"builds.gce","state":"canceled","commit_id":105535693,"finished_at":"2018-03-16T15:03:55Z","started_at":null,"config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-mysql-ceph-upgrade-from-4.1"},"id":354340238},{"build_id":354340231,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/354340239\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"2506.7","allow_failure":false,"queue":"builds.gce","state":"canceled","commit_id":105535693,"finished_at":"2018-03-16T15:03:55Z","started_at":null,"config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-postgresql-file-upgrade-from-4.1"},"id":354340239},{"build_id":354340231,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/354340240\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"2506.8","allow_failure":false,"queue":"builds.gce","state":"canceled","commit_id":105535693,"finished_at":"2018-03-16T15:03:56Z","started_at":"2018-03-16T15:03:57Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-mysql-ceph-upgrade-from-4.2"},"id":354340240},{"build_id":354340231,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/354340241\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"2506.9","allow_failure":false,"queue":"builds.gce","state":"canceled","commit_id":105535693,"finished_at":"2018-03-16T15:03:56Z","started_at":"2018-03-16T15:03:57Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-postgresql-file-upgrade-from-4.2"},"id":354340241},{"build_id":354340231,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/354340242\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"2506.10","allow_failure":false,"queue":null,"state":"canceled","commit_id":105535693,"finished_at":"2018-03-16T15:03:56Z","started_at":null,"config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-mysql"},"id":354340242},{"build_id":354340231,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/354340243\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"2506.11","allow_failure":false,"queue":null,"state":"canceled","commit_id":105535693,"finished_at":"2018-03-16T15:03:56Z","started_at":null,"config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-mysql"},"id":354340243},{"build_id":354340231,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/354340244\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"2506.12","allow_failure":false,"queue":null,"state":"canceled","commit_id":105535693,"finished_at":"2018-03-16T15:03:56Z","started_at":null,"config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-postgresql"},"id":354340244},{"build_id":354340231,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/354340245\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"2506.13","allow_failure":false,"queue":null,"state":"canceled","commit_id":105535693,"finished_at":"2018-03-16T15:03:56Z","started_at":null,"config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-postgresql"},"id":354340245}],"event_type":"pull_request","finished_at":"2018-03-16T15:03:57Z","number":"2506","id":354340231,"state":"canceled","pull_request_title":"[DNM] Pull request for megabatch","pull_request":true,"duration":2350,"started_at":"2018-03-16T14:42:22Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","os":"linux","deploy":{"true":{"all_branches":true,"tags":true},"password":{"secure":"c+Ccx3SHCWepiy0PUxDJ7XO9r3aNYnHjkzxF5c\/kjV8QaCJayAJEgXJnBKhvjroqwgn7JPUgpD6QdSWdB4FqjbZYQ3I3oHOO1YL0vYYa8wHG5HuMsMp4J8qvzgs3QNQDECPI1mXsPevn3VMfGszUN+6BQrHB3FbZsTtOmE+Kmgok5NCT+obsfEhVea\/UOD0XFUkVW9VJhPjQ2ytvYvFIc46\/73GQf2Er\/5DCa\/4GGDEBSD++bDJgp3kQj438xslCAFeZWDwGsa+cTc43PI0Y0+E144ySVY7QyVbZ1B66a1BGWVrXJuM+gW\/eIBCMN1FJXmD7CDdPa22azKI8dfMF7qaH3Oiv3cVovPWpubOvhTUHUFwG8+W7Fx+zUKktCWiLer\/fZvEd3W8tcgby2kNOdcUfKfDB2ImZJ+P694\/OJ4jJ8T5TQerruNoP2OstzcBMon77Ry0XawXR15SZd4JhbqhSi+h7XV6EYmct1UN4zoysA7fx\/cWHcBxdnm2G6R0gzmOiiGUd74ptU8lZ3IlEP6EZckK\/OZOdy1I8EQeUe7aiTooXZDAn07iPkDZliYRr2e36ij\/xjtWCe1AjCksn\/xdKfHOKJv5UVob495DU2GuNObe01ewXzexcnldjfp9Sb8SVEFuhHx6IvH5OC+vAq+BVYu2jwvMcVfXi3VSOkB4="},"distributions":"sdist bdist_wheel","user":"jd","provider":"pypi"},"env":["TARGET=pep8","TARGET=docs","TARGET=docs-gnocchi.xyz","TARGET=py27-mysql-ceph-upgrade-from-4.0","TARGET=py35-postgresql-file-upgrade-from-4.0","TARGET=py27-mysql-ceph-upgrade-from-4.1","TARGET=py35-postgresql-file-upgrade-from-4.1","TARGET=py27-mysql-ceph-upgrade-from-4.2","TARGET=py35-postgresql-file-upgrade-from-4.2","TARGET=py27-mysql","TARGET=py35-mysql","TARGET=py27-postgresql","TARGET=py35-postgresql"]},"job_ids":[354340232,354340234,354340235,354340236,354340237,354340238,354340239,354340240,354340241,354340242,354340243,354340244,354340245],"pull_request_number":746,"resume_state":"error"},"requested_teams":[],"locked":false,"merged_by":null,"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/746","mergeable_state":"blocked","created_at":"2018-02-15T17:33:55Z","merged":false,"review_comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/746\/comments","review_comments":0,"assignees":[],"review_comment_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/comments{\/number}","pastamaker_comments":[],"pastamaker_approvals":[[],[],2,[0,1]],"patch_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/746.patch","changed_files":26,"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"}},{"deletions":541,"pastamaker_combined_status":"failure","merge_commit_sha":"748f80b5a449feb06ec2d037f22eae900f384c64","labels":[],"number":816,"pastamaker_travis_state":"failure","assignee":null,"commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/816\/commits","mergeable":true,"closed_at":null,"additions":1670,"statuses_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/statuses\/8d6e9a8558c10a909d808cd1e20fa1b774fc511f","id":174676837,"requested_reviewers":[],"maintainer_can_modify":true,"title":"Pull request for sileht\/rocksdb-batch","comments":4,"merged_at":null,"state":"open","_links":{"review_comment":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/comments{\/number}"},"commits":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/816\/commits"},"self":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/816"},"review_comments":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/816\/comments"},"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/816"},"comments":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/816\/comments"},"issue":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/816"},"statuses":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/statuses\/8d6e9a8558c10a909d808cd1e20fa1b774fc511f"}},"pastamaker_reviews":[],"pastamaker_commits":[{"files":[{"status":"modified","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/88782d6bcee6d91fddcc719d55b2d2944d14511e\/gnocchi\/chef.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/88782d6bcee6d91fddcc719d55b2d2944d14511e\/gnocchi\/chef.py","changes":29,"filename":"gnocchi\/chef.py","sha":"3618a01c5e8402a48bcbc615199c5c49df9e75b4","additions":29,"patch":"@@ -137,6 +137,35 @@ def process_new_measures(self, metrics_to_process, sync=False):\n                 raise\n             LOG.error(\"Error processing new measures\", exc_info=True)\n \n+    def process_new_measures_for_sack(self, sack, sync=False):\n+        \"\"\"Process added measures in background.\n+\n+        :param sack: The sack to process new measures for.\n+        :param sync: If True, raise any issue immediately otherwise just log it\n+        :return: The number of metrics processed.\n+        \"\"\"\n+        # NOTE(gordc): must lock at sack level\n+        LOG.debug(\"Processing measures for sack %s\", sack)\n+        try:\n+            with self.incoming.process_measures_for_sack(sack) as measures:\n+                # process only active metrics. deleted metrics with unprocessed\n+                # measures will be skipped until cleaned by janitor.\n+                metrics = self.index.list_metrics(\n+                    attribute_filter={\n+                        \"in\": {\"id\": measures.keys()}\n+                    })\n+                for metric in metrics:\n+                    self.storage.compute_and_store_timeseries(\n+                        metric, measures[metric.id]\n+                    )\n+                    LOG.debug(\"Measures for metric %s processed\", metric)\n+                return len(measures)\n+        except Exception:\n+            if sync:\n+                raise\n+            LOG.error(\"Error processing new measures\", exc_info=True)\n+            return 0\n+\n     def get_sack_lock(self, sack):\n         # FIXME(jd) Some tooz drivers have a limitation on lock name length\n         # (e.g. MySQL). This should be handled by tooz, but it's not yet.","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/chef.py?ref=88782d6bcee6d91fddcc719d55b2d2944d14511e"},{"status":"modified","deletions":3,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/88782d6bcee6d91fddcc719d55b2d2944d14511e\/gnocchi\/cli\/metricd.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/88782d6bcee6d91fddcc719d55b2d2944d14511e\/gnocchi\/cli\/metricd.py","changes":4,"filename":"gnocchi\/cli\/metricd.py","sha":"6f7a19ffbc02f8ecf0efdb8a8a3a4d940e21fdbf","additions":1,"patch":"@@ -237,9 +237,7 @@ def _run_job(self):\n                 continue\n \n             try:\n-                metrics = self.incoming.list_metric_with_measures_to_process(s)\n-                m_count += len(metrics)\n-                self.chef.process_new_measures(metrics)\n+                m_count += self.chef.process_new_measures_for_sack(s)\n                 s_count += 1\n                 self.incoming.finish_sack_processing(s)\n                 self.sacks_with_measures_to_process.discard(s)","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/cli\/metricd.py?ref=88782d6bcee6d91fddcc719d55b2d2944d14511e"},{"status":"modified","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/88782d6bcee6d91fddcc719d55b2d2944d14511e\/gnocchi\/common\/redis.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/88782d6bcee6d91fddcc719d55b2d2944d14511e\/gnocchi\/common\/redis.py","changes":1,"filename":"gnocchi\/common\/redis.py","sha":"8f9ceeb857573fb4aad3406d9a011dde3d72064f","additions":1,"patch":"@@ -30,6 +30,7 @@\n from gnocchi import utils\n \n \n+SEP_S = ':'\n SEP = b':'\n \n CLIENT_ARGS = frozenset([","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/common\/redis.py?ref=88782d6bcee6d91fddcc719d55b2d2944d14511e"},{"status":"modified","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/88782d6bcee6d91fddcc719d55b2d2944d14511e\/gnocchi\/incoming\/__init__.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/88782d6bcee6d91fddcc719d55b2d2944d14511e\/gnocchi\/incoming\/__init__.py","changes":4,"filename":"gnocchi\/incoming\/__init__.py","sha":"795e50ebddf9f2b8098589fb226af384f870927b","additions":4,"patch":"@@ -211,6 +211,10 @@ def delete_unprocessed_measures_for_metric(metric_id):\n     def process_measure_for_metrics(metric_id):\n         raise exceptions.NotImplementedError\n \n+    @staticmethod\n+    def process_measures_for_sack(sack):\n+        raise exceptions.NotImplementedError\n+\n     @staticmethod\n     def has_unprocessed(metric_id):\n         raise exceptions.NotImplementedError","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/incoming\/__init__.py?ref=88782d6bcee6d91fddcc719d55b2d2944d14511e"},{"status":"modified","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/88782d6bcee6d91fddcc719d55b2d2944d14511e\/gnocchi\/incoming\/ceph.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/88782d6bcee6d91fddcc719d55b2d2944d14511e\/gnocchi\/incoming\/ceph.py","changes":32,"filename":"gnocchi\/incoming\/ceph.py","sha":"01fd4390420ce24d2b51cf0e0d6556df939bf933","additions":32,"patch":"@@ -13,6 +13,7 @@\n # under the License.\n from collections import defaultdict\n import contextlib\n+import daiquiri\n import datetime\n import json\n import uuid\n@@ -25,6 +26,8 @@\n \n rados = ceph.rados\n \n+LOG = daiquiri.getLogger(__name__)\n+\n \n class CephStorage(incoming.IncomingDriver):\n \n@@ -214,3 +217,32 @@ def process_measure_for_metrics(self, metric_ids):\n                 self.ioctx.remove_omap_keys(op, tuple(keys.keys()))\n                 self.ioctx.operate_write_op(op, str(sack),\n                                             flags=self.OMAP_WRITE_FLAGS)\n+\n+    @contextlib.contextmanager\n+    def process_measures_for_sack(self, sack):\n+        measures = defaultdict(self._make_measures_array)\n+        processed_keys = set()\n+        omaps = self._list_keys_to_process(\n+            sack, prefix=self.MEASURE_PREFIX + \"_\")\n+        for k, v in six.iteritems(omaps):\n+            try:\n+                metric_id = uuid.UUID(k.split(\"_\")[1])\n+            except (ValueError, IndexError):\n+                LOG.warning(\"Unable to parse measure object name %s\",\n+                            k)\n+                continue\n+            measures[metric_id] = numpy.concatenate(\n+                (measures[metric_id], self._unserialize_measures(k, v))\n+            )\n+            processed_keys.add(k)\n+\n+        yield measures\n+\n+        # Now clean omap\n+        if processed_keys:\n+            with rados.WriteOpCtx() as op:\n+                # NOTE(sileht): come on Ceph, no return code\n+                # for this operation ?!!\n+                self.ioctx.remove_omap_keys(op, tuple(processed_keys))\n+                self.ioctx.operate_write_op(op, str(sack),\n+                                            flags=self.OMAP_WRITE_FLAGS)","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/incoming\/ceph.py?ref=88782d6bcee6d91fddcc719d55b2d2944d14511e"},{"status":"modified","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/88782d6bcee6d91fddcc719d55b2d2944d14511e\/gnocchi\/incoming\/file.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/88782d6bcee6d91fddcc719d55b2d2944d14511e\/gnocchi\/incoming\/file.py","changes":30,"filename":"gnocchi\/incoming\/file.py","sha":"89432d5ea0aa5073c95d0e7b4965d50e1d9f4e76","additions":30,"patch":"@@ -20,12 +20,15 @@\n import tempfile\n import uuid\n \n+import daiquiri\n import numpy\n import six\n \n from gnocchi import incoming\n from gnocchi import utils\n \n+LOG = daiquiri.getLogger(__name__)\n+\n \n class FileStorage(incoming.IncomingDriver):\n     def __init__(self, conf, greedy=True):\n@@ -179,3 +182,30 @@ def process_measure_for_metrics(self, metric_ids):\n \n         for metric_id, files in six.iteritems(processed_files):\n             self._delete_measures_files_for_metric(metric_id, files)\n+\n+    @contextlib.contextmanager\n+    def process_measures_for_sack(self, sack):\n+        measures = {}\n+        processed_files = {}\n+        for metric_id in self._list_target(self._sack_path(sack)):\n+            try:\n+                metric_id = uuid.UUID(metric_id)\n+            except ValueError:\n+                LOG.error(\"Unable to parse %s as an UUID, ignoring metric\",\n+                          metric_id)\n+                continue\n+            files = self._list_measures_container_for_metric_str(\n+                sack, metric_id)\n+            processed_files[metric_id] = files\n+            m = self._make_measures_array()\n+            for f in files:\n+                abspath = self._build_measure_path(metric_id, f)\n+                with open(abspath, \"rb\") as e:\n+                    m = numpy.concatenate((\n+                        m, self._unserialize_measures(f, e.read())))\n+            measures[metric_id] = m\n+\n+        yield measures\n+\n+        for metric_id, files in six.iteritems(processed_files):\n+            self._delete_measures_files_for_metric(metric_id, files)","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/incoming\/file.py?ref=88782d6bcee6d91fddcc719d55b2d2944d14511e"},{"status":"modified","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/88782d6bcee6d91fddcc719d55b2d2944d14511e\/gnocchi\/incoming\/redis.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/88782d6bcee6d91fddcc719d55b2d2944d14511e\/gnocchi\/incoming\/redis.py","changes":46,"filename":"gnocchi\/incoming\/redis.py","sha":"55c47b64cb4acfaebbd067232a8a02d4fd9daee5","additions":46,"patch":"@@ -14,13 +14,18 @@\n # License for the specific language governing permissions and limitations\n # under the License.\n import contextlib\n+import uuid\n \n+import daiquiri\n import six\n \n from gnocchi.common import redis\n from gnocchi import incoming\n \n \n+LOG = daiquiri.getLogger(__name__)\n+\n+\n class RedisStorage(incoming.IncomingDriver):\n \n     _SCRIPTS = {\n@@ -30,6 +35,23 @@ class RedisStorage(incoming.IncomingDriver):\n if llen > 0 then llen = llen - 1 end\n return {llen, table.concat(redis.call(\"LRANGE\", KEYS[1], 0, llen), \"\")}\n \"\"\",\n+        \"process_measures_for_sack\": \"\"\"\n+local results = {}\n+local metric_id_extractor = \"[^%s]*%s([^%s]*)\"\n+local metric_with_measures = redis.call(\"KEYS\", KEYS[1] .. \"%s*\")\n+for i, sack_metric in ipairs(metric_with_measures) do\n+    local llen = redis.call(\"LLEN\", sack_metric)\n+    local metric_id = sack_metric:gmatch(metric_id_extractor)()\n+    -- lrange is inclusive on both ends, decrease to grab exactly n items\n+    if llen > 0 then llen = llen - 1 end\n+    results[#results + 1] = {\n+        metric_id,\n+        llen,\n+        table.concat(redis.call(\"LRANGE\", sack_metric, 0, llen), \"\")\n+    }\n+end\n+return results\n+\"\"\" % (redis.SEP_S, redis.SEP_S, redis.SEP_S, redis.SEP_S),\n     }\n \n     def __init__(self, conf, greedy=True):\n@@ -135,6 +157,30 @@ def process_measure_for_metrics(self, metric_ids):\n             pipe.ltrim(key, item_len + 1, -1)\n         pipe.execute()\n \n+    @contextlib.contextmanager\n+    def process_measures_for_sack(self, sack):\n+        results = self._scripts['process_measures_for_sack'](keys=[str(sack)])\n+\n+        measures = {}\n+        for metric_id, item_len, data in results:\n+            try:\n+                metric_id = uuid.UUID(metric_id.decode())\n+            except ValueError:\n+                LOG.error(\"Unable to parse metric id %s, ignoring\",\n+                          metric_id)\n+                continue\n+            measures[metric_id] = self._unserialize_measures(metric_id, data)\n+\n+        yield measures\n+\n+        pipe = self._client.pipeline()\n+        for metric_id, item_len, data in results:\n+            key = self._build_measure_path_with_sack(\n+                metric_id.decode(), str(sack))\n+            # ltrim is inclusive, bump 1 to remove up to and including nth item\n+            pipe.ltrim(key, item_len + 1, -1)\n+        pipe.execute()\n+\n     def iter_on_sacks_to_process(self):\n         self._client.config_set(\"notify-keyspace-events\", \"K$\")\n         p = self._client.pubsub()","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/incoming\/redis.py?ref=88782d6bcee6d91fddcc719d55b2d2944d14511e"},{"status":"modified","deletions":29,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/88782d6bcee6d91fddcc719d55b2d2944d14511e\/gnocchi\/incoming\/s3.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/88782d6bcee6d91fddcc719d55b2d2944d14511e\/gnocchi\/incoming\/s3.py","changes":78,"filename":"gnocchi\/incoming\/s3.py","sha":"2c0ed6e15f8c0a0fb70f284eeafc4433f2f42227","additions":49,"patch":"@@ -15,6 +15,7 @@\n # under the License.\n from collections import defaultdict\n import contextlib\n+import daiquiri\n import datetime\n import json\n import uuid\n@@ -27,11 +28,13 @@\n boto3 = s3.boto3\n botocore = s3.botocore\n \n+LOG = daiquiri.getLogger(__name__)\n+\n \n class S3Storage(incoming.IncomingDriver):\n \n     # NOTE(gordc): override to follow s3 partitioning logic\n-    SACK_NAME_FORMAT = \"{number}-{total}\/\"\n+    SACK_NAME_FORMAT = \"{number}-{total}\"\n \n     def __init__(self, conf, greedy=True):\n         super(S3Storage, self).__init__(conf)\n@@ -78,9 +81,9 @@ def _store_new_measures(self, metric_id, data):\n         now = datetime.datetime.utcnow().strftime(\"_%Y%m%d_%H:%M:%S\")\n         self.s3.put_object(\n             Bucket=self._bucket_name_measures,\n-            Key=(str(self.sack_for_metric(metric_id))\n-                 + str(metric_id) + \"\/\"\n-                 + str(uuid.uuid4()) + now),\n+            Key=\"\/\".join((str(self.sack_for_metric(metric_id)),\n+                          str(metric_id),\n+                          str(uuid.uuid4()) + now)),\n             Body=data)\n \n     def _build_report(self, details):\n@@ -103,48 +106,40 @@ def _build_report(self, details):\n         return (len(metric_details), sum(metric_details.values()),\n                 metric_details if details else None)\n \n-    def list_metric_with_measures_to_process(self, sack):\n-        limit = 1000        # 1000 is the default anyway\n-        metrics = set()\n+    def _list_files(self, path_items, **kwargs):\n         response = {}\n         # Handle pagination\n         while response.get('IsTruncated', True):\n             if 'NextContinuationToken' in response:\n-                kwargs = {\n-                    'ContinuationToken': response['NextContinuationToken']\n-                }\n+                kwargs['ContinuationToken'] = response['NextContinuationToken']\n             else:\n-                kwargs = {}\n+                try:\n+                    del kwargs['ContinuationToken']\n+                except KeyError:\n+                    pass\n             response = self.s3.list_objects_v2(\n                 Bucket=self._bucket_name_measures,\n-                Prefix=str(sack),\n-                Delimiter=\"\/\",\n-                MaxKeys=limit,\n+                Prefix=\"\/\".join(path_items) + \"\/\",\n                 **kwargs)\n+            yield response\n+\n+    def list_metric_with_measures_to_process(self, sack):\n+        metrics = set()\n+        for response in self._list_files((str(sack),), Delimiter=\"\/\"):\n             for p in response.get('CommonPrefixes', ()):\n                 metrics.add(p['Prefix'].split('\/', 2)[1])\n         return metrics\n \n-    def _list_measure_files_for_metric(self, sack, metric_id):\n+    def _list_measure_files(self, path_items):\n         files = set()\n-        response = {}\n-        while response.get('IsTruncated', True):\n-            if 'NextContinuationToken' in response:\n-                kwargs = {\n-                    'ContinuationToken': response['NextContinuationToken']\n-                }\n-            else:\n-                kwargs = {}\n-            response = self.s3.list_objects_v2(\n-                Bucket=self._bucket_name_measures,\n-                Prefix=(str(sack) + str(metric_id) + \"\/\"),\n-                **kwargs)\n-\n+        for response in self._list_files(path_items):\n             for c in response.get('Contents', ()):\n                 files.add(c['Key'])\n-\n         return files\n \n+    def _list_measure_files_for_metric(self, sack, metric_id):\n+        return self._list_measure_files((str(sack), str(metric_id)))\n+\n     def delete_unprocessed_measures_for_metric(self, metric_id):\n         sack = self.sack_for_metric(metric_id)\n         files = self._list_measure_files_for_metric(sack, metric_id)\n@@ -175,3 +170,28 @@ def process_measure_for_metrics(self, metric_ids):\n \n         # Now clean objects\n         s3.bulk_delete(self.s3, self._bucket_name_measures, all_files)\n+\n+    @contextlib.contextmanager\n+    def process_measures_for_sack(self, sack):\n+        measures = defaultdict(self._make_measures_array)\n+        files = self._list_measure_files((str(sack),))\n+        for f in files:\n+            try:\n+                sack, metric_id, measure_id = f.split(\"\/\")\n+                metric_id = uuid.UUID(metric_id)\n+            except ValueError:\n+                LOG.warning(\"Unable to parse measure file name %s\", f)\n+                continue\n+\n+            response = self.s3.get_object(\n+                Bucket=self._bucket_name_measures,\n+                Key=f)\n+            measures[metric_id] = numpy.concatenate((\n+                measures[metric_id],\n+                self._unserialize_measures(f, response['Body'].read())\n+            ))\n+\n+        yield measures\n+\n+        # Now clean objects\n+        s3.bulk_delete(self.s3, self._bucket_name_measures, files)","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/incoming\/s3.py?ref=88782d6bcee6d91fddcc719d55b2d2944d14511e"},{"status":"modified","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/88782d6bcee6d91fddcc719d55b2d2944d14511e\/gnocchi\/incoming\/swift.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/88782d6bcee6d91fddcc719d55b2d2944d14511e\/gnocchi\/incoming\/swift.py","changes":27,"filename":"gnocchi\/incoming\/swift.py","sha":"06500f9de3ab7d1ad021c5df2c82d0bd7815d0e0","additions":27,"patch":"@@ -13,6 +13,7 @@\n # under the License.\n from collections import defaultdict\n import contextlib\n+import daiquiri\n import datetime\n import json\n import uuid\n@@ -25,6 +26,8 @@\n swclient = swift.swclient\n swift_utils = swift.swift_utils\n \n+LOG = daiquiri.getLogger(__name__)\n+\n \n class SwiftStorage(incoming.IncomingDriver):\n     def __init__(self, conf, greedy=True):\n@@ -117,3 +120,27 @@ def process_measure_for_metrics(self, metric_ids):\n         # Now clean objects\n         for sack_name, files in six.iteritems(all_files):\n             swift.bulk_delete(self.swift, sack_name, files)\n+\n+    @contextlib.contextmanager\n+    def process_measures_for_sack(self, sack):\n+        measures = defaultdict(self._make_measures_array)\n+        sack_name = str(sack)\n+        headers, files = self.swift.get_container(sack_name, full_listing=True)\n+        for f in files:\n+            try:\n+                metric_id, random_id = f['name'].split(\"\/\")\n+                metric_id = uuid.UUID(metric_id)\n+            except ValueError:\n+                LOG.warning(\"Unable to parse measure file name %s\", f)\n+                continue\n+            measures[metric_id] = self._array_concatenate([\n+                measures[metric_id],\n+                self._unserialize_measures(\n+                    metric_id,\n+                    self.swift.get_object(sack_name, f['name'])[1],\n+                )\n+            ])\n+\n+        yield measures\n+\n+        swift.bulk_delete(self.swift, sack_name, files)","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/incoming\/swift.py?ref=88782d6bcee6d91fddcc719d55b2d2944d14511e"},{"status":"modified","deletions":2,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/88782d6bcee6d91fddcc719d55b2d2944d14511e\/gnocchi\/tests\/base.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/88782d6bcee6d91fddcc719d55b2d2944d14511e\/gnocchi\/tests\/base.py","changes":6,"filename":"gnocchi\/tests\/base.py","sha":"f0d66b4ee5dda9ab597ee0479fabc12edc6940a0","additions":4,"patch":"@@ -389,5 +389,7 @@ def _create_metric(self, archive_policy_name=\"low\"):\n \n     def trigger_processing(self, metrics=None):\n         if metrics is None:\n-            metrics = [str(self.metric.id)]\n-        self.chef.process_new_measures(metrics, sync=True)\n+            self.chef.process_new_measures_for_sack(\n+                self.incoming.sack_for_metric(self.metric.id), sync=True)\n+        else:\n+            self.chef.process_new_measures(metrics, sync=True)","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/base.py?ref=88782d6bcee6d91fddcc719d55b2d2944d14511e"},{"status":"modified","deletions":3,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/88782d6bcee6d91fddcc719d55b2d2944d14511e\/gnocchi\/tests\/test_chef.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/88782d6bcee6d91fddcc719d55b2d2944d14511e\/gnocchi\/tests\/test_chef.py","changes":4,"filename":"gnocchi\/tests\/test_chef.py","sha":"0fd7a483e02de768d427493b483b8a2767fe155b","additions":1,"patch":"@@ -41,10 +41,8 @@ def test_delete_nonempty_metric_unprocessed(self):\n         self.index.delete_metric(self.metric.id)\n         self.trigger_processing()\n         __, __, details = self.incoming._build_report(True)\n-        self.assertIn(str(self.metric.id), details)\n-        self.chef.expunge_metrics(sync=True)\n-        __, __, details = self.incoming._build_report(True)\n         self.assertNotIn(str(self.metric.id), details)\n+        self.chef.expunge_metrics(sync=True)\n \n     def test_delete_expunge_metric(self):\n         self.incoming.add_measures(self.metric.id, [","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/test_chef.py?ref=88782d6bcee6d91fddcc719d55b2d2944d14511e"}],"committer":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"stats":{"deletions":37,"additions":224,"total":261},"author":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/88782d6bcee6d91fddcc719d55b2d2944d14511e","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/88782d6bcee6d91fddcc719d55b2d2944d14511e\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/88782d6bcee6d91fddcc719d55b2d2944d14511e","sha":"88782d6bcee6d91fddcc719d55b2d2944d14511e","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/827ed4c3c8f8ed726692f7b1e4ce37777f906bb6","sha":"827ed4c3c8f8ed726692f7b1e4ce37777f906bb6","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/827ed4c3c8f8ed726692f7b1e4ce37777f906bb6"}],"commit":{"committer":{"date":"2018-03-13T09:02:27Z","name":"Julien Danjou","email":"julien@danjou.info"},"author":{"date":"2018-02-26T15:23:01Z","name":"Julien Danjou","email":"julien@danjou.info"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/88782d6bcee6d91fddcc719d55b2d2944d14511e","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/af9ac746c0713660ec88870515da224f3931b913","sha":"af9ac746c0713660ec88870515da224f3931b913"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"incoming: introduce process_measures_for_sack\n\nThis adds a new method process_measures_for_sack to incoming storage driver. It\nallows to read an entire sack for new measure rather than individual metrics.\nThis avoids doing 2 listing to process new metrics and only does one to load\nthe measures.\n\nThe process_new_measures(metrics) is kept for the refresh_metric() use case for\nnow. Some refactoring might be possible after this patch.\n\nThe S3 storage driver is a bit modified to store the incoming measures in\n<sack>\/<metric>\/ rather than <sack><metric>\/ so it's easier to list incoming\nsacks and metrics."}},{"files":[{"status":"modified","deletions":6,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/3d0c5c5dd7e3a06cad95871f2860b9772a1595ee\/gnocchi\/chef.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/3d0c5c5dd7e3a06cad95871f2860b9772a1595ee\/gnocchi\/chef.py","changes":21,"filename":"gnocchi\/chef.py","sha":"38cce4b718cf8e438fe8923d191e1d224a175d51","additions":15,"patch":"@@ -29,8 +29,11 @@\n LOG = daiquiri.getLogger(__name__)\n \n \n-class SackLockTimeoutError(Exception):\n-        pass\n+class SackAlreadyLocked(Exception):\n+    def __init__(self, sack):\n+        self.sack = sack\n+        super(SackAlreadyLocked, self).__init__(\n+                \"Sack %s already locked\" % sack)\n \n \n class Chef(object):\n@@ -103,9 +106,7 @@ def refresh_metric(self, metric, timeout):\n         s = self.incoming.sack_for_metric(metric.id)\n         lock = self.get_sack_lock(s)\n         if not lock.acquire(blocking=timeout):\n-            raise SackLockTimeoutError(\n-                'Unable to refresh metric: %s. Metric is locked. '\n-                'Please try again.' % metric.id)\n+            raise SackAlreadyLocked(s)\n         try:\n             self.process_new_measures([str(metric.id)])\n         finally:\n@@ -140,11 +141,17 @@ def process_new_measures(self, metrics_to_process, sync=False):\n     def process_new_measures_for_sack(self, sack, sync=False):\n         \"\"\"Process added measures in background.\n \n+        Lock a sack and try to process measures from it. If the sack cannot be\n+        locked, the method will raise `SackAlreadyLocked`.\n+\n         :param sack: The sack to process new measures for.\n         :param sync: If True, raise any issue immediately otherwise just log it\n         :return: The number of metrics processed.\n+\n         \"\"\"\n-        # NOTE(gordc): must lock at sack level\n+        lock = self.get_sack_lock(sack)\n+        if not lock.acquire(blocking=False):\n+            raise SackAlreadyLocked(sack)\n         LOG.debug(\"Processing measures for sack %s\", sack)\n         try:\n             with self.incoming.process_measures_for_sack(sack) as measures:\n@@ -165,6 +172,8 @@ def process_new_measures_for_sack(self, sack, sync=False):\n                 raise\n             LOG.error(\"Error processing new measures\", exc_info=True)\n             return 0\n+        finally:\n+            lock.release()\n \n     def get_sack_lock(self, sack):\n         # FIXME(jd) Some tooz drivers have a limitation on lock name length","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/chef.py?ref=3d0c5c5dd7e3a06cad95871f2860b9772a1595ee"},{"status":"modified","deletions":9,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/3d0c5c5dd7e3a06cad95871f2860b9772a1595ee\/gnocchi\/cli\/metricd.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/3d0c5c5dd7e3a06cad95871f2860b9772a1595ee\/gnocchi\/cli\/metricd.py","changes":13,"filename":"gnocchi\/cli\/metricd.py","sha":"6e1155daefd039c0c33a61bad393b3ab99918e18","additions":4,"patch":"@@ -230,22 +230,17 @@ def _run_job(self):\n             sacks = (self.sacks_with_measures_to_process.copy()\n                      or self._get_sacks_to_process())\n         for s in sacks:\n-            # TODO(gordc): support delay release lock so we don't\n-            # process a sack right after another process\n-            lock = self.chef.get_sack_lock(s)\n-            if not lock.acquire(blocking=False):\n-                continue\n-\n             try:\n-                m_count += self.chef.process_new_measures_for_sack(s)\n+                try:\n+                    m_count += self.chef.process_new_measures_for_sack(s)\n+                except chef.SackAlreadyLocked:\n+                    continue\n                 s_count += 1\n                 self.incoming.finish_sack_processing(s)\n                 self.sacks_with_measures_to_process.discard(s)\n             except Exception:\n                 LOG.error(\"Unexpected error processing assigned job\",\n                           exc_info=True)\n-            finally:\n-                lock.release()\n         LOG.debug(\"%d metrics processed from %d sacks\", m_count, s_count)\n         if sacks == self._get_sacks_to_process():\n             # We just did a full scan of all sacks, reset the timer","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/cli\/metricd.py?ref=3d0c5c5dd7e3a06cad95871f2860b9772a1595ee"},{"status":"modified","deletions":3,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/3d0c5c5dd7e3a06cad95871f2860b9772a1595ee\/gnocchi\/rest\/api.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/3d0c5c5dd7e3a06cad95871f2860b9772a1595ee\/gnocchi\/rest\/api.py","changes":9,"filename":"gnocchi\/rest\/api.py","sha":"44fa78e98ff2677b472e16a1ecebccdd3cdd6744","additions":6,"patch":"@@ -532,8 +532,9 @@ def get_measures(self, start=None, stop=None, aggregation='mean',\n                 pecan.request.chef.refresh_metric(\n                     self.metric,\n                     pecan.request.conf.api.operation_timeout)\n-            except chef.SackLockTimeoutError as e:\n-                abort(503, six.text_type(e))\n+            except chef.SackAlreadyLocked as e:\n+                abort(503, 'Unable to refresh metric: %s. Metric is locked. '\n+                      'Please try again.' % self.metric.id)\n         try:\n             return pecan.request.storage.get_measures(\n                 self.metric, aggregations, start, stop, resample)[aggregation]\n@@ -1904,7 +1905,9 @@ def get_cross_metric_measures_from_objs(metrics, start=None, stop=None,\n                         pecan.request.chef.refresh_metric(\n                             m, pecan.request.conf.api.operation_timeout)\n                     except chef.SackLockTimeoutError as e:\n-                        abort(503, six.text_type(e))\n+                        abort(503, 'Unable to refresh metric: %s. '\n+                              'Metric is locked. '\n+                              'Please try again.' % self.metric.id)\n             if number_of_metrics == 1:\n                 # NOTE(sileht): don't do the aggregation if we only have one\n                 # metric","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/rest\/api.py?ref=3d0c5c5dd7e3a06cad95871f2860b9772a1595ee"}],"committer":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"stats":{"deletions":18,"additions":25,"total":43},"author":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/3d0c5c5dd7e3a06cad95871f2860b9772a1595ee","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/3d0c5c5dd7e3a06cad95871f2860b9772a1595ee\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/3d0c5c5dd7e3a06cad95871f2860b9772a1595ee","sha":"3d0c5c5dd7e3a06cad95871f2860b9772a1595ee","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/88782d6bcee6d91fddcc719d55b2d2944d14511e","sha":"88782d6bcee6d91fddcc719d55b2d2944d14511e","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/88782d6bcee6d91fddcc719d55b2d2944d14511e"}],"commit":{"committer":{"date":"2018-03-13T09:02:27Z","name":"Julien Danjou","email":"julien@danjou.info"},"author":{"date":"2018-03-03T17:55:34Z","name":"Julien Danjou","email":"julien@danjou.info"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/3d0c5c5dd7e3a06cad95871f2860b9772a1595ee","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/7181715b2a51bec98c5e37c374c00898f35ecec1","sha":"7181715b2a51bec98c5e37c374c00898f35ecec1"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"chef: lock sack when using process_new_measures_for_sack\n\nThis makes it safer to call it without taking care of the lock externally."}},{"files":[{"status":"modified","deletions":10,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/0a878822e04aa8632a571699680ff5f3fbc5fffd\/gnocchi\/chef.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/0a878822e04aa8632a571699680ff5f3fbc5fffd\/gnocchi\/chef.py","changes":23,"filename":"gnocchi\/chef.py","sha":"223e129b951fdf6acc8201b1899d8367f0e10fb0","additions":13,"patch":"@@ -128,11 +128,13 @@ def process_new_measures(self, metrics_to_process, sync=False):\n             LOG.debug(\"Processing measures for %s\", metrics)\n             with self.incoming.process_measure_for_metrics(\n                     [m.id for m in metrics]) as metrics_and_measures:\n-                for metric, measures in six.iteritems(metrics_and_measures):\n-                    self.storage.compute_and_store_timeseries(\n-                        metrics_by_id[metric], measures\n-                    )\n-                    LOG.debug(\"Measures for metric %s processed\", metrics)\n+                    self.storage.add_measures_to_metrics({\n+                        metrics_by_id[metric]: measures\n+                        for metric, measures\n+                        in six.iteritems(metrics_and_measures)\n+                    })\n+                    LOG.debug(\"Measures for %d metrics processed\",\n+                              len(metrics))\n         except Exception:\n             if sync:\n                 raise\n@@ -161,11 +163,12 @@ def process_new_measures_for_sack(self, sack, sync=False):\n                     attribute_filter={\n                         \"in\": {\"id\": measures.keys()}\n                     })\n-                for metric in metrics:\n-                    self.storage.compute_and_store_timeseries(\n-                        metric, measures[metric.id]\n-                    )\n-                    LOG.debug(\"Measures for metric %s processed\", metric)\n+                self.storage.add_measures_to_metrics({\n+                    metric: measures[metric.id]\n+                    for metric in metrics\n+                })\n+                LOG.debug(\"Measures for %d metrics processed\",\n+                          len(metrics))\n                 return len(measures)\n         except Exception:\n             if sync:","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/chef.py?ref=0a878822e04aa8632a571699680ff5f3fbc5fffd"},{"status":"modified","deletions":107,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/0a878822e04aa8632a571699680ff5f3fbc5fffd\/gnocchi\/storage\/__init__.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/0a878822e04aa8632a571699680ff5f3fbc5fffd\/gnocchi\/storage\/__init__.py","changes":223,"filename":"gnocchi\/storage\/__init__.py","sha":"be7237ed14dd94c56137d4103c04e6610755a3b8","additions":116,"patch":"@@ -487,120 +487,129 @@ def _delete_metric_splits(self, metric, keys_and_aggregations, version=3):\n             ((metric, key, aggregation)\n              for key, aggregation in keys_and_aggregations))\n \n-    def compute_and_store_timeseries(self, metric, measures):\n-        # NOTE(mnaser): The metric could have been handled by\n-        #               another worker, ignore if no measures.\n-        if len(measures) == 0:\n-            LOG.debug(\"Skipping %s (already processed)\", metric)\n-            return\n-\n-        measures = numpy.sort(measures, order='timestamps')\n-\n-        agg_methods = list(metric.archive_policy.aggregation_methods)\n-        block_size = metric.archive_policy.max_block_size\n-        back_window = metric.archive_policy.back_window\n-        definition = metric.archive_policy.definition\n-        # NOTE(sileht): We keep one more blocks to calculate rate of change\n-        # correctly\n-        if any(filter(lambda x: x.startswith(\"rate:\"), agg_methods)):\n-            back_window += 1\n+    def add_measures_to_metrics(self, metrics_and_measures):\n+        \"\"\"Update a metric with a new measures, computing new aggregations.\n \n+        :param metrics_and_measures: A dict there keys are `storage.Metric`\n+                                     objects and values are timeseries array of\n+                                     the new measures.\n+        \"\"\"\n         with utils.StopWatch() as sw:\n-            raw_measures = (\n-                self._get_or_create_unaggregated_timeseries(\n-                    [metric])[metric]\n-            )\n-        LOG.debug(\"Retrieve unaggregated measures for %s in %.2fs\",\n-                  metric.id, sw.elapsed())\n+            raw_measures = self._get_or_create_unaggregated_timeseries(\n+                metrics_and_measures.keys())\n+        LOG.debug(\"Retrieve unaggregated measures for %d metric in %.2fs\",\n+                  len(metrics_and_measures), sw.elapsed())\n \n-        if raw_measures is None:\n-            ts = None\n-        else:\n-            try:\n-                ts = carbonara.BoundTimeSerie.unserialize(\n-                    raw_measures, block_size, back_window)\n-            except carbonara.InvalidData:\n-                LOG.error(\"Data corruption detected for %s \"\n-                          \"unaggregated timeserie, creating a new one\",\n-                          metric.id)\n-                ts = None\n+        new_boundts = []\n \n-        if ts is None:\n-            # This is the first time we treat measures for this\n-            # metric, or data are corrupted, create a new one\n-            ts = carbonara.BoundTimeSerie(block_size=block_size,\n-                                          back_window=back_window)\n-            current_first_block_timestamp = None\n-        else:\n-            current_first_block_timestamp = ts.first_block_timestamp()\n-\n-        # NOTE(jd) This is Python where you need such\n-        # hack to pass a variable around a closure,\n-        # sorry.\n-        computed_points = {\"number\": 0}\n-\n-        def _map_compute_splits_operations(bound_timeserie):\n-            # NOTE (gordc): bound_timeserie is entire set of\n-            # unaggregated measures matching largest\n-            # granularity. the following takes only the points\n-            # affected by new measures for specific granularity\n-            tstamp = max(bound_timeserie.first, measures['timestamps'][0])\n-            new_first_block_timestamp = bound_timeserie.first_block_timestamp()\n-            computed_points['number'] = len(bound_timeserie)\n-\n-            aggregations = metric.archive_policy.aggregations\n-\n-            grouped_timeseries = {\n-                granularity: bound_timeserie.group_serie(\n-                    granularity,\n-                    carbonara.round_timestamp(tstamp, granularity))\n-                for granularity, aggregations\n-                # No need to sort the aggregation, they are already\n-                in itertools.groupby(aggregations, ATTRGETTER_GRANULARITY)\n-            }\n-\n-            aggregations_and_timeseries = {\n-                aggregation: carbonara.AggregatedTimeSerie.from_grouped_serie(\n-                    grouped_timeseries[aggregation.granularity], aggregation)\n-                for aggregation in aggregations\n-            }\n-\n-            deleted_keys, keys_and_split_to_store = (\n-                self._compute_split_operations(\n-                    metric, aggregations_and_timeseries,\n-                    current_first_block_timestamp,\n-                    new_first_block_timestamp)\n-            )\n+        for metric, measures in six.iteritems(metrics_and_measures):\n+            if len(measures) == 0:\n+                continue\n \n-            return (new_first_block_timestamp,\n-                    deleted_keys,\n-                    keys_and_split_to_store)\n+            measures = numpy.sort(measures, order='timestamps')\n \n-        with utils.StopWatch() as sw:\n-            (new_first_block_timestamp,\n-             deleted_keys,\n-             keys_and_splits_to_store) = ts.set_values(\n-                 measures,\n-                 before_truncate_callback=_map_compute_splits_operations,\n-            )\n-            self._delete_metric_splits(metric, deleted_keys)\n-            self._store_timeserie_splits(metric, keys_and_splits_to_store,\n-                                         new_first_block_timestamp)\n-\n-        number_of_operations = (len(agg_methods) * len(definition))\n-        perf = \"\"\n-        elapsed = sw.elapsed()\n-        if elapsed > 0:\n-            perf = \" (%d points\/s, %d measures\/s)\" % (\n-                ((number_of_operations * computed_points['number']) \/\n-                    elapsed),\n-                ((number_of_operations * len(measures)) \/ elapsed)\n-            )\n-        LOG.debug(\"Computed new metric %s with %d new measures \"\n-                  \"in %.2f seconds%s\",\n-                  metric.id, len(measures), elapsed, perf)\n+            agg_methods = list(metric.archive_policy.aggregation_methods)\n+            block_size = metric.archive_policy.max_block_size\n+            back_window = metric.archive_policy.back_window\n+            definition = metric.archive_policy.definition\n+            # NOTE(sileht): We keep one more blocks to calculate rate of change\n+            # correctly\n+            if any(filter(lambda x: x.startswith(\"rate:\"), agg_methods)):\n+                back_window += 1\n \n-        self._store_unaggregated_timeseries([(metric, ts.serialize())])\n+            if raw_measures[metric] is None:\n+                ts = None\n+            else:\n+                try:\n+                    ts = carbonara.BoundTimeSerie.unserialize(\n+                        raw_measures[metric], block_size, back_window)\n+                except carbonara.InvalidData:\n+                    LOG.error(\"Data corruption detected for %s \"\n+                              \"unaggregated timeserie, creating a new one\",\n+                              metric.id)\n+                    ts = None\n+\n+            if ts is None:\n+                # This is the first time we treat measures for this\n+                # metric, or data are corrupted, create a new one\n+                ts = carbonara.BoundTimeSerie(block_size=block_size,\n+                                              back_window=back_window)\n+                current_first_block_timestamp = None\n+            else:\n+                current_first_block_timestamp = ts.first_block_timestamp()\n+\n+            # NOTE(jd) This is Python where you need such\n+            # hack to pass a variable around a closure,\n+            # sorry.\n+            computed_points = {\"number\": 0}\n+\n+            def _map_compute_splits_operations(bound_timeserie):\n+                # NOTE (gordc): bound_timeserie is entire set of\n+                # unaggregated measures matching largest\n+                # granularity. the following takes only the points\n+                # affected by new measures for specific granularity\n+                tstamp = max(bound_timeserie.first, measures['timestamps'][0])\n+                new_first_block_timestamp = (\n+                    bound_timeserie.first_block_timestamp()\n+                )\n+                computed_points['number'] = len(bound_timeserie)\n+\n+                aggregations = metric.archive_policy.aggregations\n+\n+                grouped_timeseries = {\n+                    granularity: bound_timeserie.group_serie(\n+                        granularity,\n+                        carbonara.round_timestamp(tstamp, granularity))\n+                    for granularity, aggregations\n+                    # No need to sort the aggregation, they are already\n+                    in itertools.groupby(aggregations, ATTRGETTER_GRANULARITY)\n+                }\n+\n+                aggregations_and_timeseries = {\n+                    aggregation:\n+                    carbonara.AggregatedTimeSerie.from_grouped_serie(\n+                        grouped_timeseries[aggregation.granularity],\n+                        aggregation)\n+                    for aggregation in aggregations\n+                }\n+\n+                deleted_keys, keys_and_split_to_store = (\n+                    self._compute_split_operations(\n+                        metric, aggregations_and_timeseries,\n+                        current_first_block_timestamp,\n+                        new_first_block_timestamp)\n+                )\n+\n+                return (new_first_block_timestamp,\n+                        deleted_keys,\n+                        keys_and_split_to_store)\n+\n+            with utils.StopWatch() as sw:\n+                (new_first_block_timestamp,\n+                 deleted_keys,\n+                 keys_and_splits_to_store) = ts.set_values(\n+                     measures,\n+                     before_truncate_callback=_map_compute_splits_operations)\n+                self._delete_metric_splits(metric, deleted_keys)\n+                self._store_timeserie_splits(metric, keys_and_splits_to_store,\n+                                             new_first_block_timestamp)\n+\n+            new_boundts.append((metric, ts.serialize()))\n+\n+            number_of_operations = (len(agg_methods) * len(definition))\n+            perf = \"\"\n+            elapsed = sw.elapsed()\n+            if elapsed > 0:\n+                perf = \" (%d points\/s, %d measures\/s)\" % (\n+                    ((number_of_operations * computed_points['number']) \/\n+                        elapsed),\n+                    ((number_of_operations * len(measures)) \/ elapsed)\n+                )\n+            LOG.debug(\"Computed new metric %s with %d new measures \"\n+                      \"in %.2f seconds%s\",\n+                      metric.id, len(measures), elapsed, perf)\n+\n+        self._store_unaggregated_timeseries(new_boundts)\n \n     def find_measure(self, metric, predicate, granularity, aggregation=\"mean\",\n                      from_timestamp=None, to_timestamp=None):","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/__init__.py?ref=0a878822e04aa8632a571699680ff5f3fbc5fffd"}],"committer":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"stats":{"deletions":117,"additions":129,"total":246},"author":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/0a878822e04aa8632a571699680ff5f3fbc5fffd","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/0a878822e04aa8632a571699680ff5f3fbc5fffd\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/0a878822e04aa8632a571699680ff5f3fbc5fffd","sha":"0a878822e04aa8632a571699680ff5f3fbc5fffd","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/3d0c5c5dd7e3a06cad95871f2860b9772a1595ee","sha":"3d0c5c5dd7e3a06cad95871f2860b9772a1595ee","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/3d0c5c5dd7e3a06cad95871f2860b9772a1595ee"}],"commit":{"committer":{"date":"2018-03-13T09:04:14Z","name":"Julien Danjou","email":"julien@danjou.info"},"author":{"date":"2018-03-05T15:11:13Z","name":"Julien Danjou","email":"julien@danjou.info"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/0a878822e04aa8632a571699680ff5f3fbc5fffd","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/b6cf455a0353047e5fc7da96e62a63a148c98725","sha":"b6cf455a0353047e5fc7da96e62a63a148c98725"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"chef\/storage: process all metrics from the sack in one single batch\n\nThis allows in this first step to retrieve and store the unaggregated\ntimeseries all at once."}},{"files":[{"status":"modified","deletions":2,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/e60e66cfb0a73a9dd2a021d53682b115dc5ec8b9\/gnocchi\/storage\/__init__.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/e60e66cfb0a73a9dd2a021d53682b115dc5ec8b9\/gnocchi\/storage\/__init__.py","changes":12,"filename":"gnocchi\/storage\/__init__.py","sha":"8b4d12fc335586d7bd658a79c6a9c5694dbc467a","additions":10,"patch":"@@ -481,10 +481,18 @@ def _delete_metric(metric):\n     def _delete_metric_splits_unbatched(metric, keys, aggregation, version=3):\n         raise NotImplementedError\n \n-    def _delete_metric_splits(self, metric, keys_and_aggregations, version=3):\n+    def _delete_metric_splits(self, metrics_keys_aggregations, version=3):\n+        \"\"\"Delete splits of metrics.\n+\n+        :param metrics_keys_aggregations: A dict where keys are\n+                                         `storage.Metric` and values are lists\n+                                         of (key, aggregation) tuples.\n+        \"\"\"\n         utils.parallel_map(\n             utils.return_none_on_failure(self._delete_metric_splits_unbatched),\n             ((metric, key, aggregation)\n+             for metric, keys_and_aggregations\n+             in six.iteritems(metrics_keys_aggregations)\n              for key, aggregation in keys_and_aggregations))\n \n     def add_measures_to_metrics(self, metrics_and_measures):\n@@ -590,7 +598,7 @@ def _map_compute_splits_operations(bound_timeserie):\n                  keys_and_splits_to_store) = ts.set_values(\n                      measures,\n                      before_truncate_callback=_map_compute_splits_operations)\n-                self._delete_metric_splits(metric, deleted_keys)\n+                self._delete_metric_splits({metric: deleted_keys})\n                 self._store_timeserie_splits(metric, keys_and_splits_to_store,\n                                              new_first_block_timestamp)\n ","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/__init__.py?ref=e60e66cfb0a73a9dd2a021d53682b115dc5ec8b9"},{"status":"modified","deletions":16,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/e60e66cfb0a73a9dd2a021d53682b115dc5ec8b9\/gnocchi\/storage\/ceph.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/e60e66cfb0a73a9dd2a021d53682b115dc5ec8b9\/gnocchi\/storage\/ceph.py","changes":36,"filename":"gnocchi\/storage\/ceph.py","sha":"ed4e860135472cc47e0abd7c9f0f28dfa087b37c","additions":20,"patch":"@@ -94,23 +94,27 @@ def _store_metric_splits(self, metric, keys_aggregations_data_offset,\n             self.ioctx.operate_write_op(\n                 op, self._build_unaggregated_timeserie_path(metric, 3))\n \n-    def _delete_metric_splits(self, metric, keys_and_aggregations, version=3):\n-        names = tuple(\n-            self._get_object_name(metric, key, aggregation.method, version)\n-            for key, aggregation in keys_and_aggregations\n-        )\n+    def _delete_metric_splits(self, metric, metrics_keys_aggregations,\n+                              version=3):\n         with rados.WriteOpCtx() as op:\n-            for name in names:\n-                try:\n-                    self.ioctx.remove_object(name)\n-                except rados.ObjectNotFound:\n-                    # It's possible that we already remove that object and then\n-                    # crashed before removing it from the OMAP key list; then\n-                    # no big deal anyway.\n-                    pass\n-            self.ioctx.remove_omap_keys(op, names)\n-            self.ioctx.operate_write_op(\n-                op, self._build_unaggregated_timeserie_path(metric, 3))\n+            for metric, keys_and_aggregations in six.iteritems(\n+                    metrics_keys_aggregations):\n+                names = tuple(\n+                    self._get_object_name(\n+                        metric, key, aggregation.method, version)\n+                    for key, aggregation in keys_and_aggregations\n+                )\n+                for name in names:\n+                    try:\n+                        self.ioctx.remove_object(name)\n+                    except rados.ObjectNotFound:\n+                        # It's possible that we already remove that object and\n+                        # then crashed before removing it from the OMAP key\n+                        # list; then no big deal anyway.\n+                        pass\n+                self.ioctx.remove_omap_keys(op, names)\n+                self.ioctx.operate_write_op(\n+                    op, self._build_unaggregated_timeserie_path(metric, 3))\n \n     def _delete_metric(self, metric):\n         with rados.ReadOpCtx() as op:","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/ceph.py?ref=e60e66cfb0a73a9dd2a021d53682b115dc5ec8b9"},{"status":"modified","deletions":5,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/e60e66cfb0a73a9dd2a021d53682b115dc5ec8b9\/gnocchi\/storage\/redis.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/e60e66cfb0a73a9dd2a021d53682b115dc5ec8b9\/gnocchi\/storage\/redis.py","changes":12,"filename":"gnocchi\/storage\/redis.py","sha":"2d0986afe891c3e7939da1dc53eab2cb5a810c9b","additions":7,"patch":"@@ -126,12 +126,14 @@ def _list_split_keys(self, metric, aggregations, version=3):\n             }\n         return keys\n \n-    def _delete_metric_splits(self, metric, keys_and_aggregations, version=3):\n-        metric_key = self._metric_key(metric)\n+    def _delete_metric_splits(self, metrics_keys_aggregations, version=3):\n         pipe = self._client.pipeline(transaction=False)\n-        for key, aggregation in keys_and_aggregations:\n-            pipe.hdel(metric_key, self._aggregated_field_for_split(\n-                aggregation.method, key, version))\n+        for metric, keys_and_aggregations in six.iteritems(\n+                metrics_keys_aggregations):\n+            metric_key = self._metric_key(metric)\n+            for key, aggregation in keys_and_aggregations:\n+                pipe.hdel(metric_key, self._aggregated_field_for_split(\n+                    aggregation.method, key, version))\n         pipe.execute()\n \n     def _store_metric_splits(self, metric, keys_aggregations_data_offset,","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/redis.py?ref=e60e66cfb0a73a9dd2a021d53682b115dc5ec8b9"},{"status":"modified","deletions":2,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/e60e66cfb0a73a9dd2a021d53682b115dc5ec8b9\/gnocchi\/tests\/test_storage.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/e60e66cfb0a73a9dd2a021d53682b115dc5ec8b9\/gnocchi\/tests\/test_storage.py","changes":4,"filename":"gnocchi\/tests\/test_storage.py","sha":"513c4e0e68664edba9e4958d5027723247ae29fd","additions":2,"patch":"@@ -776,10 +776,10 @@ def test_rewrite_measures_corruption_missing_file(self):\n         # Test what happens if we delete the latest split and then need to\n         # compress it!\n         self.storage._delete_metric_splits(\n-            self.metric, [(carbonara.SplitKey(\n+            {self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451952000, 's'),\n                 numpy.timedelta64(1, 'm'),\n-            ), aggregation)])\n+            ), aggregation)]})\n \n         # Now store brand new points that should force a rewrite of one of the\n         # split (keep in mind the back window size in one hour here). We move","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/test_storage.py?ref=e60e66cfb0a73a9dd2a021d53682b115dc5ec8b9"}],"committer":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"stats":{"deletions":25,"additions":39,"total":64},"author":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/e60e66cfb0a73a9dd2a021d53682b115dc5ec8b9","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/e60e66cfb0a73a9dd2a021d53682b115dc5ec8b9\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/e60e66cfb0a73a9dd2a021d53682b115dc5ec8b9","sha":"e60e66cfb0a73a9dd2a021d53682b115dc5ec8b9","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/0a878822e04aa8632a571699680ff5f3fbc5fffd","sha":"0a878822e04aa8632a571699680ff5f3fbc5fffd","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/0a878822e04aa8632a571699680ff5f3fbc5fffd"}],"commit":{"committer":{"date":"2018-03-13T09:04:14Z","name":"Julien Danjou","email":"julien@danjou.info"},"author":{"date":"2018-03-07T09:29:49Z","name":"Julien Danjou","email":"julien@danjou.info"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/e60e66cfb0a73a9dd2a021d53682b115dc5ec8b9","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/910c06a747d58258356e8af77e6979b82ec4c030","sha":"910c06a747d58258356e8af77e6979b82ec4c030"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"storage: _delete_metric_splits can now batch over multiple metrics"}},{"files":[{"status":"modified","deletions":9,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/60af1b816ceaffa29e510578bfd28a8b6c2faa49\/gnocchi\/storage\/__init__.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/60af1b816ceaffa29e510578bfd28a8b6c2faa49\/gnocchi\/storage\/__init__.py","changes":39,"filename":"gnocchi\/storage\/__init__.py","sha":"6a72c67d550dcdea5a0486fc58d7e79b62d9177d","additions":30,"patch":"@@ -166,19 +166,39 @@ def _store_unaggregated_timeseries(self, metrics_and_data, version=3):\n             ((metric, data, version) for metric, data in metrics_and_data))\n \n     @staticmethod\n-    def _store_metric_splits(metric, keys_aggregations_data_offset, version=3):\n-        \"\"\"Store metric split.\n+    def _store_metric_splits_unbatched(metric, key, aggregation, data, offset,\n+                                       version=3):\n+        \"\"\"Store a metric split.\n \n-        Store a bunch of splits for a metric.\n+        :param metric: A metric.\n+        :param key: The `carbonara.SplitKey`.\n+        :param aggregation: The `carbonara.Aggregation`.\n+        :param data: The actual data to write.\n+        :param offset: The offset to write to.\n+        :param version: Storage engine format version.\n+        \"\"\"\n+        raise NotImplementedError\n \n-        :param metric: The metric to store for\n-        :param keys_aggregations_data_offset: A list of\n-                                             (key, aggregation, data, offset)\n-                                             tuples\n+    def _store_metric_splits(self, metrics_keys_aggregations_data_offset,\n+                             version=3):\n+        \"\"\"Store metric splits.\n \n+        Store a bunch of splits for some metrics.\n+\n+        :param metrics_keys_aggregations_data_offset: A dict where keys are\n+                                                      `storage.Metric` and\n+                                                      values are a list of\n+                                                      (key, aggregation,\n+                                                       data, offset) tuples.\n         :param version: Storage engine format version.\n         \"\"\"\n-        raise NotImplementedError\n+        utils.parallel_map(\n+            self._store_metric_splits_unbatched,\n+            ((metric, key, aggregation, data, offset, version)\n+             for metric, keys_aggregations_data_offset\n+             in six.iteritems(metrics_keys_aggregations_data_offset)\n+             for key, aggregation, data, offset\n+             in keys_aggregations_data_offset))\n \n     @staticmethod\n     def _list_split_keys(metric, aggregations, version=3):\n@@ -352,7 +372,8 @@ def _store_timeserie_splits(self, metric, keys_and_aggregations_and_splits,\n                 keys_aggregations_data_offset.append(\n                     (key, split.aggregation, data, offset))\n \n-        return self._store_metric_splits(metric, keys_aggregations_data_offset)\n+        return self._store_metric_splits(\n+            {metric: keys_aggregations_data_offset})\n \n     def _compute_split_operations(self, metric, aggregations_and_timeseries,\n                                   previous_oldest_mutable_timestamp,","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/__init__.py?ref=60af1b816ceaffa29e510578bfd28a8b6c2faa49"},{"status":"modified","deletions":10,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/60af1b816ceaffa29e510578bfd28a8b6c2faa49\/gnocchi\/storage\/ceph.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/60af1b816ceaffa29e510578bfd28a8b6c2faa49\/gnocchi\/storage\/ceph.py","changes":23,"filename":"gnocchi\/storage\/ceph.py","sha":"a9c45e1bc99eb2c75da0d74122dfcb7e4432eb33","additions":13,"patch":"@@ -81,18 +81,21 @@ def _create_metric(self, metric):\n         else:\n             self.ioctx.write_full(name, b\"\")\n \n-    def _store_metric_splits(self, metric, keys_aggregations_data_offset,\n+    def _store_metric_splits(self, metrics_keys_aggregations_data_offset,\n                              version=3):\n         with rados.WriteOpCtx() as op:\n-            for key, agg, data, offset in keys_aggregations_data_offset:\n-                name = self._get_object_name(metric, key, agg.method, version)\n-                if offset is None:\n-                    self.ioctx.write_full(name, data)\n-                else:\n-                    self.ioctx.write(name, data, offset=offset)\n-                self.ioctx.set_omap(op, (name,), (b\"\",))\n-            self.ioctx.operate_write_op(\n-                op, self._build_unaggregated_timeserie_path(metric, 3))\n+            for metric, keys_aggregations_data_offset in six.iteritems(\n+                    metrics_keys_aggregations_data_offset):\n+                for key, agg, data, offset in keys_aggregations_data_offset:\n+                    name = self._get_object_name(\n+                        metric, key, agg.method, version)\n+                    if offset is None:\n+                        self.ioctx.write_full(name, data)\n+                    else:\n+                        self.ioctx.write(name, data, offset=offset)\n+                    self.ioctx.set_omap(op, (name,), (b\"\",))\n+                self.ioctx.operate_write_op(\n+                    op, self._build_unaggregated_timeserie_path(metric, 3))\n \n     def _delete_metric_splits(self, metric, metrics_keys_aggregations,\n                               version=3):","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/ceph.py?ref=60af1b816ceaffa29e510578bfd28a8b6c2faa49"},{"status":"modified","deletions":7,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/60af1b816ceaffa29e510578bfd28a8b6c2faa49\/gnocchi\/storage\/file.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/60af1b816ceaffa29e510578bfd28a8b6c2faa49\/gnocchi\/storage\/file.py","changes":13,"filename":"gnocchi\/storage\/file.py","sha":"010d851b7425f611e353832383db44ef8a2dfa6e","additions":6,"patch":"@@ -163,13 +163,12 @@ def _delete_metric_splits_unbatched(\n         os.unlink(self._build_metric_path_for_split(\n             metric, aggregation.method, key, version))\n \n-    def _store_metric_splits(self, metric, keys_aggregations_data_offset,\n-                             version=3):\n-        for key, aggregation, data, offset in keys_aggregations_data_offset:\n-            self._atomic_file_store(\n-                self._build_metric_path_for_split(\n-                    metric, aggregation.method, key, version),\n-                data)\n+    def _store_metric_splits_unbatched(self, metric, key, aggregation, data,\n+                                       offset, version):\n+        self._atomic_file_store(\n+            self._build_metric_path_for_split(\n+                metric, aggregation.method, key, version),\n+            data)\n \n     def _delete_metric(self, metric):\n         path = self._build_metric_dir(metric)","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/file.py?ref=60af1b816ceaffa29e510578bfd28a8b6c2faa49"},{"status":"modified","deletions":6,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/60af1b816ceaffa29e510578bfd28a8b6c2faa49\/gnocchi\/storage\/redis.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/60af1b816ceaffa29e510578bfd28a8b6c2faa49\/gnocchi\/storage\/redis.py","changes":14,"filename":"gnocchi\/storage\/redis.py","sha":"385bda1a2601c317c3412a3a104e129944ea0e39","additions":8,"patch":"@@ -136,14 +136,16 @@ def _delete_metric_splits(self, metrics_keys_aggregations, version=3):\n                     aggregation.method, key, version))\n         pipe.execute()\n \n-    def _store_metric_splits(self, metric, keys_aggregations_data_offset,\n+    def _store_metric_splits(self, metrics_keys_aggregations_data_offset,\n                              version=3):\n         pipe = self._client.pipeline(transaction=False)\n-        metric_key = self._metric_key(metric)\n-        for key, aggregation, data, offset in keys_aggregations_data_offset:\n-            key = self._aggregated_field_for_split(\n-                aggregation.method, key, version)\n-            pipe.hset(metric_key, key, data)\n+        for metric, keys_aggregations_data_offset in six.iteritems(\n+                metrics_keys_aggregations_data_offset):\n+            metric_key = self._metric_key(metric)\n+            for key, aggregation, data, offset in keys_aggregations_data_offset:\n+                key = self._aggregated_field_for_split(\n+                    aggregation.method, key, version)\n+                pipe.hset(metric_key, key, data)\n         pipe.execute()\n \n     def _delete_metric(self, metric):","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/redis.py?ref=60af1b816ceaffa29e510578bfd28a8b6c2faa49"},{"status":"modified","deletions":8,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/60af1b816ceaffa29e510578bfd28a8b6c2faa49\/gnocchi\/storage\/s3.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/60af1b816ceaffa29e510578bfd28a8b6c2faa49\/gnocchi\/storage\/s3.py","changes":15,"filename":"gnocchi\/storage\/s3.py","sha":"29134d635c6ee65b68bba51da3550679cf00a83f","additions":7,"patch":"@@ -120,14 +120,13 @@ def _head():\n                 wait=self._consistency_wait,\n                 stop=self._consistency_stop)(_head)\n \n-    def _store_metric_splits(self, metric, keys_aggregations_data_offset,\n-                             version=3):\n-        for key, aggregation, data, offset in keys_aggregations_data_offset:\n-            self._put_object_safe(\n-                Bucket=self._bucket_name,\n-                Key=self._prefix(metric) + self._object_name(\n-                    key, aggregation.method, version),\n-                Body=data)\n+    def _store_metric_splits_unbatched(self, metric, key, aggregation, data,\n+                                       offset, version):\n+        self._put_object_safe(\n+            Bucket=self._bucket_name,\n+            Key=self._prefix(metric) + self._object_name(\n+                key, aggregation.method, version),\n+            Body=data)\n \n     def _delete_metric_splits_unbatched(self, metric, key, aggregation,\n                                         version=3):","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/s3.py?ref=60af1b816ceaffa29e510578bfd28a8b6c2faa49"},{"status":"modified","deletions":7,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/60af1b816ceaffa29e510578bfd28a8b6c2faa49\/gnocchi\/storage\/swift.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/60af1b816ceaffa29e510578bfd28a8b6c2faa49\/gnocchi\/storage\/swift.py","changes":13,"filename":"gnocchi\/storage\/swift.py","sha":"287173dc843aca4bc51f15e82481968fbda34744","additions":6,"patch":"@@ -116,13 +116,12 @@ def _create_metric(self, metric):\n         if resp['status'] == 204:\n             raise storage.MetricAlreadyExists(metric)\n \n-    def _store_metric_splits(self, metric, keys_aggregations_data_offset,\n-                             version=3):\n-        for key, aggregation, data, offset in keys_aggregations_data_offset:\n-            self.swift.put_object(\n-                self._container_name(metric),\n-                self._object_name(key, aggregation.method, version),\n-                data)\n+    def _store_metric_splits_unbatched(self, metric, key, aggregation, data,\n+                                       offset, version):\n+        self.swift.put_object(\n+            self._container_name(metric),\n+            self._object_name(key, aggregation.method, version),\n+            data)\n \n     def _delete_metric_splits_unbatched(\n             self, metric, key, aggregation, version=3):","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/swift.py?ref=60af1b816ceaffa29e510578bfd28a8b6c2faa49"},{"status":"modified","deletions":8,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/60af1b816ceaffa29e510578bfd28a8b6c2faa49\/gnocchi\/tests\/test_storage.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/60af1b816ceaffa29e510578bfd28a8b6c2faa49\/gnocchi\/tests\/test_storage.py","changes":17,"filename":"gnocchi\/tests\/test_storage.py","sha":"1ef44a987deff03919fd1d293e44054229aa2619","additions":9,"patch":"@@ -287,11 +287,12 @@ def test_add_measures_update_subset_split(self):\n         for call in c.mock_calls:\n             # policy is 60 points and split is 48. should only update 2nd half\n             args = call[1]\n-            if args[0] == m_sql:\n-                for key, aggregation, data, offset in args[1]:\n-                    if (key.sampling == numpy.timedelta64(1, 'm')\n-                       and aggregation.method == \"mean\"):\n-                        count += 1\n+            for metric, key_agg_data_offset in six.iteritems(args[0]):\n+                if metric == m_sql:\n+                    for key, aggregation, data, offset in key_agg_data_offset:\n+                        if (key.sampling == numpy.timedelta64(1, 'm')\n+                            and aggregation.method == \"mean\"):\n+                            count += 1\n         self.assertEqual(1, count)\n \n     def test_add_measures_update_subset(self):\n@@ -859,13 +860,13 @@ def test_rewrite_measures_corruption_bad_data(self):\n         ]}, self.storage.get_measures(self.metric, [aggregation]))\n \n         # Test what happens if we write garbage\n-        self.storage._store_metric_splits(\n-            self.metric, [\n+        self.storage._store_metric_splits({\n+            self.metric: [\n                 (carbonara.SplitKey(\n                     numpy.datetime64(1451952000, 's'),\n                     numpy.timedelta64(1, 'm')),\n                  aggregation, b\"oh really?\", None),\n-            ])\n+            ]})\n \n         # Now store brand new points that should force a rewrite of one of the\n         # split (keep in mind the back window size in one hour here). We move","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/test_storage.py?ref=60af1b816ceaffa29e510578bfd28a8b6c2faa49"}],"committer":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"stats":{"deletions":55,"additions":79,"total":134},"author":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/60af1b816ceaffa29e510578bfd28a8b6c2faa49","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/60af1b816ceaffa29e510578bfd28a8b6c2faa49\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/60af1b816ceaffa29e510578bfd28a8b6c2faa49","sha":"60af1b816ceaffa29e510578bfd28a8b6c2faa49","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/e60e66cfb0a73a9dd2a021d53682b115dc5ec8b9","sha":"e60e66cfb0a73a9dd2a021d53682b115dc5ec8b9","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/e60e66cfb0a73a9dd2a021d53682b115dc5ec8b9"}],"commit":{"committer":{"date":"2018-03-13T09:04:14Z","name":"Julien Danjou","email":"julien@danjou.info"},"author":{"date":"2018-03-07T10:26:50Z","name":"Julien Danjou","email":"julien@danjou.info"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/60af1b816ceaffa29e510578bfd28a8b6c2faa49","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/964254920e6126d7240444ad3b9070964e0649d6","sha":"964254920e6126d7240444ad3b9070964e0649d6"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"storage: batch split storage on multiple metrics"}},{"files":[{"status":"modified","deletions":45,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/547d1750ce78dd24f5227d747c6a4e3b7fff2717\/gnocchi\/storage\/__init__.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/547d1750ce78dd24f5227d747c6a4e3b7fff2717\/gnocchi\/storage\/__init__.py","changes":107,"filename":"gnocchi\/storage\/__init__.py","sha":"12f8ab216f2725b5e577f07464a08e61830d5852","additions":62,"patch":"@@ -331,49 +331,64 @@ def _get_measures_timeserie(self, metric, aggregation, keys,\n             ts.truncate(aggregation.timespan)\n         return ts\n \n-    def _store_timeserie_splits(self, metric, keys_and_aggregations_and_splits,\n-                                oldest_mutable_timestamp):\n-        keys_to_rewrite = []\n-        splits_to_rewrite = []\n-        for (key, aggregation), split in six.iteritems(\n-                keys_and_aggregations_and_splits):\n-            # NOTE(jd) We write the full split only if the driver works that\n-            # way (self.WRITE_FULL) or if the oldest_mutable_timestamp is out\n-            # of range.\n-            write_full = (\n-                self.WRITE_FULL or next(key) <= oldest_mutable_timestamp\n-            )\n-            if write_full:\n-                keys_to_rewrite.append(key)\n-                splits_to_rewrite.append(split)\n-\n-        # Update the splits that were passed as argument with the data already\n-        # stored in the case that we need to rewrite them fully.\n-        # First, fetch all those existing splits.\n-        existing_data = self._get_splits_and_unserialize(\n-            metric, [(key, split.aggregation)\n-                     for key, split\n-                     in six.moves.zip(keys_to_rewrite, splits_to_rewrite)])\n-\n-        for key, split, existing in six.moves.zip(\n-                keys_to_rewrite, splits_to_rewrite, existing_data):\n-            if existing:\n-                existing.merge(split)\n-                keys_and_aggregations_and_splits[\n-                    (key, split.aggregation)] = existing\n-\n-        keys_aggregations_data_offset = []\n-        for (key, aggregation), split in six.iteritems(\n-                keys_and_aggregations_and_splits):\n-            # Do not store the split if it's empty.\n-            if split:\n-                offset, data = split.serialize(\n-                    key, compressed=key in keys_to_rewrite)\n-                keys_aggregations_data_offset.append(\n-                    (key, split.aggregation, data, offset))\n-\n-        return self._store_metric_splits(\n-            {metric: keys_aggregations_data_offset})\n+    def _update_metric_splits(self, metrics_keys_aggregations_splits):\n+        \"\"\"Store splits of `carbonara.`AggregatedTimeSerie` for a metric.\n+\n+        This reads the existing split and merge it with the new one give as\n+        argument, then writing it to the storage.\n+\n+        :param metrics_keys_aggregations_splits: A dict where keys are\n+                                                 `storage.Metric` and values\n+                                                 are tuples of the form\n+                                                 ({(key, aggregation): split},\n+                                                  oldest_mutable_timestamp)\n+        \"\"\"\n+        metrics_splits_to_store = {}\n+\n+        for metric, (keys_and_aggregations_and_splits,\n+                     oldest_mutable_timestamp) in six.iteritems(\n+                         metrics_keys_aggregations_splits):\n+            keys_to_rewrite = []\n+            splits_to_rewrite = []\n+            for (key, aggregation), split in six.iteritems(\n+                    keys_and_aggregations_and_splits):\n+                # NOTE(jd) We write the full split only if the driver works that\n+                # way (self.WRITE_FULL) or if the oldest_mutable_timestamp is out\n+                # of range.\n+                write_full = (\n+                    self.WRITE_FULL or next(key) <= oldest_mutable_timestamp\n+                )\n+                if write_full:\n+                    keys_to_rewrite.append(key)\n+                    splits_to_rewrite.append(split)\n+\n+            # Update the splits that were passed as argument with the data already\n+            # stored in the case that we need to rewrite them fully.\n+            # First, fetch all those existing splits.\n+            existing_data = self._get_splits_and_unserialize(\n+                metric, [(key, split.aggregation)\n+                         for key, split\n+                         in six.moves.zip(keys_to_rewrite, splits_to_rewrite)])\n+\n+            for key, split, existing in six.moves.zip(\n+                    keys_to_rewrite, splits_to_rewrite, existing_data):\n+                if existing:\n+                    existing.merge(split)\n+                    keys_and_aggregations_and_splits[\n+                        (key, split.aggregation)] = existing\n+\n+            keys_aggregations_data_offset = []\n+            for (key, aggregation), split in six.iteritems(\n+                    keys_and_aggregations_and_splits):\n+                # Do not store the split if it's empty.\n+                if split:\n+                    offset, data = split.serialize(\n+                        key, compressed=key in keys_to_rewrite)\n+                    keys_aggregations_data_offset.append(\n+                        (key, split.aggregation, data, offset))\n+            metrics_splits_to_store[metric] = keys_aggregations_data_offset\n+\n+        return self._store_metric_splits(metrics_splits_to_store)\n \n     def _compute_split_operations(self, metric, aggregations_and_timeseries,\n                                   previous_oldest_mutable_timestamp,\n@@ -620,8 +635,10 @@ def _map_compute_splits_operations(bound_timeserie):\n                      measures,\n                      before_truncate_callback=_map_compute_splits_operations)\n                 self._delete_metric_splits({metric: deleted_keys})\n-                self._store_timeserie_splits(metric, keys_and_splits_to_store,\n-                                             new_first_block_timestamp)\n+                self._update_metric_splits({\n+                    metric: (keys_and_splits_to_store,\n+                             new_first_block_timestamp),\n+                })\n \n             new_boundts.append((metric, ts.serialize()))\n ","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/__init__.py?ref=547d1750ce78dd24f5227d747c6a4e3b7fff2717"}],"committer":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"stats":{"deletions":45,"additions":62,"total":107},"author":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/547d1750ce78dd24f5227d747c6a4e3b7fff2717","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/547d1750ce78dd24f5227d747c6a4e3b7fff2717\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/547d1750ce78dd24f5227d747c6a4e3b7fff2717","sha":"547d1750ce78dd24f5227d747c6a4e3b7fff2717","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/60af1b816ceaffa29e510578bfd28a8b6c2faa49","sha":"60af1b816ceaffa29e510578bfd28a8b6c2faa49","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/60af1b816ceaffa29e510578bfd28a8b6c2faa49"}],"commit":{"committer":{"date":"2018-03-13T09:04:14Z","name":"Julien Danjou","email":"julien@danjou.info"},"author":{"date":"2018-03-07T11:11:15Z","name":"Julien Danjou","email":"julien@danjou.info"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/547d1750ce78dd24f5227d747c6a4e3b7fff2717","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/a096f6eea0bd783259e5ec84a440abc2d2cbd958","sha":"a096f6eea0bd783259e5ec84a440abc2d2cbd958"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"storage: update_metric_splits can batch several metrics at once"}},{"files":[{"status":"modified","deletions":6,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/31791514351e79c5f8b14cc535a8977a309e8434\/gnocchi\/storage\/__init__.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/31791514351e79c5f8b14cc535a8977a309e8434\/gnocchi\/storage\/__init__.py","changes":16,"filename":"gnocchi\/storage\/__init__.py","sha":"a3fc61f1a60feef8acedfae338c183d48c8697c1","additions":10,"patch":"@@ -545,6 +545,8 @@ def add_measures_to_metrics(self, metrics_and_measures):\n                   len(metrics_and_measures), sw.elapsed())\n \n         new_boundts = []\n+        splits_to_delete = {}\n+        splits_to_update = {}\n \n         for metric, measures in six.iteritems(metrics_and_measures):\n             if len(measures) == 0:\n@@ -633,12 +635,12 @@ def _map_compute_splits_operations(bound_timeserie):\n                  deleted_keys,\n                  keys_and_splits_to_store) = ts.set_values(\n                      measures,\n-                     before_truncate_callback=_map_compute_splits_operations)\n-                self._delete_metric_splits({metric: deleted_keys})\n-                self._update_metric_splits({\n-                    metric: (keys_and_splits_to_store,\n-                             new_first_block_timestamp),\n-                })\n+                     before_truncate_callback=_map_compute_splits_operations\n+                 )\n+\n+            splits_to_delete[metric] = deleted_keys\n+            splits_to_update[metric] = (keys_and_splits_to_store,\n+                                        new_first_block_timestamp)\n \n             new_boundts.append((metric, ts.serialize()))\n \n@@ -655,6 +657,8 @@ def _map_compute_splits_operations(bound_timeserie):\n                       \"in %.2f seconds%s\",\n                       metric.id, len(measures), elapsed, perf)\n \n+        self._delete_metric_splits(splits_to_delete)\n+        self._update_metric_splits(splits_to_update)\n         self._store_unaggregated_timeseries(new_boundts)\n \n     def find_measure(self, metric, predicate, granularity, aggregation=\"mean\",","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/__init__.py?ref=31791514351e79c5f8b14cc535a8977a309e8434"}],"committer":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"stats":{"deletions":6,"additions":10,"total":16},"author":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/31791514351e79c5f8b14cc535a8977a309e8434","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/31791514351e79c5f8b14cc535a8977a309e8434\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/31791514351e79c5f8b14cc535a8977a309e8434","sha":"31791514351e79c5f8b14cc535a8977a309e8434","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/547d1750ce78dd24f5227d747c6a4e3b7fff2717","sha":"547d1750ce78dd24f5227d747c6a4e3b7fff2717","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/547d1750ce78dd24f5227d747c6a4e3b7fff2717"}],"commit":{"committer":{"date":"2018-03-13T09:04:14Z","name":"Julien Danjou","email":"julien@danjou.info"},"author":{"date":"2018-03-07T11:19:49Z","name":"Julien Danjou","email":"julien@danjou.info"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/31791514351e79c5f8b14cc535a8977a309e8434","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/b811f29bfa2bed74eb22efa128027f8c5e08caa4","sha":"b811f29bfa2bed74eb22efa128027f8c5e08caa4"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"storage: update and delete all splits for all metrics at once"}},{"files":[{"status":"modified","deletions":7,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/e85b5970373b0393806ebeeadd5cd5741b2ae2ed\/gnocchi\/storage\/__init__.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/e85b5970373b0393806ebeeadd5cd5741b2ae2ed\/gnocchi\/storage\/__init__.py","changes":20,"filename":"gnocchi\/storage\/__init__.py","sha":"a3d3c859551355d95ac1a554c4b9c4222d7be58b","additions":13,"patch":"@@ -107,14 +107,19 @@ def __init__(conf):\n     def upgrade():\n         pass\n \n-    def _get_measures(self, metric, keys_and_aggregations, version=3):\n-        return utils.parallel_map(\n-            self._get_measures_unbatched,\n-            ((metric, key, aggregation, version)\n-             for key, aggregation in keys_and_aggregations))\n+    def _get_splits(self, metrics_keys_aggregations, version=3):\n+        # FIXME(jd) Call parallel_map only once\n+        return {\n+            metric: utils.parallel_map(\n+                self._get_splits_unbatched,\n+                ((metric, key, aggregation, version)\n+                 for key, aggregation in keys_and_aggregations))\n+            for metric, keys_and_aggregations\n+            in six.iteritems(metrics_keys_aggregations)\n+        }\n \n     @staticmethod\n-    def _get_measures_unbatched(metric, timestamp_key, aggregation, version=3):\n+    def _get_splits_unbatched(metric, timestamp_key, aggregation, version=3):\n         raise NotImplementedError\n \n     @staticmethod\n@@ -282,7 +287,8 @@ def _get_splits_and_unserialize(self, metric, keys_and_aggregations):\n         \"\"\"\n         if not keys_and_aggregations:\n             return []\n-        raw_measures = self._get_measures(metric, keys_and_aggregations)\n+        raw_measures = self._get_splits(\n+            {metric: keys_and_aggregations})[metric]\n         results = []\n         for (key, aggregation), raw in six.moves.zip(\n                 keys_and_aggregations, raw_measures):","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/__init__.py?ref=e85b5970373b0393806ebeeadd5cd5741b2ae2ed"},{"status":"modified","deletions":1,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/e85b5970373b0393806ebeeadd5cd5741b2ae2ed\/gnocchi\/storage\/ceph.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/e85b5970373b0393806ebeeadd5cd5741b2ae2ed\/gnocchi\/storage\/ceph.py","changes":2,"filename":"gnocchi\/storage\/ceph.py","sha":"50c467acbb2df37ebb903ae783dcbb81b43cb46b","additions":1,"patch":"@@ -151,7 +151,7 @@ def _delete_metric(self, metric):\n             # It's possible that the object does not exists\n             pass\n \n-    def _get_measures_unbatched(self, metric, key, aggregation, version=3):\n+    def _get_splits_unbatched(self, metric, key, aggregation, version=3):\n         try:\n             name = self._get_object_name(\n                 metric, key, aggregation.method, version)","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/ceph.py?ref=e85b5970373b0393806ebeeadd5cd5741b2ae2ed"},{"status":"modified","deletions":1,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/e85b5970373b0393806ebeeadd5cd5741b2ae2ed\/gnocchi\/storage\/file.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/e85b5970373b0393806ebeeadd5cd5741b2ae2ed\/gnocchi\/storage\/file.py","changes":2,"filename":"gnocchi\/storage\/file.py","sha":"56929a1a5663d320af4380cc8222e3f72ef5fd8a","additions":1,"patch":"@@ -180,7 +180,7 @@ def _delete_metric(self, metric):\n                 # measures)\n                 raise\n \n-    def _get_measures_unbatched(self, metric, key, aggregation, version=3):\n+    def _get_splits_unbatched(self, metric, key, aggregation, version=3):\n         path = self._build_metric_path_for_split(\n             metric, aggregation.method, key, version)\n         try:","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/file.py?ref=e85b5970373b0393806ebeeadd5cd5741b2ae2ed"},{"status":"modified","deletions":7,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/e85b5970373b0393806ebeeadd5cd5741b2ae2ed\/gnocchi\/storage\/redis.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/e85b5970373b0393806ebeeadd5cd5741b2ae2ed\/gnocchi\/storage\/redis.py","changes":21,"filename":"gnocchi\/storage\/redis.py","sha":"e1e17386998459407cecce65edb9c9e3184f229e","additions":14,"patch":"@@ -151,10 +151,17 @@ def _store_metric_splits(self, metrics_keys_aggregations_data_offset,\n     def _delete_metric(self, metric):\n         self._client.delete(self._metric_key(metric))\n \n-    def _get_measures(self, metric, keys_and_aggregations, version=3):\n-        if not keys_and_aggregations:\n-            return []\n-        return self._client.hmget(\n-            self._metric_key(metric),\n-            [self._aggregated_field_for_split(aggregation.method, key, version)\n-             for key, aggregation in keys_and_aggregations])\n+    def _get_splits(self, metrics_keys_aggregations, version=3):\n+        pipe = self._client.pipeline(transaction=False)\n+        # Use a list of metric with a constant sorting\n+        metrics = list(metrics_keys_aggregations.keys())\n+        for metric in metrics:\n+            pipe.hmget(\n+                self._metric_key(metric),\n+                [self._aggregated_field_for_split(aggregation.method,\n+                                                  key, version)\n+                 for key, aggregation in metrics_keys_aggregations[metric]])\n+        return {\n+            metric: splits\n+            for metric, splits in six.moves.zip(metrics, pipe.execute())\n+        }","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/redis.py?ref=e85b5970373b0393806ebeeadd5cd5741b2ae2ed"},{"status":"modified","deletions":1,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/e85b5970373b0393806ebeeadd5cd5741b2ae2ed\/gnocchi\/storage\/s3.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/e85b5970373b0393806ebeeadd5cd5741b2ae2ed\/gnocchi\/storage\/s3.py","changes":2,"filename":"gnocchi\/storage\/s3.py","sha":"c5a29ae7ff286d9a0da5089d3f99cc21f8a953f8","additions":1,"patch":"@@ -156,7 +156,7 @@ def _delete_metric(self, metric):\n             s3.bulk_delete(self.s3, bucket,\n                            [c['Key'] for c in response.get('Contents', ())])\n \n-    def _get_measures_unbatched(self, metric, key, aggregation, version=3):\n+    def _get_splits_unbatched(self, metric, key, aggregation, version=3):\n         try:\n             response = self.s3.get_object(\n                 Bucket=self._bucket_name,","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/s3.py?ref=e85b5970373b0393806ebeeadd5cd5741b2ae2ed"},{"status":"modified","deletions":1,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/e85b5970373b0393806ebeeadd5cd5741b2ae2ed\/gnocchi\/storage\/swift.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/e85b5970373b0393806ebeeadd5cd5741b2ae2ed\/gnocchi\/storage\/swift.py","changes":2,"filename":"gnocchi\/storage\/swift.py","sha":"c1a1ff65a7f1255e4bd7a5aa8de587ad0bcbc04d","additions":1,"patch":"@@ -147,7 +147,7 @@ def _delete_metric(self, metric):\n                     # Deleted in the meantime? Whatever.\n                     raise\n \n-    def _get_measures_unbatched(self, metric, key, aggregation, version=3):\n+    def _get_splits_unbatched(self, metric, key, aggregation, version=3):\n         try:\n             headers, contents = self.swift.get_object(\n                 self._container_name(metric), self._object_name(","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/swift.py?ref=e85b5970373b0393806ebeeadd5cd5741b2ae2ed"},{"status":"modified","deletions":74,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/e85b5970373b0393806ebeeadd5cd5741b2ae2ed\/gnocchi\/tests\/test_storage.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/e85b5970373b0393806ebeeadd5cd5741b2ae2ed\/gnocchi\/tests\/test_storage.py","changes":154,"filename":"gnocchi\/tests\/test_storage.py","sha":"2286eb8f5d8ed5912a029e3edd88b95e75e3d632","additions":80,"patch":"@@ -383,19 +383,21 @@ def test_get_measures_return(self):\n         aggregation = self.metric.archive_policy.get_aggregation(\n             \"mean\", numpy.timedelta64(5, 'm'))\n \n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits({\n+            self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451520000, 's'),\n                 numpy.timedelta64(5, 'm'),\n-            ), aggregation)])\n+            ), aggregation)]})\n+        self.assertEqual(1, len(data))\n+        data = data[self.metric]\n         self.assertEqual(1, len(data))\n         self.assertIsInstance(data[0], bytes)\n         self.assertGreater(len(data[0]), 0)\n         existing = data[0]\n \n         # Now retrieve an existing and a non-existing key\n-        data = self.storage._get_measures(\n-            self.metric, [\n+        data = self.storage._get_splits({\n+            self.metric: [\n                 (carbonara.SplitKey(\n                     numpy.datetime64(1451520000, 's'),\n                     numpy.timedelta64(5, 'm'),\n@@ -404,16 +406,18 @@ def test_get_measures_return(self):\n                     numpy.datetime64(1451520010, 's'),\n                     numpy.timedelta64(5, 'm'),\n                 ), aggregation),\n-            ])\n+            ]})\n+        self.assertEqual(1, len(data))\n+        data = data[self.metric]\n         self.assertEqual(2, len(data))\n         self.assertIsInstance(data[0], bytes)\n         self.assertGreater(len(data[0]), 0)\n         self.assertEqual(existing, data[0])\n         self.assertIsNone(data[1])\n \n         # Now retrieve a non-existing and an existing key\n-        data = self.storage._get_measures(\n-            self.metric, [\n+        data = self.storage._get_splits({\n+            self.metric: [\n                 (carbonara.SplitKey(\n                     numpy.datetime64(155152000, 's'),\n                     numpy.timedelta64(5, 'm'),\n@@ -422,7 +426,9 @@ def test_get_measures_return(self):\n                     numpy.datetime64(1451520000, 's'),\n                     numpy.timedelta64(5, 'm'),\n                 ), aggregation),\n-            ])\n+            ]})\n+        self.assertEqual(1, len(data))\n+        data = data[self.metric]\n         self.assertEqual(2, len(data))\n         self.assertIsInstance(data[1], bytes)\n         self.assertGreater(len(data[1]), 0)\n@@ -431,8 +437,8 @@ def test_get_measures_return(self):\n \n         m2, _ = self._create_metric()\n         # Now retrieve a non-existing (= no aggregated measures) metric\n-        data = self.storage._get_measures(\n-            m2, [\n+        data = self.storage._get_splits({\n+            m2: [\n                 (carbonara.SplitKey(\n                     numpy.datetime64(1451520010, 's'),\n                     numpy.timedelta64(5, 'm'),\n@@ -441,8 +447,8 @@ def test_get_measures_return(self):\n                     numpy.datetime64(1451520000, 's'),\n                     numpy.timedelta64(5, 'm'),\n                 ), aggregation),\n-            ])\n-        self.assertEqual([None, None], data)\n+            ]})\n+        self.assertEqual({m2: [None, None]}, data)\n \n     def test_rewrite_measures(self):\n         # Create an archive policy that spans on several splits. Each split\n@@ -484,23 +490,23 @@ def test_rewrite_measures(self):\n         aggregation = self.metric.archive_policy.get_aggregation(\n             \"mean\", numpy.timedelta64(1, 'm'))\n \n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits({\n+            self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451520000, 's'),\n                 numpy.timedelta64(1, 'm'),\n-            ), aggregation)])[0]\n+            ), aggregation)]})[self.metric][0]\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits({\n+            self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451736000, 's'),\n                 numpy.timedelta64(60, 's'),\n-            ), aggregation)])[0]\n+            ), aggregation)]})[self.metric][0]\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits({\n+            self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451952000, 's'),\n                 numpy.timedelta64(60, 's'),\n-            ), aggregation)])[0]\n+            ), aggregation)]})[self.metric][0]\n         assertCompressedIfWriteFull(\n             carbonara.AggregatedTimeSerie.is_compressed(data))\n \n@@ -535,30 +541,30 @@ def test_rewrite_measures(self):\n                                    numpy.timedelta64(1, 'm')),\n             },\n         }, self.storage._list_split_keys(self.metric, [agg]))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits({\n+            self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451520000, 's'),\n                 numpy.timedelta64(60, 's'),\n-            ), aggregation)])[0]\n+            ), aggregation)]})[self.metric][0]\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits({\n+            self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451736000, 's'),\n                 numpy.timedelta64(60, 's'),\n-            ), aggregation)])[0]\n+            ), aggregation)]})[self.metric][0]\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits({\n+            self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451952000, 's'),\n                 numpy.timedelta64(1, 'm'),\n-            ), aggregation)])[0]\n+            ), aggregation)]})[self.metric][0]\n         # Now this one is compressed because it has been rewritten!\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits({\n+            self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1452384000, 's'),\n                 numpy.timedelta64(60, 's'),\n-            ), aggregation)])[0]\n+            ), aggregation)]})[self.metric][0]\n         assertCompressedIfWriteFull(\n             carbonara.AggregatedTimeSerie.is_compressed(data))\n \n@@ -612,23 +618,23 @@ def test_rewrite_measures_oldest_mutable_timestamp_eq_next_key(self):\n         aggregation = self.metric.archive_policy.get_aggregation(\n             \"mean\", numpy.timedelta64(1, 'm'))\n \n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits(\n+            {self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451520000, 's'),\n                 numpy.timedelta64(1, 'm'),\n-            ), aggregation)])[0]\n+            ), aggregation)]})[self.metric][0]\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits(\n+            {self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451736000, 's'),\n                 numpy.timedelta64(1, 'm'),\n-            ), aggregation)])[0]\n+            ), aggregation)]})[self.metric][0]\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits(\n+            {self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451952000, 's'),\n                 numpy.timedelta64(1, 'm')\n-            ), aggregation)])[0]\n+            ), aggregation)]})[self.metric][0]\n         assertCompressedIfWriteFull(\n             carbonara.AggregatedTimeSerie.is_compressed(data))\n \n@@ -665,30 +671,30 @@ def test_rewrite_measures_oldest_mutable_timestamp_eq_next_key(self):\n                                    numpy.timedelta64(1, 'm')),\n             }\n         }, self.storage._list_split_keys(self.metric, [agg]))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits({\n+            self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451520000, 's'),\n                 numpy.timedelta64(1, 'm'),\n-            ), agg)])[0]\n+            ), agg)]})[self.metric][0]\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits({\n+            self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451736000, 's'),\n                 numpy.timedelta64(1, 'm'),\n-            ), agg)])[0]\n+            ), agg)]})[self.metric][0]\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits({\n+            self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451952000, 's'),\n                 numpy.timedelta64(60, 's')\n-            ), agg)])[0]\n+            ), agg)]})[self.metric][0]\n         # Now this one is compressed because it has been rewritten!\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits({\n+            self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1452384000, 's'),\n                 numpy.timedelta64(1, 'm'),\n-            ), agg)])[0]\n+            ), agg)]})[self.metric][0]\n         assertCompressedIfWriteFull(\n             carbonara.AggregatedTimeSerie.is_compressed(data))\n \n@@ -742,24 +748,24 @@ def test_rewrite_measures_corruption_missing_file(self):\n         aggregation = self.metric.archive_policy.get_aggregation(\n             \"mean\", numpy.timedelta64(1, 'm'))\n \n-        data = self.storage._get_measures(\n-            self.metric,\n+        data = self.storage._get_splits({\n+            self.metric:\n             [(carbonara.SplitKey(\n                 numpy.datetime64(1451520000, 's'),\n                 numpy.timedelta64(1, 'm'),\n-            ), aggregation)])[0]\n+            ), aggregation)]})[self.metric][0]\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits({\n+            self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451736000, 's'),\n                 numpy.timedelta64(1, 'm')\n-            ), aggregation)])[0]\n+            ), aggregation)]})[self.metric][0]\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits({\n+            self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451952000, 's'),\n                 numpy.timedelta64(1, 'm'),\n-            ), aggregation)])[0]\n+            ), aggregation)]})[self.metric][0]\n         assertCompressedIfWriteFull(\n             carbonara.AggregatedTimeSerie.is_compressed(data))\n \n@@ -832,23 +838,23 @@ def test_rewrite_measures_corruption_bad_data(self):\n         aggregation = self.metric.archive_policy.get_aggregation(\n             \"mean\", numpy.timedelta64(1, 'm'))\n \n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits({\n+            self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451520000, 's'),\n                 numpy.timedelta64(60, 's'),\n-            ), aggregation)])[0]\n+            ), aggregation)]})[self.metric][0]\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits({\n+            self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451736000, 's'),\n                 numpy.timedelta64(1, 'm'),\n-            ), aggregation)])[0]\n+            ), aggregation)]})[self.metric][0]\n         self.assertTrue(carbonara.AggregatedTimeSerie.is_compressed(data))\n-        data = self.storage._get_measures(\n-            self.metric, [(carbonara.SplitKey(\n+        data = self.storage._get_splits({\n+            self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451952000, 's'),\n                 numpy.timedelta64(1, 'm'),\n-            ), aggregation)])[0]\n+            ), aggregation)]})[self.metric][0]\n         assertCompressedIfWriteFull(\n             carbonara.AggregatedTimeSerie.is_compressed(data))\n \n@@ -934,7 +940,7 @@ def test_updated_measures(self):\n             (datetime64(2014, 1, 1, 12, 10), numpy.timedelta64(5, 'm'), 44.0),\n         ]}, self.storage.get_measures(self.metric, aggregations))\n \n-    def test_add_and_get_measures(self):\n+    def test_add_and_get_splits(self):\n         self.incoming.add_measures(self.metric.id, [\n             incoming.Measure(datetime64(2014, 1, 1, 12, 0, 1), 69),\n             incoming.Measure(datetime64(2014, 1, 1, 12, 7, 31), 42),","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/test_storage.py?ref=e85b5970373b0393806ebeeadd5cd5741b2ae2ed"}],"committer":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"stats":{"deletions":92,"additions":111,"total":203},"author":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/e85b5970373b0393806ebeeadd5cd5741b2ae2ed","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/e85b5970373b0393806ebeeadd5cd5741b2ae2ed\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/e85b5970373b0393806ebeeadd5cd5741b2ae2ed","sha":"e85b5970373b0393806ebeeadd5cd5741b2ae2ed","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/31791514351e79c5f8b14cc535a8977a309e8434","sha":"31791514351e79c5f8b14cc535a8977a309e8434","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/31791514351e79c5f8b14cc535a8977a309e8434"}],"commit":{"committer":{"date":"2018-03-13T09:04:14Z","name":"Julien Danjou","email":"julien@danjou.info"},"author":{"date":"2018-03-07T13:31:57Z","name":"Julien Danjou","email":"julien@danjou.info"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/e85b5970373b0393806ebeeadd5cd5741b2ae2ed","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/cd098dcfd6c0dcc2043bcdf4e1407b3d8f23b72b","sha":"cd098dcfd6c0dcc2043bcdf4e1407b3d8f23b72b"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"storage: allow to batch splits retrieval for multiple metrics"}},{"files":[{"status":"modified","deletions":26,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/d9164b15479dd0761d9c540d8d78b5fb1921ed27\/gnocchi\/storage\/__init__.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/d9164b15479dd0761d9c540d8d78b5fb1921ed27\/gnocchi\/storage\/__init__.py","changes":55,"filename":"gnocchi\/storage\/__init__.py","sha":"7a57176fc0328f05abee5ea52ce5ec72dddc4312","additions":29,"patch":"@@ -14,6 +14,7 @@\n # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n # License for the specific language governing permissions and limitations\n # under the License.\n+import collections\n import itertools\n import operator\n \n@@ -277,31 +278,32 @@ def get_measures(self, metric, aggregations,\n                                                      ATTRGETTER_METHOD)\n         }\n \n-    def _get_splits_and_unserialize(self, metric, keys_and_aggregations):\n+    def _get_splits_and_unserialize(self, metrics_keys_aggregations):\n         \"\"\"Get splits and unserialize them\n \n-        :param metric: The metric to retrieve.\n-        :param keys_and_aggregations: A list of tuple (SplitKey, Aggregation)\n-                                      to retrieve.\n-        :return: A list of AggregatedTimeSerie.\n+        :param metrics_keys_aggregations: A dict where keys are\n+                                         `storage.Metric` and values are tuples\n+                                          of (SplitKey, Aggregation) to\n+                                          retrieve.\n+        :return: A dict where keys are `storage.Metric` and values are lists\n+                 of `carbonara.AggregatedTimeSerie`.\n         \"\"\"\n-        if not keys_and_aggregations:\n-            return []\n-        raw_measures = self._get_splits(\n-            {metric: keys_and_aggregations})[metric]\n-        results = []\n-        for (key, aggregation), raw in six.moves.zip(\n-                keys_and_aggregations, raw_measures):\n-            try:\n-                ts = carbonara.AggregatedTimeSerie.unserialize(\n-                    raw, key, aggregation)\n-            except carbonara.InvalidData:\n-                LOG.error(\"Data corruption detected for %s \"\n-                          \"aggregated `%s' timeserie, granularity `%s' \"\n-                          \"around time `%s', ignoring.\",\n-                          metric.id, aggregation.method, key.sampling, key)\n-                ts = carbonara.AggregatedTimeSerie(aggregation)\n-            results.append(ts)\n+        raw_measures = self._get_splits(metrics_keys_aggregations)\n+        results = collections.defaultdict(list)\n+        for metric, keys_and_aggregations in six.iteritems(\n+                metrics_keys_aggregations):\n+            for (key, aggregation), raw in six.moves.zip(\n+                    keys_and_aggregations, raw_measures[metric]):\n+                try:\n+                    ts = carbonara.AggregatedTimeSerie.unserialize(\n+                        raw, key, aggregation)\n+                except carbonara.InvalidData:\n+                    LOG.error(\"Data corruption detected for %s \"\n+                              \"aggregated `%s' timeserie, granularity `%s' \"\n+                              \"around time `%s', ignoring.\",\n+                              metric.id, aggregation.method, key.sampling, key)\n+                    ts = carbonara.AggregatedTimeSerie(aggregation)\n+                results[metric].append(ts)\n         return results\n \n     def _get_measures_timeserie(self, metric, aggregation, keys,\n@@ -321,7 +323,7 @@ def _get_measures_timeserie(self, metric, aggregation, keys,\n         ]\n \n         timeseries = self._get_splits_and_unserialize(\n-            metric, keys_and_aggregations)\n+            {metric: keys_and_aggregations})[metric]\n \n         ts = carbonara.AggregatedTimeSerie.from_timeseries(\n             timeseries, aggregation)\n@@ -371,10 +373,11 @@ def _update_metric_splits(self, metrics_keys_aggregations_splits):\n             # Update the splits that were passed as argument with the data already\n             # stored in the case that we need to rewrite them fully.\n             # First, fetch all those existing splits.\n-            existing_data = self._get_splits_and_unserialize(\n-                metric, [(key, split.aggregation)\n+            existing_data = self._get_splits_and_unserialize({\n+                metric: [(key, split.aggregation)\n                          for key, split\n-                         in six.moves.zip(keys_to_rewrite, splits_to_rewrite)])\n+                         in six.moves.zip(keys_to_rewrite, splits_to_rewrite)]\n+            })[metric]\n \n             for key, split, existing in six.moves.zip(\n                     keys_to_rewrite, splits_to_rewrite, existing_data):","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/__init__.py?ref=d9164b15479dd0761d9c540d8d78b5fb1921ed27"},{"status":"modified","deletions":8,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/d9164b15479dd0761d9c540d8d78b5fb1921ed27\/gnocchi\/tests\/test_storage.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/d9164b15479dd0761d9c540d8d78b5fb1921ed27\/gnocchi\/tests\/test_storage.py","changes":16,"filename":"gnocchi\/tests\/test_storage.py","sha":"cafc396b0639492742d7903d22b008161c1eabf1","additions":8,"patch":"@@ -76,14 +76,14 @@ def test_corrupted_split(self):\n \n         with mock.patch('gnocchi.carbonara.AggregatedTimeSerie.unserialize',\n                         side_effect=carbonara.InvalidData()):\n-            results = self.storage._get_splits_and_unserialize(\n-                self.metric,\n-                [\n+            results = self.storage._get_splits_and_unserialize({\n+                self.metric: [\n                     (carbonara.SplitKey(\n                         numpy.datetime64(1387800000, 's'),\n                         numpy.timedelta64(5, 'm')),\n                      aggregation)\n-                ])\n+                ],\n+            })[self.metric]\n             self.assertEqual(1, len(results))\n             self.assertIsInstance(results[0], carbonara.AggregatedTimeSerie)\n             # Assert it's an empty one since corrupted\n@@ -99,14 +99,14 @@ def test_get_splits_and_unserialize(self):\n         aggregation = self.metric.archive_policy.get_aggregation(\n             \"mean\", numpy.timedelta64(5, 'm'))\n \n-        results = self.storage._get_splits_and_unserialize(\n-            self.metric,\n-            [\n+        results = self.storage._get_splits_and_unserialize({\n+            self.metric: [\n                 (carbonara.SplitKey(\n                     numpy.datetime64(1387800000, 's'),\n                     numpy.timedelta64(5, 'm')),\n                  aggregation)\n-            ])\n+            ],\n+        })[self.metric]\n         self.assertEqual(1, len(results))\n         self.assertIsInstance(results[0], carbonara.AggregatedTimeSerie)\n         # Assert it's not empty one since corrupted","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/test_storage.py?ref=d9164b15479dd0761d9c540d8d78b5fb1921ed27"}],"committer":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"stats":{"deletions":34,"additions":37,"total":71},"author":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/d9164b15479dd0761d9c540d8d78b5fb1921ed27","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/d9164b15479dd0761d9c540d8d78b5fb1921ed27\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/d9164b15479dd0761d9c540d8d78b5fb1921ed27","sha":"d9164b15479dd0761d9c540d8d78b5fb1921ed27","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/e85b5970373b0393806ebeeadd5cd5741b2ae2ed","sha":"e85b5970373b0393806ebeeadd5cd5741b2ae2ed","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/e85b5970373b0393806ebeeadd5cd5741b2ae2ed"}],"commit":{"committer":{"date":"2018-03-13T09:04:14Z","name":"Julien Danjou","email":"julien@danjou.info"},"author":{"date":"2018-03-07T14:08:23Z","name":"Julien Danjou","email":"julien@danjou.info"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/d9164b15479dd0761d9c540d8d78b5fb1921ed27","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/71517ec7a6fc76f774aad3ee21fb81d11fa70117","sha":"71517ec7a6fc76f774aad3ee21fb81d11fa70117"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"storage: allow to unserialize splits for multiple metrics at once"}},{"files":[{"status":"modified","deletions":3,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/30a4e9f6e0b3d309fe0a3fd8411db3235c567854\/gnocchi\/storage\/__init__.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/30a4e9f6e0b3d309fe0a3fd8411db3235c567854\/gnocchi\/storage\/__init__.py","changes":28,"filename":"gnocchi\/storage\/__init__.py","sha":"c32aca71e5f558ba560bd2587150cc5abe33c0eb","additions":25,"patch":"@@ -207,7 +207,7 @@ def _store_metric_splits(self, metrics_keys_aggregations_data_offset,\n              in keys_aggregations_data_offset))\n \n     @staticmethod\n-    def _list_split_keys(metric, aggregations, version=3):\n+    def _list_split_keys_unbatched(self, metric, aggregations, version=3):\n         \"\"\"List split keys for a metric.\n \n         :param metric: The metric to look key for.\n@@ -218,6 +218,28 @@ def _list_split_keys(metric, aggregations, version=3):\n         \"\"\"\n         raise NotImplementedError\n \n+    def _list_split_keys(self, metrics_and_aggregations, version=3):\n+        \"\"\"List split keys for metrics.\n+\n+        :param metrics_and_aggregations: Dict of\n+                                         {`storage.Metric`:\n+                                          [`carbonara.Aggregation`]}\n+                                         to look for.\n+        :param version: Storage engine format version.\n+        :return: A dict where keys are `storage.Metric` and values are dicts\n+                 where keys are `carbonara.Aggregation` objects and values are\n+                 a set of `carbonara.SplitKey` objects.\n+        \"\"\"\n+        metrics = list(metrics_and_aggregations.keys())\n+        r = utils.parallel_map(\n+            self._list_split_keys_unbatched,\n+            ((metric, metrics_and_aggregations[metric], version)\n+             for metric in metrics))\n+        return {\n+            metric: results\n+            for metric, results in six.moves.zip(metrics, r)\n+        }\n+\n     @staticmethod\n     def _version_check(name, v):\n \n@@ -236,7 +258,7 @@ def get_aggregated_measures(self, metric, aggregations,\n         :param from timestamp: The timestamp to get the measure from.\n         :param to timestamp: The timestamp to get the measure to.\n         \"\"\"\n-        keys = self._list_split_keys(metric, aggregations)\n+        keys = self._list_split_keys({metric: aggregations})[metric]\n         timeseries = utils.parallel_map(\n             self._get_measures_timeserie,\n             ((metric, agg, keys[agg], from_timestamp, to_timestamp)\n@@ -458,7 +480,7 @@ def _compute_split_operations(self, metric, aggregations_and_timeseries,\n                     aggregations_needing_list_of_keys.add(aggregation)\n \n         all_existing_keys = self._list_split_keys(\n-            metric, aggregations_needing_list_of_keys)\n+            {metric: aggregations_needing_list_of_keys})[metric]\n \n         # NOTE(jd) This dict uses (key, aggregation) tuples as keys because\n         # using just (key) would not carry the aggregation method and therefore","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/__init__.py?ref=30a4e9f6e0b3d309fe0a3fd8411db3235c567854"},{"status":"modified","deletions":1,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/30a4e9f6e0b3d309fe0a3fd8411db3235c567854\/gnocchi\/storage\/ceph.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/30a4e9f6e0b3d309fe0a3fd8411db3235c567854\/gnocchi\/storage\/ceph.py","changes":2,"filename":"gnocchi\/storage\/ceph.py","sha":"3f9dd861600b6f22c1eff4f01442fe6072b7c1cc","additions":1,"patch":"@@ -159,7 +159,7 @@ def _get_splits_unbatched(self, metric, key, aggregation, version=3):\n         except rados.ObjectNotFound:\n             return\n \n-    def _list_split_keys(self, metric, aggregations, version=3):\n+    def _list_split_keys_unbatched(self, metric, aggregations, version=3):\n         with rados.ReadOpCtx() as op:\n             omaps, ret = self.ioctx.get_omap_vals(op, \"\", \"\", -1)\n             try:","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/ceph.py?ref=30a4e9f6e0b3d309fe0a3fd8411db3235c567854"},{"status":"modified","deletions":1,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/30a4e9f6e0b3d309fe0a3fd8411db3235c567854\/gnocchi\/storage\/file.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/30a4e9f6e0b3d309fe0a3fd8411db3235c567854\/gnocchi\/storage\/file.py","changes":2,"filename":"gnocchi\/storage\/file.py","sha":"bb3049b85e2a32ef56e31f8c03215fbc91a1af42","additions":1,"patch":"@@ -125,7 +125,7 @@ def _get_or_create_unaggregated_timeseries_unbatched(\n         except storage.MetricAlreadyExists:\n             pass\n \n-    def _list_split_keys(self, metric, aggregations, version=3):\n+    def _list_split_keys_unbatched(self, metric, aggregations, version=3):\n         keys = collections.defaultdict(set)\n         for method, grouped_aggregations in itertools.groupby(\n                 sorted(aggregations, key=ATTRGETTER_METHOD),","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/file.py?ref=30a4e9f6e0b3d309fe0a3fd8411db3235c567854"},{"status":"modified","deletions":37,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/30a4e9f6e0b3d309fe0a3fd8411db3235c567854\/gnocchi\/storage\/redis.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/30a4e9f6e0b3d309fe0a3fd8411db3235c567854\/gnocchi\/storage\/redis.py","changes":92,"filename":"gnocchi\/storage\/redis.py","sha":"304a9b5e710ae0a23f0274979200b5241674f02f","additions":55,"patch":"@@ -13,6 +13,8 @@\n # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n # License for the specific language governing permissions and limitations\n # under the License.\n+import collections\n+\n import six\n \n from gnocchi import carbonara\n@@ -95,35 +97,44 @@ def _get_or_create_unaggregated_timeseries(self, metrics, version=3):\n         }\n         return ts\n \n-    def _list_split_keys(self, metric, aggregations, version=3):\n-        key = self._metric_key(metric)\n+    def _list_split_keys(self, metrics_and_aggregations, version=3):\n         pipe = self._client.pipeline(transaction=False)\n-        pipe.exists(key)\n-        for aggregation in aggregations:\n-            self._scripts[\"list_split_keys\"](\n-                keys=[key], args=[self._aggregated_field_for_split(\n-                    aggregation.method, \"*\",\n-                    version, aggregation.granularity)],\n-                client=pipe,\n-            )\n+        # Keep an ordered list of metrics\n+        metrics = list(metrics_and_aggregations.keys())\n+        for metric in metrics:\n+            key = self._metric_key(metric)\n+            pipe.exists(key)\n+            aggregations = metrics_and_aggregations[metric]\n+            for aggregation in aggregations:\n+                self._scripts[\"list_split_keys\"](\n+                    keys=[key], args=[self._aggregated_field_for_split(\n+                        aggregation.method, \"*\",\n+                        version, aggregation.granularity)],\n+                    client=pipe,\n+                )\n         results = pipe.execute()\n-        metric_exists_p = results.pop(0)\n-        if not metric_exists_p:\n-            raise storage.MetricDoesNotExist(metric)\n-        keys = {}\n-        for aggregation, k in six.moves.zip(aggregations, results):\n-            if not k:\n-                keys[aggregation] = set()\n-                continue\n-            timestamps, methods, granularities = list(zip(*k))\n-            timestamps = utils.to_timestamps(timestamps)\n-            granularities = map(utils.to_timespan, granularities)\n-            keys[aggregation] = {\n-                carbonara.SplitKey(timestamp,\n-                                   sampling=granularity)\n-                for timestamp, granularity\n-                in six.moves.zip(timestamps, granularities)\n-            }\n+        keys = collections.defaultdict(dict)\n+        for metric in metrics:\n+            metric_exists_p = results.pop(0)\n+            if not metric_exists_p:\n+                raise storage.MetricDoesNotExist(metric)\n+            aggregations = metrics_and_aggregations[metric]\n+            keys_for_aggregations = results[:len(aggregations)]\n+            del results[:len(aggregations)]\n+            for aggregation, k in six.moves.zip(\n+                    aggregations, keys_for_aggregations):\n+                if not k:\n+                    keys[metric][aggregation] = set()\n+                    continue\n+                timestamps, methods, granularities = list(zip(*k))\n+                timestamps = utils.to_timestamps(timestamps)\n+                granularities = map(utils.to_timespan, granularities)\n+                keys[metric][aggregation] = {\n+                    carbonara.SplitKey(timestamp,\n+                                       sampling=granularity)\n+                    for timestamp, granularity\n+                    in six.moves.zip(timestamps, granularities)\n+                }\n         return keys\n \n     def _delete_metric_splits(self, metrics_keys_aggregations, version=3):\n@@ -155,13 +166,20 @@ def _get_splits(self, metrics_keys_aggregations, version=3):\n         pipe = self._client.pipeline(transaction=False)\n         # Use a list of metric with a constant sorting\n         metrics = list(metrics_keys_aggregations.keys())\n-        for metric in metrics:\n-            pipe.hmget(\n-                self._metric_key(metric),\n-                [self._aggregated_field_for_split(aggregation.method,\n-                                                  key, version)\n-                 for key, aggregation in metrics_keys_aggregations[metric]])\n-        return {\n-            metric: splits\n-            for metric, splits in six.moves.zip(metrics, pipe.execute())\n-        }\n+        results = {}\n+        for metric in list(metrics):\n+            keys_and_aggregations = metrics_keys_aggregations[metric]\n+            if keys_and_aggregations:\n+                pipe.hmget(\n+                    self._metric_key(metric),\n+                    [self._aggregated_field_for_split(aggregation.method,\n+                                                      key, version)\n+                     for key, aggregation in keys_and_aggregations])\n+            else:\n+                metrics.remove(metric)\n+                results[metric] = []\n+\n+        for metric, splits in six.moves.zip(metrics, pipe.execute()):\n+            results[metric] = splits\n+\n+        return results","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/redis.py?ref=30a4e9f6e0b3d309fe0a3fd8411db3235c567854"},{"status":"modified","deletions":1,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/30a4e9f6e0b3d309fe0a3fd8411db3235c567854\/gnocchi\/storage\/s3.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/30a4e9f6e0b3d309fe0a3fd8411db3235c567854\/gnocchi\/storage\/s3.py","changes":2,"filename":"gnocchi\/storage\/s3.py","sha":"16b73e5cc897f4f0db400404accb67e5a4523949","additions":1,"patch":"@@ -178,7 +178,7 @@ def _metric_exists_p(self, metric, version):\n             raise\n         return True\n \n-    def _list_split_keys(self, metric, aggregations, version=3):\n+    def _list_split_keys_unbatched(self, metric, aggregations, version=3):\n         bucket = self._bucket_name\n         keys = {}\n         for aggregation in aggregations:","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/s3.py?ref=30a4e9f6e0b3d309fe0a3fd8411db3235c567854"},{"status":"modified","deletions":1,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/30a4e9f6e0b3d309fe0a3fd8411db3235c567854\/gnocchi\/storage\/swift.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/30a4e9f6e0b3d309fe0a3fd8411db3235c567854\/gnocchi\/storage\/swift.py","changes":2,"filename":"gnocchi\/storage\/swift.py","sha":"9fbb41eac802cdbd4be2a0c673cc92feb2fba9fb","additions":1,"patch":"@@ -158,7 +158,7 @@ def _get_splits_unbatched(self, metric, key, aggregation, version=3):\n             raise\n         return contents\n \n-    def _list_split_keys(self, metric, aggregations, version=3):\n+    def _list_split_keys_unbatched(self, metric, aggregations, version=3):\n         container = self._container_name(metric)\n         try:\n             headers, files = self.swift.get_container(","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/swift.py?ref=30a4e9f6e0b3d309fe0a3fd8411db3235c567854"},{"status":"modified","deletions":71,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/30a4e9f6e0b3d309fe0a3fd8411db3235c567854\/gnocchi\/tests\/test_storage.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/30a4e9f6e0b3d309fe0a3fd8411db3235c567854\/gnocchi\/tests\/test_storage.py","changes":152,"filename":"gnocchi\/tests\/test_storage.py","sha":"d867744dd153d504e382d6a77499ab73a14b160d","additions":81,"patch":"@@ -350,26 +350,27 @@ def test_delete_old_measures(self):\n         agg = self.metric.archive_policy.get_aggregation(\n             \"mean\", numpy.timedelta64(1, 'D'))\n         self.assertEqual({\n-            agg: {carbonara.SplitKey(numpy.datetime64(1244160000, 's'),\n-                                     numpy.timedelta64(1, 'D'))},\n-        }, self.storage._list_split_keys(\n-            self.metric, [agg]))\n+            self.metric: {\n+                agg: {carbonara.SplitKey(numpy.datetime64(1244160000, 's'),\n+                                         numpy.timedelta64(1, 'D'))},\n+            },\n+        }, self.storage._list_split_keys({self.metric: [agg]}))\n         agg = self.metric.archive_policy.get_aggregation(\n             \"mean\", numpy.timedelta64(1, 'h'))\n         self.assertEqual({\n-            agg: {carbonara.SplitKey(numpy.datetime64(1412640000, 's'),\n-                                     numpy.timedelta64(1, 'h'))},\n-        }, self.storage._list_split_keys(\n-            self.metric, [agg],\n-        ))\n+            self.metric: {\n+                agg: {carbonara.SplitKey(numpy.datetime64(1412640000, 's'),\n+                                         numpy.timedelta64(1, 'h'))},\n+            },\n+        }, self.storage._list_split_keys({self.metric: [agg]}))\n         agg = self.metric.archive_policy.get_aggregation(\n             \"mean\", numpy.timedelta64(5, 'm'))\n         self.assertEqual({\n-            agg: {carbonara.SplitKey(numpy.datetime64(1419120000, 's'),\n-                                     numpy.timedelta64(5, 'm'))},\n-        }, self.storage._list_split_keys(\n-            self.metric, [agg],\n-        ))\n+            self.metric: {\n+                agg: {carbonara.SplitKey(numpy.datetime64(1419120000, 's'),\n+                                         numpy.timedelta64(5, 'm'))},\n+            }\n+        }, self.storage._list_split_keys({self.metric: [agg]}))\n \n     def test_get_measures_return(self):\n         self.incoming.add_measures(self.metric.id, [\n@@ -472,15 +473,17 @@ def test_rewrite_measures(self):\n         agg = self.metric.archive_policy.get_aggregation(\n             \"mean\", numpy.timedelta64(1, 'm'))\n         self.assertEqual({\n-            agg: {\n-                carbonara.SplitKey(numpy.datetime64(1451520000, 's'),\n-                                   numpy.timedelta64(1, 'm')),\n-                carbonara.SplitKey(numpy.datetime64(1451736000, 's'),\n-                                   numpy.timedelta64(1, 'm')),\n-                carbonara.SplitKey(numpy.datetime64(1451952000, 's'),\n-                                   numpy.timedelta64(1, 'm')),\n-            },\n-        }, self.storage._list_split_keys(self.metric, [agg]))\n+            self.metric: {\n+                agg: {\n+                    carbonara.SplitKey(numpy.datetime64(1451520000, 's'),\n+                                       numpy.timedelta64(1, 'm')),\n+                    carbonara.SplitKey(numpy.datetime64(1451736000, 's'),\n+                                       numpy.timedelta64(1, 'm')),\n+                    carbonara.SplitKey(numpy.datetime64(1451952000, 's'),\n+                                       numpy.timedelta64(1, 'm')),\n+                },\n+            }\n+        }, self.storage._list_split_keys({self.metric: [agg]}))\n \n         if self.storage.WRITE_FULL:\n             assertCompressedIfWriteFull = self.assertTrue\n@@ -530,17 +533,19 @@ def test_rewrite_measures(self):\n         agg = self.metric.archive_policy.get_aggregation(\n             \"mean\", numpy.timedelta64(1, 'm'))\n         self.assertEqual({\n-            agg: {\n-                carbonara.SplitKey(numpy.datetime64(1452384000, 's'),\n-                                   numpy.timedelta64(1, 'm')),\n-                carbonara.SplitKey(numpy.datetime64(1451736000, 's'),\n-                                   numpy.timedelta64(1, 'm')),\n-                carbonara.SplitKey(numpy.datetime64(1451520000, 's'),\n-                                   numpy.timedelta64(1, 'm')),\n-                carbonara.SplitKey(numpy.datetime64(1451952000, 's'),\n-                                   numpy.timedelta64(1, 'm')),\n+            self.metric: {\n+                agg: {\n+                    carbonara.SplitKey(numpy.datetime64(1452384000, 's'),\n+                                       numpy.timedelta64(1, 'm')),\n+                    carbonara.SplitKey(numpy.datetime64(1451736000, 's'),\n+                                       numpy.timedelta64(1, 'm')),\n+                    carbonara.SplitKey(numpy.datetime64(1451520000, 's'),\n+                                       numpy.timedelta64(1, 'm')),\n+                    carbonara.SplitKey(numpy.datetime64(1451952000, 's'),\n+                                       numpy.timedelta64(1, 'm')),\n+                },\n             },\n-        }, self.storage._list_split_keys(self.metric, [agg]))\n+        }, self.storage._list_split_keys({self.metric: [agg]}))\n         data = self.storage._get_splits({\n             self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451520000, 's'),\n@@ -600,15 +605,17 @@ def test_rewrite_measures_oldest_mutable_timestamp_eq_next_key(self):\n         agg = self.metric.archive_policy.get_aggregation(\n             \"mean\", numpy.timedelta64(1, 'm'))\n         self.assertEqual({\n-            agg: {\n-                carbonara.SplitKey(numpy.datetime64(1451520000, 's'),\n-                                   numpy.timedelta64(1, 'm')),\n-                carbonara.SplitKey(numpy.datetime64(1451736000, 's'),\n-                                   numpy.timedelta64(1, 'm')),\n-                carbonara.SplitKey(numpy.datetime64(1451952000, 's'),\n-                                   numpy.timedelta64(1, 'm')),\n+            self.metric: {\n+                agg: {\n+                    carbonara.SplitKey(numpy.datetime64(1451520000, 's'),\n+                                       numpy.timedelta64(1, 'm')),\n+                    carbonara.SplitKey(numpy.datetime64(1451736000, 's'),\n+                                       numpy.timedelta64(1, 'm')),\n+                    carbonara.SplitKey(numpy.datetime64(1451952000, 's'),\n+                                       numpy.timedelta64(1, 'm')),\n+                },\n             },\n-        }, self.storage._list_split_keys(self.metric, [agg]))\n+        }, self.storage._list_split_keys({self.metric: [agg]}))\n \n         if self.storage.WRITE_FULL:\n             assertCompressedIfWriteFull = self.assertTrue\n@@ -660,17 +667,19 @@ def test_rewrite_measures_oldest_mutable_timestamp_eq_next_key(self):\n         agg = self.metric.archive_policy.get_aggregation(\n             \"mean\", numpy.timedelta64(1, 'm'))\n         self.assertEqual({\n-            agg: {\n-                carbonara.SplitKey(numpy.datetime64('2016-01-10T00:00:00'),\n-                                   numpy.timedelta64(1, 'm')),\n-                carbonara.SplitKey(numpy.datetime64('2016-01-02T12:00:00'),\n-                                   numpy.timedelta64(1, 'm')),\n-                carbonara.SplitKey(numpy.datetime64('2015-12-31T00:00:00'),\n-                                   numpy.timedelta64(1, 'm')),\n-                carbonara.SplitKey(numpy.datetime64('2016-01-05T00:00:00'),\n-                                   numpy.timedelta64(1, 'm')),\n-            }\n-        }, self.storage._list_split_keys(self.metric, [agg]))\n+            self.metric: {\n+                agg: {\n+                    carbonara.SplitKey(numpy.datetime64('2016-01-10T00:00:00'),\n+                                       numpy.timedelta64(1, 'm')),\n+                    carbonara.SplitKey(numpy.datetime64('2016-01-02T12:00:00'),\n+                                       numpy.timedelta64(1, 'm')),\n+                    carbonara.SplitKey(numpy.datetime64('2015-12-31T00:00:00'),\n+                                       numpy.timedelta64(1, 'm')),\n+                    carbonara.SplitKey(numpy.datetime64('2016-01-05T00:00:00'),\n+                                       numpy.timedelta64(1, 'm')),\n+                },\n+            },\n+        }, self.storage._list_split_keys({self.metric: [agg]}))\n         data = self.storage._get_splits({\n             self.metric: [(carbonara.SplitKey(\n                 numpy.datetime64(1451520000, 's'),\n@@ -728,18 +737,17 @@ def test_rewrite_measures_corruption_missing_file(self):\n         agg = self.metric.archive_policy.get_aggregation(\n             \"mean\", numpy.timedelta64(1, 'm'))\n         self.assertEqual({\n-            agg: {\n-                carbonara.SplitKey(numpy.datetime64('2015-12-31T00:00:00'),\n-                                   numpy.timedelta64(1, 'm')),\n-                carbonara.SplitKey(numpy.datetime64('2016-01-02T12:00:00'),\n-                                   numpy.timedelta64(1, 'm')),\n-                carbonara.SplitKey(numpy.datetime64('2016-01-05T00:00:00'),\n-                                   numpy.timedelta64(1, 'm')),\n+            self.metric: {\n+                agg: {\n+                    carbonara.SplitKey(numpy.datetime64('2015-12-31T00:00:00'),\n+                                       numpy.timedelta64(1, 'm')),\n+                    carbonara.SplitKey(numpy.datetime64('2016-01-02T12:00:00'),\n+                                       numpy.timedelta64(1, 'm')),\n+                    carbonara.SplitKey(numpy.datetime64('2016-01-05T00:00:00'),\n+                                       numpy.timedelta64(1, 'm')),\n+                },\n             },\n-        }, self.storage._list_split_keys(\n-            self.metric,\n-            [agg],\n-        ))\n+        }, self.storage._list_split_keys({self.metric: [agg]}))\n         if self.storage.WRITE_FULL:\n             assertCompressedIfWriteFull = self.assertTrue\n         else:\n@@ -820,15 +828,17 @@ def test_rewrite_measures_corruption_bad_data(self):\n         agg = self.metric.archive_policy.get_aggregation(\n             \"mean\", numpy.timedelta64(1, 'm'))\n         self.assertEqual({\n-            agg: {\n-                carbonara.SplitKey(numpy.datetime64(1451520000, 's'),\n-                                   numpy.timedelta64(1, 'm')),\n-                carbonara.SplitKey(numpy.datetime64(1451736000, 's'),\n-                                   numpy.timedelta64(1, 'm')),\n-                carbonara.SplitKey(numpy.datetime64(1451952000, 's'),\n-                                   numpy.timedelta64(1, 'm')),\n+            self.metric: {\n+                agg: {\n+                    carbonara.SplitKey(numpy.datetime64(1451520000, 's'),\n+                                       numpy.timedelta64(1, 'm')),\n+                    carbonara.SplitKey(numpy.datetime64(1451736000, 's'),\n+                                       numpy.timedelta64(1, 'm')),\n+                    carbonara.SplitKey(numpy.datetime64(1451952000, 's'),\n+                                       numpy.timedelta64(1, 'm')),\n+                },\n             },\n-        }, self.storage._list_split_keys(self.metric, [agg]))\n+        }, self.storage._list_split_keys({self.metric: [agg]}))\n \n         if self.storage.WRITE_FULL:\n             assertCompressedIfWriteFull = self.assertTrue","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/test_storage.py?ref=30a4e9f6e0b3d309fe0a3fd8411db3235c567854"}],"committer":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"stats":{"deletions":115,"additions":165,"total":280},"author":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/30a4e9f6e0b3d309fe0a3fd8411db3235c567854","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/30a4e9f6e0b3d309fe0a3fd8411db3235c567854\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/30a4e9f6e0b3d309fe0a3fd8411db3235c567854","sha":"30a4e9f6e0b3d309fe0a3fd8411db3235c567854","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/268f454f96ebcb97f12642cb9c1ba44ed7d86f05","sha":"268f454f96ebcb97f12642cb9c1ba44ed7d86f05","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/268f454f96ebcb97f12642cb9c1ba44ed7d86f05"}],"commit":{"committer":{"date":"2018-03-13T09:04:14Z","name":"Julien Danjou","email":"julien@danjou.info"},"author":{"date":"2018-03-08T16:25:08Z","name":"Julien Danjou","email":"julien@danjou.info"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/30a4e9f6e0b3d309fe0a3fd8411db3235c567854","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/2386dc7b2ff347c4aa383023ff1b7ac8def14487","sha":"2386dc7b2ff347c4aa383023ff1b7ac8def14487"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"storage: allow to list split keys for different metric at the same time"}},{"files":[{"status":"modified","deletions":11,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/268f454f96ebcb97f12642cb9c1ba44ed7d86f05\/gnocchi\/storage\/__init__.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/268f454f96ebcb97f12642cb9c1ba44ed7d86f05\/gnocchi\/storage\/__init__.py","changes":28,"filename":"gnocchi\/storage\/__init__.py","sha":"80402961c86149b02d23bd32f82e45fbee69c96d","additions":17,"patch":"@@ -352,6 +352,7 @@ def _update_metric_splits(self, metrics_keys_aggregations_splits):\n                                                   oldest_mutable_timestamp)\n         \"\"\"\n         metrics_splits_to_store = {}\n+        splits_to_get = {}\n \n         for metric, (keys_and_aggregations_and_splits,\n                      oldest_mutable_timestamp) in six.iteritems(\n@@ -360,27 +361,32 @@ def _update_metric_splits(self, metrics_keys_aggregations_splits):\n             splits_to_rewrite = []\n             for (key, aggregation), split in six.iteritems(\n                     keys_and_aggregations_and_splits):\n-                # NOTE(jd) We write the full split only if the driver works that\n-                # way (self.WRITE_FULL) or if the oldest_mutable_timestamp is out\n-                # of range.\n+                # NOTE(jd) We write the full split only if the driver works\n+                # that way (self.WRITE_FULL) or if the oldest_mutable_timestamp\n+                # is out of range.\n                 write_full = (\n                     self.WRITE_FULL or next(key) <= oldest_mutable_timestamp\n                 )\n                 if write_full:\n                     keys_to_rewrite.append(key)\n                     splits_to_rewrite.append(split)\n \n-            # Update the splits that were passed as argument with the data already\n-            # stored in the case that we need to rewrite them fully.\n+            # Update the splits that were passed as argument with the data\n+            # already stored in the case that we need to rewrite them fully.\n             # First, fetch all those existing splits.\n-            existing_data = self._get_splits_and_unserialize({\n-                metric: [(key, split.aggregation)\n-                         for key, split\n-                         in six.moves.zip(keys_to_rewrite, splits_to_rewrite)]\n-            })[metric]\n+            splits_to_get[metric] = [\n+                (key, split.aggregation)\n+                for key, split\n+                in six.moves.zip(keys_to_rewrite, splits_to_rewrite)\n+            ]\n \n+        existing_data = self._get_splits_and_unserialize(splits_to_get)\n+\n+        for metric, (keys_and_aggregations_and_splits,\n+                     oldest_mutable_timestamp) in six.iteritems(\n+                         metrics_keys_aggregations_splits):\n             for key, split, existing in six.moves.zip(\n-                    keys_to_rewrite, splits_to_rewrite, existing_data):\n+                    keys_to_rewrite, splits_to_rewrite, existing_data[metric]):\n                 if existing:\n                     existing.merge(split)\n                     keys_and_aggregations_and_splits[","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/__init__.py?ref=268f454f96ebcb97f12642cb9c1ba44ed7d86f05"}],"committer":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"stats":{"deletions":11,"additions":17,"total":28},"author":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/268f454f96ebcb97f12642cb9c1ba44ed7d86f05","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/268f454f96ebcb97f12642cb9c1ba44ed7d86f05\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/268f454f96ebcb97f12642cb9c1ba44ed7d86f05","sha":"268f454f96ebcb97f12642cb9c1ba44ed7d86f05","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/d9164b15479dd0761d9c540d8d78b5fb1921ed27","sha":"d9164b15479dd0761d9c540d8d78b5fb1921ed27","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/d9164b15479dd0761d9c540d8d78b5fb1921ed27"}],"commit":{"committer":{"date":"2018-03-13T09:04:14Z","name":"Julien Danjou","email":"julien@danjou.info"},"author":{"date":"2018-03-08T16:36:04Z","name":"Julien Danjou","email":"julien@danjou.info"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/268f454f96ebcb97f12642cb9c1ba44ed7d86f05","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/379e9a846bc9394b293f658faccacc6a112d3661","sha":"379e9a846bc9394b293f658faccacc6a112d3661"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"storage: fetch all splits for all metrics at the same time"}},{"files":[{"status":"modified","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/19caa7b6c2f4dd7a309b729d85490d7296b03301\/gnocchi\/cli\/metricd.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/19caa7b6c2f4dd7a309b729d85490d7296b03301\/gnocchi\/cli\/metricd.py","changes":2,"filename":"gnocchi\/cli\/metricd.py","sha":"859efea4e1ea69539f7757b50ae86d0104c10b03","additions":2,"patch":"@@ -242,6 +242,8 @@ def _run_job(self):\n                 LOG.error(\"Unexpected error processing assigned job\",\n                           exc_info=True)\n         LOG.debug(\"%d metrics processed from %d sacks\", m_count, s_count)\n+        # Update statistics\n+        self.coord.update_capabitilities(self.GROUP_ID, self.statistics)\n         if sacks == self._get_sacks_to_process():\n             # We just did a full scan of all sacks, reset the timer\n             self._last_full_sack_scan.reset()","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/cli\/metricd.py?ref=19caa7b6c2f4dd7a309b729d85490d7296b03301"},{"status":"modified","deletions":1,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/19caa7b6c2f4dd7a309b729d85490d7296b03301\/gnocchi\/rest\/api.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/19caa7b6c2f4dd7a309b729d85490d7296b03301\/gnocchi\/rest\/api.py","changes":13,"filename":"gnocchi\/rest\/api.py","sha":"e9521128400dc6afe605708ff52756a9d4b186b2","additions":12,"patch":"@@ -2005,9 +2005,20 @@ def get(details=True):\n             report_dict[\"storage\"][\"measures_to_process\"] = report['details']\n         report_dict['metricd'] = {}\n         if members_req:\n-            report_dict['metricd']['processors'] = members_req.get()\n+            members = members_req.get()\n+            caps = [\n+                pecan.request.coordinator.get_member_capabilities(\n+                    metricd.MetricProcessor.GROUP_ID, member)\n+                for member in members\n+            ]\n+            report_dict['metricd']['processors'] = members\n+            report_dict['metricd']['statistics'] = {\n+                member: cap.get()\n+                for member, cap in six.moves.zip(members, caps)\n+            }\n         else:\n             report_dict['metricd']['processors'] = None\n+            report_dict['metricd']['statistics'] = {}\n         return report_dict\n \n ","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/rest\/api.py?ref=19caa7b6c2f4dd7a309b729d85490d7296b03301"},{"status":"modified","deletions":23,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/19caa7b6c2f4dd7a309b729d85490d7296b03301\/gnocchi\/storage\/__init__.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/19caa7b6c2f4dd7a309b729d85490d7296b03301\/gnocchi\/storage\/__init__.py","changes":60,"filename":"gnocchi\/storage\/__init__.py","sha":"07fea894f74692f693c5be8f75c09169c7af3429","additions":37,"patch":"@@ -98,11 +98,31 @@ def get_driver(conf):\n         conf.storage)\n \n \n+class Statistics(collections.defaultdict):\n+    class StatisticsTimeContext(object):\n+        def __init__(self, stats, name):\n+            self.stats = stats\n+            self.name = name + \" time\"\n+\n+        def __enter__(self):\n+            self.sw = utils.StopWatch()\n+            self.sw.start()\n+            return self\n+\n+        def __exit__(self, type, value, traceback):\n+            self.stats[self.name] += self.sw.elapsed()\n+\n+    def __init__(self):\n+        super(Statistics, self).__init__(lambda: 0)\n+\n+    def time(self, name):\n+        return self.StatisticsTimeContext(self, name)\n+\n+\n class StorageDriver(object):\n \n-    @staticmethod\n-    def __init__(conf):\n-        pass\n+    def __init__(self, conf):\n+        self.statistics = Statistics()\n \n     @staticmethod\n     def upgrade():\n@@ -575,11 +595,12 @@ def add_measures_to_metrics(self, metrics_and_measures):\n                                      objects and values are timeseries array of\n                                      the new measures.\n         \"\"\"\n-        with utils.StopWatch() as sw:\n+        with self.statistics.time(\"raw measures fetch\"):\n             raw_measures = self._get_or_create_unaggregated_timeseries(\n                 metrics_and_measures.keys())\n-        LOG.debug(\"Retrieve unaggregated measures for %d metric in %.2fs\",\n-                  len(metrics_and_measures), sw.elapsed())\n+        self.statistics[\"raw measures fetch\"] += len(metrics_and_measures)\n+        self.statistics[\"processed measures\"] += sum(\n+            map(len, metrics_and_measures.values()))\n \n         new_boundts = []\n         splits_to_delete = {}\n@@ -667,7 +688,7 @@ def _map_compute_splits_operations(bound_timeserie):\n                         deleted_keys,\n                         keys_and_split_to_store)\n \n-            with utils.StopWatch() as sw:\n+            with self.statistics.time(\"aggregated measures compute\"):\n                 (new_first_block_timestamp,\n                  deleted_keys,\n                  keys_and_splits_to_store) = ts.set_values(\n@@ -681,22 +702,15 @@ def _map_compute_splits_operations(bound_timeserie):\n \n             new_boundts.append((metric, ts.serialize()))\n \n-            number_of_operations = (len(agg_methods) * len(definition))\n-            perf = \"\"\n-            elapsed = sw.elapsed()\n-            if elapsed > 0:\n-                perf = \" (%d points\/s, %d measures\/s)\" % (\n-                    ((number_of_operations * computed_points['number']) \/\n-                        elapsed),\n-                    ((number_of_operations * len(measures)) \/ elapsed)\n-                )\n-            LOG.debug(\"Computed new metric %s with %d new measures \"\n-                      \"in %.2f seconds%s\",\n-                      metric.id, len(measures), elapsed, perf)\n-\n-        self._delete_metric_splits(splits_to_delete)\n-        self._update_metric_splits(splits_to_update)\n-        self._store_unaggregated_timeseries(new_boundts)\n+        with self.statistics.time(\"splits delete\"):\n+            self._delete_metric_splits(splits_to_delete)\n+        self.statistics[\"splits delete\"] += len(splits_to_delete)\n+        with self.statistics.time(\"splits update\"):\n+            self._update_metric_splits(splits_to_update)\n+        self.statistics[\"splits delete\"] += len(splits_to_update)\n+        with self.statistics.time(\"raw measures store\"):\n+            self._store_unaggregated_timeseries(new_boundts)\n+        self.statistics[\"raw measures store\"] += len(new_boundts)\n \n     def find_measure(self, metric, predicate, granularity, aggregation=\"mean\",\n                      from_timestamp=None, to_timestamp=None):","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/__init__.py?ref=19caa7b6c2f4dd7a309b729d85490d7296b03301"},{"status":"modified","deletions":2,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/19caa7b6c2f4dd7a309b729d85490d7296b03301\/gnocchi\/tests\/functional\/gabbits\/base.yaml","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/19caa7b6c2f4dd7a309b729d85490d7296b03301\/gnocchi\/tests\/functional\/gabbits\/base.yaml","changes":4,"filename":"gnocchi\/tests\/functional\/gabbits\/base.yaml","sha":"fdde5f496a7dd14f9ac312c2eef4aef084643caf","additions":2,"patch":"@@ -132,7 +132,7 @@ tests:\n     authorization: \"basic YWRtaW46\"\n   response_json_paths:\n     $.storage.`len`: 2\n-    $.metricd.`len`: 1\n+    $.metricd.`len`: 2\n \n - name: get status, no details\n   GET: \/v1\/status?details=False\n@@ -141,4 +141,4 @@ tests:\n     authorization: \"basic YWRtaW46\"\n   response_json_paths:\n     $.storage.`len`: 1\n-    $.metricd.`len`: 1\n+    $.metricd.`len`: 2","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/functional\/gabbits\/base.yaml?ref=19caa7b6c2f4dd7a309b729d85490d7296b03301"}],"committer":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"stats":{"deletions":26,"additions":53,"total":79},"author":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/19caa7b6c2f4dd7a309b729d85490d7296b03301","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/19caa7b6c2f4dd7a309b729d85490d7296b03301\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/19caa7b6c2f4dd7a309b729d85490d7296b03301","sha":"19caa7b6c2f4dd7a309b729d85490d7296b03301","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/30a4e9f6e0b3d309fe0a3fd8411db3235c567854","sha":"30a4e9f6e0b3d309fe0a3fd8411db3235c567854","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/30a4e9f6e0b3d309fe0a3fd8411db3235c567854"}],"commit":{"committer":{"date":"2018-03-13T09:04:14Z","name":"Julien Danjou","email":"julien@danjou.info"},"author":{"date":"2018-03-12T16:05:11Z","name":"Julien Danjou","email":"julien@danjou.info"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/19caa7b6c2f4dd7a309b729d85490d7296b03301","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/9dc9ddca5d7ee32f30d01398a68dbceb8d72d30c","sha":"9dc9ddca5d7ee32f30d01398a68dbceb8d72d30c"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"metricd: publish statistics about processing speed\n\nCloses #600"}},{"files":[{"status":"modified","deletions":6,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/291192ccf954940e22d0dca515014b8cc5b9ca73\/gnocchi\/cli\/metricd.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/291192ccf954940e22d0dca515014b8cc5b9ca73\/gnocchi\/cli\/metricd.py","changes":10,"filename":"gnocchi\/cli\/metricd.py","sha":"d106879941e5dd2d071d2c7aa04af3579601226d","additions":4,"patch":"@@ -297,14 +297,12 @@ def metricd_tester(conf):\n     index = indexer.get_driver(conf)\n     s = storage.get_driver(conf)\n     inc = incoming.get_driver(conf)\n-    metrics = set()\n+    c = chef.Chef(None, inc, index, s)\n+    metrics_count = 0\n     for sack in inc.iter_sacks():\n-        metrics.update(inc.list_metric_with_measures_to_process(sack))\n-        if len(metrics) >= conf.stop_after_processing_metrics:\n+        metrics_count += c.process_new_measures_for_sack(s, True)\n+        if metrics_count >= conf.stop_after_processing_metrics:\n             break\n-    c = chef.Chef(None, inc, index, s)\n-    c.process_new_measures(\n-        list(metrics)[:conf.stop_after_processing_metrics], True)\n \n \n def metricd():","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/cli\/metricd.py?ref=291192ccf954940e22d0dca515014b8cc5b9ca73"}],"committer":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"stats":{"deletions":6,"additions":4,"total":10},"author":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/291192ccf954940e22d0dca515014b8cc5b9ca73","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/291192ccf954940e22d0dca515014b8cc5b9ca73\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/291192ccf954940e22d0dca515014b8cc5b9ca73","sha":"291192ccf954940e22d0dca515014b8cc5b9ca73","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/19caa7b6c2f4dd7a309b729d85490d7296b03301","sha":"19caa7b6c2f4dd7a309b729d85490d7296b03301","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/19caa7b6c2f4dd7a309b729d85490d7296b03301"}],"commit":{"committer":{"date":"2018-03-13T09:04:14Z","name":"Julien Danjou","email":"julien@danjou.info"},"author":{"date":"2018-03-13T08:43:35Z","name":"Julien Danjou","email":"julien@danjou.info"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/291192ccf954940e22d0dca515014b8cc5b9ca73","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/6686088dab02f25e71ec38197fe3faf4fab52b93","sha":"6686088dab02f25e71ec38197fe3faf4fab52b93"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"metricd: use process_new_measures_for_sack in test code"}},{"files":[{"status":"modified","deletions":5,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/1c0265eefee23597d70b9475aa4ab41b1087214b\/gnocchi\/tests\/functional\/fixtures.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/1c0265eefee23597d70b9475aa4ab41b1087214b\/gnocchi\/tests\/functional\/fixtures.py","changes":7,"filename":"gnocchi\/tests\/functional\/fixtures.py","sha":"50187086903f2600f11d284cf7b1d59254ef8f7e","additions":2,"patch":"@@ -257,11 +257,8 @@ def __init__(self, chef, name='metricd'):\n \n     def run(self):\n         while self.flag:\n-            metrics = utils.list_all_incoming_metrics(self.chef.incoming)\n-            metrics = self.chef.index.list_metrics(\n-                attribute_filter={\"in\": {\"id\": metrics}})\n-            for metric in metrics:\n-                self.chef.refresh_metric(metric, timeout=None)\n+            for sack in self.chef.incoming.iter_sacks():\n+                self.chef.process_new_measures_for_sack(sack)\n             time.sleep(0.1)\n \n     def stop(self):","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/functional\/fixtures.py?ref=1c0265eefee23597d70b9475aa4ab41b1087214b"}],"committer":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"stats":{"deletions":5,"additions":2,"total":7},"author":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/1c0265eefee23597d70b9475aa4ab41b1087214b","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/1c0265eefee23597d70b9475aa4ab41b1087214b\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/1c0265eefee23597d70b9475aa4ab41b1087214b","sha":"1c0265eefee23597d70b9475aa4ab41b1087214b","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/291192ccf954940e22d0dca515014b8cc5b9ca73","sha":"291192ccf954940e22d0dca515014b8cc5b9ca73","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/291192ccf954940e22d0dca515014b8cc5b9ca73"}],"commit":{"committer":{"date":"2018-03-13T09:04:14Z","name":"Julien Danjou","email":"julien@danjou.info"},"author":{"date":"2018-03-13T08:51:40Z","name":"Julien Danjou","email":"julien@danjou.info"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/1c0265eefee23597d70b9475aa4ab41b1087214b","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/f66283880baf3222756fa7d0b3202aac130c1e6f","sha":"f66283880baf3222756fa7d0b3202aac130c1e6f"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"tests: process sack by sack rather than metric by metric in functional tests"}},{"files":[{"status":"modified","deletions":4,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/8d6e9a8558c10a909d808cd1e20fa1b774fc511f\/gnocchi\/cli\/metricd.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/8d6e9a8558c10a909d808cd1e20fa1b774fc511f\/gnocchi\/cli\/metricd.py","changes":23,"filename":"gnocchi\/cli\/metricd.py","sha":"ac5c06e8889f3d6b55d99dfd74136a8eac9b9a89","additions":19,"patch":"@@ -139,6 +139,9 @@ class MetricProcessor(MetricProcessBase):\n     def __init__(self, worker_id, conf):\n         super(MetricProcessor, self).__init__(\n             worker_id, conf, conf.metricd.metric_processing_delay)\n+\n+        conf.storage.rocksdb_readonly = False\n+\n         self._tasks = []\n         self.group_state = None\n         self.sacks_with_measures_to_process = set()\n@@ -243,12 +246,16 @@ def _run_job(self):\n                           exc_info=True)\n         LOG.debug(\"%d metrics processed from %d sacks\", m_count, s_count)\n         # Update statistics\n-        self.coord.update_capabitilities(self.GROUP_ID, self.statistics)\n+        # self.coord.update_capabitilities(self.GROUP_ID, self.statistics)\n         if sacks == self._get_sacks_to_process():\n             # We just did a full scan of all sacks, reset the timer\n             self._last_full_sack_scan.reset()\n             LOG.debug(\"Full scan of sacks has been done\")\n \n+        if self.conf.storage.driver == \"rocksdb\":\n+            self.chef.expunge_metrics()\n+            LOG.debug(\"Metrics marked for deletion removed from backend\")\n+\n     def close_services(self):\n         self.coord.stop()\n \n@@ -273,11 +280,14 @@ def __init__(self, conf):\n         self.conf = conf\n         self.metric_processor_id = self.add(\n             MetricProcessor, args=(self.conf,),\n-            workers=conf.metricd.workers)\n+            workers=self.get_workers())\n+\n         if self.conf.metricd.metric_reporting_delay >= 0:\n             self.add(MetricReporting, args=(self.conf,))\n-        self.add(MetricJanitor, args=(self.conf,))\n \n+        # FIXME(sileht): Maybe not the best solution\n+        if self.conf.storage.driver == \"rocksdb\":\n+            self.add(MetricJanitor, args=(self.conf,))\n         self.register_hooks(on_reload=self.on_reload)\n \n     def on_reload(self):\n@@ -287,7 +297,12 @@ def on_reload(self):\n         # we use the number of worker to declare the capability in tooz and\n         # to select the block of metrics to proceed.\n         self.reconfigure(self.metric_processor_id,\n-                         workers=self.conf.metricd.workers)\n+                         workers=self.get_workers())\n+\n+    def get_workers(self):\n+        if self.conf.storage.driver == \"rocksdb\":\n+            return 1\n+        return self.conf.metricd.workers\n \n \n def metricd_tester(conf):","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/cli\/metricd.py?ref=8d6e9a8558c10a909d808cd1e20fa1b774fc511f"},{"status":"modified","deletions":2,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/8d6e9a8558c10a909d808cd1e20fa1b774fc511f\/gnocchi\/incoming\/file.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/8d6e9a8558c10a909d808cd1e20fa1b774fc511f\/gnocchi\/incoming\/file.py","changes":4,"filename":"gnocchi\/incoming\/file.py","sha":"cb6a3b9d6595bfe4e2b79ba04602822055824b41","additions":2,"patch":"@@ -40,8 +40,8 @@ def __str__(self):\n         return \"%s: %s\" % (self.__class__.__name__, str(self.basepath))\n \n     def upgrade(self, num_sacks):\n-        super(FileStorage, self).upgrade(num_sacks)\n         utils.ensure_paths([self.basepath_tmp])\n+        super(FileStorage, self).upgrade(num_sacks)\n \n     def _get_storage_sacks(self):\n         with open(os.path.join(self.basepath_tmp, self.CFG_PREFIX),\n@@ -89,7 +89,7 @@ def _store_new_measures(self, metric_id, data):\n                 if e.errno != errno.ENOENT:\n                     raise\n                 try:\n-                    os.mkdir(self._build_measure_path(metric_id))\n+                    os.makedirs(self._build_measure_path(metric_id))\n                 except OSError as e:\n                     # NOTE(jd) It's possible that another process created the\n                     # path just before us! In this case, good for us, let's do","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/incoming\/file.py?ref=8d6e9a8558c10a909d808cd1e20fa1b774fc511f"},{"status":"modified","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/8d6e9a8558c10a909d808cd1e20fa1b774fc511f\/gnocchi\/opts.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/8d6e9a8558c10a909d808cd1e20fa1b774fc511f\/gnocchi\/opts.py","changes":2,"filename":"gnocchi\/opts.py","sha":"2abb64dff8c5afc03e225c562a4a4f8295433e99","additions":2,"patch":"@@ -27,6 +27,7 @@\n import gnocchi.storage.file\n import gnocchi.storage.s3\n import gnocchi.storage.swift\n+import gnocchi.storage.rocksdb\n \n \n # NOTE(sileht): The oslo.config interpolation is buggy when the value\n@@ -49,6 +50,7 @@ def __getitem__(self, key):\n                                      gnocchi.storage.file.OPTS,\n                                      gnocchi.storage.swift.OPTS,\n                                      gnocchi.common.redis.OPTS,\n+                                     gnocchi.storage.rocksdb.OPTS,\n                                      gnocchi.storage.s3.OPTS))\n \n ","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/opts.py?ref=8d6e9a8558c10a909d808cd1e20fa1b774fc511f"},{"status":"added","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/8d6e9a8558c10a909d808cd1e20fa1b774fc511f\/gnocchi\/storage\/rocksdb.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/8d6e9a8558c10a909d808cd1e20fa1b774fc511f\/gnocchi\/storage\/rocksdb.py","changes":430,"filename":"gnocchi\/storage\/rocksdb.py","sha":"04f8175c7f5b76f201b6b8b3f6e30118bf5b6b0c","additions":430,"patch":"@@ -0,0 +1,430 @@\n+# -*- encoding: utf-8 -*-\n+#\n+# Copyright \u00a9 2018 Red Hat\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n+# not use this file except in compliance with the License. You may obtain\n+# a copy of the License at\n+#\n+#      http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+# License for the specific language governing permissions and limitations\n+# under the License.\n+from __future__ import absolute_import\n+\n+import collections\n+import os\n+import socket\n+import struct\n+\n+import cotyledon\n+import daiquiri\n+import itertools\n+from oslo_config import cfg\n+import six\n+\n+try:\n+    import rocksdb\n+except ImportError:\n+    rocksdb = None\n+\n+from gnocchi import carbonara\n+from gnocchi import storage\n+from gnocchi import utils\n+\n+\n+OPTS = [\n+    cfg.StrOpt('rocksdb_path',\n+               default='\/var\/lib\/gnocchi\/storage.db',\n+               help='Path used to store gnocchi data files.'),\n+    cfg.StrOpt('rocksdb_writer_socket',\n+               default='\/var\/lib\/gnocchi\/writer.sock',\n+               help='Path used to exchange data between reader and '\n+               'writer daemon'),\n+    cfg.BoolOpt('rocksdb_readonly',\n+                default=True,\n+                help='Make the rocksdb database readonly'),\n+    cfg.IntOpt('rocksdb_flush_every_operation',\n+               min=1, default=500,\n+               help='Flush every N operations'),\n+\n+]\n+\n+LOG = daiquiri.getLogger(__name__)\n+\n+VERSION_MAX_LEN = 3\n+\n+if rocksdb is not None:\n+    class MetricPrefix(rocksdb.interfaces.SliceTransform):\n+        # NOTE(sileht): Only one digit for the version, this assume\n+        # we never reach 1000 :p, or more seriously this must be changed\n+        # during upgrade when we reach version 1000\n+        #\n+        # <metric_id>_v<version>_\n+        METRIC_LEN = 36 + 2 + VERSION_MAX_LEN + 1\n+\n+        def name(self):\n+            return b'<metric-id>_v<version>_'\n+\n+        def transform(self, src):\n+            return (0, self.METRIC_LEN)\n+\n+        def in_domain(self, src):\n+            return len(src) >= self.METRIC_LEN\n+\n+        def in_range(self, dst):\n+            return len(dst) == self.METRIC_LEN\n+\n+\n+def open_db(path, read_only=True):\n+    # NOTE(sileht): Depending of the used disk, the database configuration\n+    # should differ.\n+    # https:\/\/github.com\/facebook\/rocksdb\/wiki\/RocksDB-Tuning-Guide#difference-of-spinning-disk\n+    # https:\/\/github.com\/facebook\/rocksdb\/wiki\/RocksDB-Tuning-Guide#prefix-database-on-flash-storage\n+    # I pick recommanded options for flash storage\n+    options = rocksdb.Options()\n+    options.create_if_missing = True\n+    options.compression = \"snappy_compression\"\n+    options.max_open_files = -1\n+\n+    options.compaction_style = 'level'\n+    options.write_buffer_size = 64 * 1024 * 1024\n+    options.max_write_buffer_number = 3\n+    options.target_file_size_base = 64 * 1024 * 1024\n+    options.level0_file_num_compaction_trigger = 10\n+    options.level0_slowdown_writes_trigger = 20\n+    options.level0_stop_writes_trigger = 40\n+    options.max_bytes_for_level_base = 512 * 1024 * 1024\n+    options.max_background_compactions = 1\n+    options.max_background_flushes = 1\n+    # memtable_prefix_bloom_bits=1024 * 1024 * 8,\n+\n+    # Creates an index with metric ids\n+    options.prefix_extractor = MetricPrefix()\n+    options.table_factory = rocksdb.BlockBasedTableFactory(\n+        index_type=\"hash_search\",\n+        filter_policy=rocksdb.BloomFilterPolicy(10),\n+        block_size=4 * 1024,\n+        block_cache=rocksdb.LRUCache(512 * 1024 * 1024, 10),\n+    )\n+\n+    try:\n+        return rocksdb.DB(path, options, read_only=read_only)\n+    except rocksdb.errors.Corruption:\n+        if read_only:\n+            LOG.exception(\"RocksDB database corrupted.\")\n+        else:\n+            LOG.warning(\"RocksDB database corrupted, trying to repair.\")\n+            rocksdb.repair_db(path, options)\n+            return rocksdb.DB(path, options, read_only=read_only)\n+\n+\n+WRITER_OP_MAP = ['put', 'delete']\n+\n+\n+class WriterService(cotyledon.Service):\n+    BUFSIZE = 4096\n+    BATCH_LEN_SIZE = struct.calcsize(\"Q\")\n+\n+    def __init__(self, conf):\n+        return\n+        self._db = open_db(conf.storage.rocksdb_path, read_only=False)\n+        if os.path.exists(conf.storage.rocksdb_writer_socket):\n+            os.remove(conf.storage.rocksdb_writer_socket)\n+\n+        self._server = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n+        self._server.bind(conf.storage.rocksdb_writer_socket)\n+        self._server.listen(100)  # soconnmax default is 128\n+\n+        self._client_to_acks = []\n+        self._current_buffer = b\"\"\n+        self._current_buffer_len = 0\n+\n+        self._flush_every_operation = (\n+            conf.storage.rocksdb_flush_every_operation)\n+        self._flush_every_time = 30\n+\n+    def _get_or_fetch(self, connection, fmt):\n+        needed_len = struct.calcsize(fmt)\n+        while self._current_buffer_len < needed_len:\n+            try:\n+                buf = connection.recv(self.BUFSIZE)\n+            except socket.error:\n+                LOG.exception(\"SOCKET ERROR\")\n+                return None\n+            self._current_buffer_len += len(buf)\n+            self._current_buffer += buf\n+\n+        buf = self._current_buffer[:needed_len]\n+        self._current_buffer = self._current_buffer[needed_len:]\n+        self._current_buffer_len -= needed_len\n+        return buf\n+\n+    def run(self):\n+        # NOTE(sileht): tocksdb batch is more efficient if keys are ordered\n+        ops = []\n+        sw = utils.StopWatch().start()\n+        count = 0\n+\n+        while True:\n+            connection, client_address = self._server.accept()\n+            # TODO(sileht): This make priority between workers not very fair\n+            # but for now I don't care.\n+            connection.set_blocking(False)\n+\n+            while True:\n+                number_of_operations = self._get_or_fetch(connection, \"<Q\")\n+                for i in range(number_of_operations):\n+                    count += 1\n+                    op, lkey, ldata = self._get_or_fetch(connection, \"<BIQ\")\n+                    op = WRITER_OP_MAP[op]\n+                    key, data = self._get_or_fetch(connection, \"<%ds%ds\")\n+                    # NOTE(sileht): Count ensure that within a key operation\n+                    # are ordered in the expected order.\n+                    ops.append((key, count, op, data))\n+                self._client_to_acks.append(connection)\n+\n+            if (count >= self._flush_every_operation or\n+                    sw.elapsed() >= self._flush_every_time):\n+                batch = rocksdb.WriteBatch()\n+                for key, _, op, data in sorted(ops):\n+                    if op == \"put\":\n+                        batch.put(key, data)\n+                    else:\n+                        batch.delete(key)\n+                self._db.write(batch)\n+                ops = []\n+                count = 0\n+                sw.reset()\n+                for conn in self._client_to_acks:\n+                    conn.write(struct.pack(\"<?\", True))\n+\n+    def terminate(self):\n+        self._server.close()\n+\n+\n+class WriterProxy(object):\n+    # The protocol:\n+    # payload:\n+    #   <number_of_operation_to_batch><operation><operation><operation>....\n+    #\n+    # operation:\n+    #   <put\/delete><len_of_key><len_of_data><key><data>\n+\n+    def __init__(self, conf):\n+        self._client = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)\n+        self._client.connect(conf.storage.rocksdb_writer_socket)\n+\n+    @staticmethod\n+    def _serialize(op, key, data):\n+        lkey = len(key)\n+        ldata = len(data)\n+        return struct.pack(\"<BIQ%ds%ds\" % (lkey, ldata),\n+                           WRITER_OP_MAP[op],\n+                           lkey, ldata, key, data)\n+\n+    def _send(self, msgs):\n+        # recv is non blocking, and code currently assume the whole msg\n+        # have been sent when nodata can be read, so we need only one write\n+        # here (or later change the server side)\n+        data = struct.pack(\"<Q\", len(msgs)) + b\"\".join(msgs)\n+        self._client.send(data)\n+\n+    def _wait(self):\n+        # Handle error here ?\n+        self._client.recv(struct.calcsize(\"<?\"))\n+\n+    def delete(self, keys):\n+        self._send([self._serialize(\"delete\", key, \"\") for key in keys])\n+        self._wait()\n+\n+    def mput(self, values):\n+        self._send([self._serialize(\"put\", key, data)\n+                    for key, data in six.iteritems(values)])\n+        self._wait()\n+\n+    def close(self):\n+        self._client.close()\n+\n+\n+class RocksDBStorage(storage.StorageDriver):\n+    \"\"\"RocksDBStorage\n+\n+    Index format optimised for browsing list split keys:\n+\n+        <metric.id>_<aggregation.method>_<aggregation.granularity>_...\n+\n+    \"\"\"\n+    WRITE_FULL = True\n+    FIELD_SEP = '_'\n+\n+    def __init__(self, conf):\n+        super(RocksDBStorage, self).__init__(conf)\n+        self._conf = conf\n+        if rocksdb is None:\n+            raise RuntimeError(\"python-rocksdb module is unavailable\")\n+\n+        self._db = None\n+\n+    def stop(self):\n+        # TODO(sileht): Make everything call this. for cotyledon in terminate\n+        # for API in atexit\n+        if self._db is not None:\n+            self._db.close()\n+\n+    @property\n+    def db(self):\n+        # TODO(sileht): proxy this\n+        if self._db is None:\n+            self._db = open_db(self._conf.rocksdb_path,\n+                               read_only=self._conf.rocksdb_readonly)\n+        return self._db\n+\n+    def __str__(self):\n+        return \"%s: %s\" % (self.__class__.__name__, str(\n+            self._conf.rocksdb_path))\n+\n+    @classmethod\n+    def _unaggregated_key(cls, metric, version=3):\n+        return cls.FIELD_SEP.join([\n+            str(metric.id),\n+            \"v%s\" % str(version).rjust(VERSION_MAX_LEN, \"0\"),\n+            'none',\n+        ]).encode()\n+\n+    @classmethod\n+    def _aggregated_key_for_split(cls, metric, version=3, aggregation=None,\n+                                  key=None):\n+        items = [str(metric.id),\n+                 'v%s' % str(version).rjust(VERSION_MAX_LEN, \"0\")]\n+        if aggregation is None:\n+            items.append(\"\")\n+        else:\n+            items.append(aggregation.method)\n+            if key is None:\n+                items.append(str(utils.timespan_total_seconds(\n+                    aggregation.granularity)))\n+                items.append(\"\")\n+            else:\n+                items.append(str(utils.timespan_total_seconds(key.sampling)))\n+                items.append(str(key))\n+\n+        return cls.FIELD_SEP.join(items).encode()\n+\n+    def _store_unaggregated_timeseries(self, metrics_and_data, version=3):\n+        batch = rocksdb.WriteBatch()\n+        for metric, data in metrics_and_data:\n+            batch.put(self._unaggregated_key(metric, version), data)\n+        self.db.write(batch)\n+\n+    # READ ONLY OPERATIONS\n+\n+    def _get_splits(self, metrics_keys_aggregations, version=3):\n+        # Use a list of metric with a constant sorting\n+        metrics = list(metrics_keys_aggregations.keys())\n+        results = {}\n+        keys = []\n+        results_metrics = []\n+        for metric in metrics:\n+            keys_and_aggregations = metrics_keys_aggregations[metric]\n+            for key, aggregation in keys_and_aggregations:\n+                k = self._aggregated_key_for_split(\n+                    metric, version, aggregation, key)\n+                keys.append(k)\n+                results_metrics.append((metric, k))\n+\n+        intermediate_results = self.db.multi_get(keys)\n+        results = collections.defaultdict(list)\n+        for metric, k in results_metrics:\n+            results[metric].append(intermediate_results[k])\n+        return results\n+\n+    def _get_or_create_unaggregated_timeseries(self, metrics, version=3):\n+        keys = [self._unaggregated_key(metric, version) for metric in metrics]\n+\n+        # FIXME(sileht): Do we really need to create them ?\n+        batch = rocksdb.WriteBatch()\n+        for key in keys:\n+            if not self.db.key_may_exist(key, fetch=False)[0]:\n+                batch.put(key, \"\")\n+        self.db.write(batch)\n+        return dict(six.moves.zip(\n+            metrics, (data or None for data in\n+                      self.db.multi_get(keys).values())))\n+\n+    def _list_split_keys(self, metrics_and_aggregations, version=3):\n+        it = self.db.iterkeys()\n+\n+        split_keys = collections.defaultdict(dict)\n+        metrics = sorted(metrics_and_aggregations.keys())\n+        while metrics:\n+            metric = metrics.pop(0)\n+            prefix = self._aggregated_key_for_split(metric, version)\n+            it.seek(prefix)\n+\n+            # This returns aggregated and unaggregated keys\n+            metric_keys = itertools.takewhile(lambda i: i.startswith(prefix),\n+                                              it)\n+            metric_keys = list(metric_keys)\n+\n+            if not metric_keys:\n+                # Existing metric should at least have the unaggregated ts\n+                raise storage.MetricDoesNotExist(metric)\n+\n+            for aggregation in metrics_and_aggregations[metric]:\n+                split_keys[metric][aggregation] = set()\n+                prefix_with_agg = self._aggregated_key_for_split(\n+                    metric, version, aggregation)\n+                k = six.moves.filter(lambda i: i.startswith(prefix_with_agg),\n+                                     metric_keys)\n+                k = six.moves.map(\n+                    lambda i: tuple(i.split(self.FIELD_SEP)[3:5]), k)\n+                granularities_and_timestamps = list(zip(*k))\n+                if not granularities_and_timestamps:\n+                    continue\n+\n+                granularities, timestamps = granularities_and_timestamps\n+                timestamps = utils.to_timestamps(timestamps)\n+                granularities = map(utils.to_timespan, granularities)\n+\n+                split_keys[metric][aggregation] = {\n+                    carbonara.SplitKey(timestamp,\n+                                       sampling=granularity)\n+                    for timestamp, granularity\n+                    in six.moves.zip(timestamps, granularities)\n+                }\n+        return split_keys\n+\n+    # WRITE ONLY OPERATIONS\n+\n+    def _delete_metric_splits(self, metrics_keys_aggregations, version=3):\n+        batch = rocksdb.WriteBatch()\n+        for metric, keys_and_aggregations in six.iteritems(\n+                metrics_keys_aggregations):\n+            for key, aggregation in keys_and_aggregations:\n+                batch.delete(self._aggregated_key_for_split(\n+                    metric, version, aggregation, key))\n+        self.db.write(batch)\n+\n+    def _store_metric_splits(self, metrics_keys_aggregations_data_offset,\n+                             version=3):\n+        batch = rocksdb.WriteBatch()\n+        for metric, keys_aggs_data_offset in six.iteritems(\n+                metrics_keys_aggregations_data_offset):\n+            for key, aggregation, data, offset in keys_aggs_data_offset:\n+                k = self._aggregated_key_for_split(metric, version,\n+                                                   aggregation, key)\n+                batch.put(k, data)\n+        self.db.write(batch)\n+\n+    def _delete_metric(self, metric):\n+        batch = rocksdb.WriteBatch()\n+        prefix = str(metric.id)\n+        it = self.db.iterkeys()\n+        it.seek(prefix)\n+        for key in itertools.takewhile(lambda i: i.startswith(prefix), it):\n+            batch.delete(key)\n+        self.db.write(batch)","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/rocksdb.py?ref=8d6e9a8558c10a909d808cd1e20fa1b774fc511f"},{"status":"added","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/8d6e9a8558c10a909d808cd1e20fa1b774fc511f\/gnocchi\/storage\/rocksdb_writer.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/8d6e9a8558c10a909d808cd1e20fa1b774fc511f\/gnocchi\/storage\/rocksdb_writer.py","changes":0,"filename":"gnocchi\/storage\/rocksdb_writer.py","sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","additions":0,"contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/rocksdb_writer.py?ref=8d6e9a8558c10a909d808cd1e20fa1b774fc511f"},{"status":"modified","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/8d6e9a8558c10a909d808cd1e20fa1b774fc511f\/gnocchi\/tests\/base.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/8d6e9a8558c10a909d808cd1e20fa1b774fc511f\/gnocchi\/tests\/base.py","changes":19,"filename":"gnocchi\/tests\/base.py","sha":"25af63f0deec7e5b827c788cf81c51e4f5479708","additions":19,"patch":"@@ -340,6 +340,25 @@ def setUp(self):\n             self.conf.set_override('file_basepath',\n                                    tempdir.path,\n                                    'storage')\n+        elif self.conf.storage.driver == 'rocksdb':\n+            tempdir = self.useFixture(fixtures.TempDir())\n+            self.conf.set_override('rocksdb_readonly', False, 'storage')\n+            self.conf.set_override('rocksdb_path',\n+                                   os.path.join(tempdir.path, \"storage\"),\n+                                   'storage')\n+            self.conf.set_override('rocksdb_writer_socket',\n+                                   os.path.join(tempdir.path, \"writer.sock\"),\n+                                   'storage')\n+            self.conf.set_override('rocksdb_flush_every_operation', 1,\n+                                   'storage')\n+\n+            tempdir = self.useFixture(fixtures.TempDir())\n+            # Rockdb doesn't implement incoming\n+            self.conf.set_override('driver', 'file', 'incoming')\n+            self.conf.set_override('file_basepath',\n+                                   os.path.join(tempdir.path, \"incoming\"),\n+                                   'incoming')\n+\n         elif self.conf.storage.driver == 'ceph':\n             pool_name = uuid.uuid4().hex\n             with open(os.devnull, 'w') as f:","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/base.py?ref=8d6e9a8558c10a909d808cd1e20fa1b774fc511f"},{"status":"modified","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/8d6e9a8558c10a909d808cd1e20fa1b774fc511f\/gnocchi\/tests\/functional\/fixtures.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/8d6e9a8558c10a909d808cd1e20fa1b774fc511f\/gnocchi\/tests\/functional\/fixtures.py","changes":8,"filename":"gnocchi\/tests\/functional\/fixtures.py","sha":"6ca42971251bcd929349f6e3c33d00bfbc58d9a7","additions":8,"patch":"@@ -156,6 +156,14 @@ def start_fixture(self):\n                 'swiftclient.client.Connection',\n                 base.FakeSwiftClient)\n             swift_fixture.setUp()\n+        elif conf.storage.driver == 'rocksdb':\n+            conf.set_override('rocksdb_readonly', False, 'storage')\n+            conf.set_override('rocksdb_path', data_tmp_dir, 'storage')\n+            conf.set_override('rocksdb_writer_socket',\n+                              os.path.join(data_tmp_dir, \"writer.sock\"),\n+                              'storage')\n+            conf.set_override('driver', 'file', 'incoming')\n+            conf.set_override('file_basepath', data_tmp_dir, 'incoming')\n \n         # NOTE(jd) All of that is still very SQL centric but we only support\n         # SQL for now so let's say it's good enough.","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/functional\/fixtures.py?ref=8d6e9a8558c10a909d808cd1e20fa1b774fc511f"},{"status":"modified","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/8d6e9a8558c10a909d808cd1e20fa1b774fc511f\/gnocchi\/tests\/test_storage.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/8d6e9a8558c10a909d808cd1e20fa1b774fc511f\/gnocchi\/tests\/test_storage.py","changes":3,"filename":"gnocchi\/tests\/test_storage.py","sha":"8055e0c07c9edac2f149082388a915411d064e0f","additions":3,"patch":"@@ -28,6 +28,7 @@\n from gnocchi.storage import ceph\n from gnocchi.storage import file\n from gnocchi.storage import redis\n+from gnocchi.storage import rocksdb\n from gnocchi.storage import s3\n from gnocchi.storage import swift\n from gnocchi.tests import base as tests_base\n@@ -57,6 +58,8 @@ def test_driver_str(self):\n             s = driver._bucket_name\n         elif isinstance(driver, swift.SwiftStorage):\n             s = driver._container_prefix\n+        elif isinstance(driver, rocksdb.RocksDBStorage):\n+            s = driver._conf.rocksdb_path\n \n         self.assertEqual(str(driver), \"%s: %s\" % (\n                          driver.__class__.__name__, s))","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/test_storage.py?ref=8d6e9a8558c10a909d808cd1e20fa1b774fc511f"},{"status":"added","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/8d6e9a8558c10a909d808cd1e20fa1b774fc511f\/perf\/micro-checks.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/8d6e9a8558c10a909d808cd1e20fa1b774fc511f\/perf\/micro-checks.py","changes":54,"filename":"perf\/micro-checks.py","sha":"1330148bd0b81236f5f0bbaaf3c817baa74f1a60","additions":54,"patch":"@@ -0,0 +1,54 @@\n+# -*- encoding: utf-8 -*-\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#    http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+# implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\n+import daiquiri\n+import numpy\n+\n+from gnocchi import indexer\n+from gnocchi import service\n+from gnocchi import storage\n+from gnocchi import utils\n+\n+LOG = daiquiri.getLogger(\"gnocchi.benchmark\")\n+\n+NOW = numpy.datetime64(utils.utcnow())\n+\n+CONF = service.prepare_service()\n+\n+LOG.debug(\"Setting up storage\")\n+STORAGE = storage.get_driver(CONF)\n+\n+LOG.debug(\"Setting up indexer\")\n+INDEXER = indexer.get_driver(CONF)\n+\n+metrics = INDEXER.list_metrics(details=True)\n+LOG.info(\"Listing %d metrics\", len(metrics))\n+\n+AGGREGATION_METHOD = 'last'\n+\n+# STORAGE = storage.get_driver(CONF)\n+for metric in metrics:\n+    aggregations = []\n+    for d in metric.archive_policy.definition:\n+        aggregations.append(metric.archive_policy.get_aggregation(\n+            AGGREGATION_METHOD, d.granularity))\n+\n+    try:\n+        measures = STORAGE.get_measures(metric, aggregations)\n+        LOG.info(\"metric %s have %s measures for 'last'\", metric.id,\n+                 len(measures[AGGREGATION_METHOD]))\n+    except storage.MetricDoesNotExist:\n+        pass","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/perf\/micro-checks.py?ref=8d6e9a8558c10a909d808cd1e20fa1b774fc511f"},{"status":"added","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/8d6e9a8558c10a909d808cd1e20fa1b774fc511f\/perf\/micro-metricd.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/8d6e9a8558c10a909d808cd1e20fa1b774fc511f\/perf\/micro-metricd.py","changes":140,"filename":"perf\/micro-metricd.py","sha":"55432ddbf36cef28910bc5407d2fc3958b71f80f","additions":140,"patch":"@@ -0,0 +1,140 @@\n+# -*- encoding: utf-8 -*-\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#    http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+# implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\n+import cProfile\n+import multiprocessing.queues\n+import os\n+import random\n+import uuid\n+\n+import daiquiri\n+import numpy\n+\n+import gc\n+\n+from gnocchi import chef\n+from gnocchi.cli import metricd\n+from gnocchi import incoming\n+from gnocchi import indexer\n+from gnocchi import service\n+from gnocchi import storage\n+from gnocchi import utils\n+\n+LOG = daiquiri.getLogger(\"gnocchi.benchmark\")\n+\n+NOW = numpy.datetime64(utils.utcnow())\n+\n+MEASURES_PER_METRIC = 60        # seconds of data\n+_NODES = int(os.getenv(\"MICRO_METRICD_NODES\", \"1\"))\n+_VM_PER_NODES = 10\n+METRICS = _NODES * 100 + _VM_PER_NODES * _NODES * 30\n+# 1000 nodes * 100 metrics + 10 vm per node * 30 metrics per vm\n+\n+ARCHIVE_POLICY_NAME = \"bool\"\n+\n+CONF = service.prepare_service()\n+\n+if CONF.storage.driver == \"rocksdb222\":\n+    LOG.debug(\"Setting up rockdb writer\")\n+\n+    class Worker(multiprocessing.Process):\n+        def __init__(self, conf):\n+            from gnocchi.storage import rocksdb\n+            self._w = rocksdb.WriterService(conf)\n+            super(Worker, self).__init__()\n+\n+        def run(self):\n+            self._w.run()\n+\n+    rocksdb_worker = Worker(CONF)\n+    rocksdb_worker.start()\n+\n+LOG.debug(\"Setting up incoming\")\n+INCOMING = incoming.get_driver(CONF)\n+\n+LOG.debug(\"Setting up coordinator\")\n+COORD = metricd.get_coordinator_and_start(str(uuid.uuid4()),\n+                                          CONF.coordination_url)\n+\n+LOG.debug(\"Setting up storage\")\n+STORAGE = storage.get_driver(CONF)\n+\n+LOG.debug(\"Setting up indexer\")\n+INDEXER = indexer.get_driver(CONF)\n+\n+LOG.debug(\"Setting up chef\")\n+CHEF = chef.Chef(COORD, INCOMING, INDEXER, STORAGE)\n+\n+LOG.info(\"Creating %d metrics\", METRICS)\n+sw = utils.StopWatch().start()\n+metrics = [\n+    INDEXER.create_metric(uuid.uuid4(), \"admin\", ARCHIVE_POLICY_NAME).id\n+    for _ in range(METRICS)\n+]\n+LOG.info(\"Created %d metrics in %.2fs\", METRICS, sw.elapsed())\n+\n+\n+LOG.info(\"Generating %d measures per metric for %d metrics\u2026 \",\n+         MEASURES_PER_METRIC, METRICS)\n+sw.reset()\n+measures = {\n+    m_id: [incoming.Measure(\n+        NOW + numpy.timedelta64(seconds=s),\n+        random.randint(-999999, 999999)) for s in range(MEASURES_PER_METRIC)]\n+    for m_id in metrics\n+}\n+LOG.info(\"\u2026 done in %.2fs\", sw.elapsed())\n+\n+sw.reset()\n+INCOMING.add_measures_batch(measures)\n+total_measures = sum(map(len, measures.values()))\n+LOG.info(\"Pushed %d measures in %.2fs\",\n+         total_measures,\n+         sw.elapsed())\n+\n+del measures\n+gc.collect()\n+\n+sw.reset()\n+\n+# True to enable profiling\n+PROF = None\n+\n+if PROF:\n+    PROF = cProfile.Profile()\n+    PROF.enable()\n+\n+# for s in INCOMING.iter_on_sacks_to_process():\n+for s in INCOMING.iter_sacks():\n+    LOG.debug(\"Getting lock for sack %d\", s)\n+    CHEF.process_new_measures_for_sack(s)\n+    INCOMING.finish_sack_processing(s)\n+    LOG.debug(\"Processed sack %d\", s)\n+\n+if PROF:\n+    PROF.disable()\n+    # PROF.dump_stats(\"%s.cprof\" % __file__)\n+    PROF.print_stats()\n+\n+# if CONF.storage.driver == \"rocksdb\":\n+#     STORAGE.stop()\n+\n+end = sw.elapsed()\n+if CONF.storage.driver == \"rocksdb222\":\n+    rocksdb_worker.terminate()\n+\n+LOG.info(\"Processed %d sacks in %.2fs\", INCOMING.NUM_SACKS, end)\n+LOG.info(\"Speed: %.2f measures\/s\", float(total_measures) \/ end)","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/perf\/micro-metricd.py?ref=8d6e9a8558c10a909d808cd1e20fa1b774fc511f"},{"status":"added","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/8d6e9a8558c10a909d808cd1e20fa1b774fc511f\/perf\/micro-metricd.py.cprof","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/8d6e9a8558c10a909d808cd1e20fa1b774fc511f\/perf\/micro-metricd.py.cprof","changes":0,"filename":"perf\/micro-metricd.py.cprof","sha":"08917f635db153572546a3627c2ccb69c342f8cd","additions":0,"contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/perf\/micro-metricd.py.cprof?ref=8d6e9a8558c10a909d808cd1e20fa1b774fc511f"},{"status":"added","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/8d6e9a8558c10a909d808cd1e20fa1b774fc511f\/perf\/run.sh","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/8d6e9a8558c10a909d808cd1e20fa1b774fc511f\/perf\/run.sh","changes":83,"filename":"perf\/run.sh","sha":"c937f4b789a4c2e056768f61fd9e43e9939ed880","additions":83,"patch":"@@ -0,0 +1,83 @@\n+#!\/bin\/bash\n+\n+cleanup(){\n+    type -t indexer_stop >\/dev\/null && indexer_stop || true\n+    type -t incoming_stop >\/dev\/null && incoming_stop || true\n+}\n+trap cleanup EXIT\n+\n+check_empty_var() {\n+    local x=$(eval echo `echo \\\\$${1}`)\n+    if [ -z \"$x\" ]; then\n+        echo \"Variable \\$${1} is unset\"\n+        exit 15\n+    fi\n+}\n+\n+\n+incoming_driver=${1:-redis}\n+storage_driver=${2:-redis}\n+indexer=\"postgresql\"\n+export MICRO_METRICD_NODES=${3:-1}\n+\n+LOG=\"perf\/${incoming_driver}-${storage_driver}.log\"\n+\n+src=$(dirname $(dirname $(readlink -f $0)))\n+cd $src\n+\n+venv=\".tox\/py27-$indexer-$storage_driver\"\n+if [ ! -d \"$venv\" ]; then\n+    tox -epy27-$indexer-$storage_driver --notest\n+fi\n+source $venv\/bin\/activate\n+\n+data=\"perf\/data-$driver\"\n+rm -rf ${data}\n+mkdir -p $data\n+\n+if [ \"$incoming_driver\" == \"redis\" ]; then\n+    echo \"Start redis...\"\n+    eval $(pifpaf -e INCOMING run redis)\n+    check_empty_var INCOMING_URL\n+fi\n+\n+echo \"Start $indexer...\"\n+eval $(pifpaf -e INDEXER run $indexer)\n+check_empty_var INDEXER_URL\n+\n+echo \"Generate configuration...\"\n+cat > $data\/gnocchi.conf <<EOF\n+[DEFAULT]\n+# debug = True\n+verbose = True\n+[incoming]\n+driver = $incoming_driver\n+redis_url = $INCOMING_URL\n+file_basepath = ${data}\/incoming\n+[storage]\n+driver = $storage_driver\n+file_basepath = ${data}\/storage\n+rocksdb_path = ${data}\/rocksdb\n+rocksdb_readonly = False\n+rocksdb_writer_socket = ${data}\/writer.sock\n+# [metricd]\n+# metric_processing_delay = 1\n+# metric_cleanup_delay = 1\n+[indexer]\n+url = $INDEXER_URL\n+EOF\n+\n+echo \"Run gnocchi-upgrade...\"\n+gnocchi-upgrade --config-file $data\/gnocchi.conf\n+\n+echo \"Run micro-metricd...\"\n+\n+cat >> $LOG <<EOF\n+##############################################\n+$(date --rfc-3339=seconds)\n+##############################################\n+EOF\n+\n+\n+python perf\/micro-metricd.py --config-file $data\/gnocchi.conf 2>&1| tee -a $LOG\n+# python perf\/micro-checks.py --config-file $data\/gnocchi.conf 2>&1| tee -a $LOG","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/perf\/run.sh?ref=8d6e9a8558c10a909d808cd1e20fa1b774fc511f"},{"status":"modified","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/8d6e9a8558c10a909d808cd1e20fa1b774fc511f\/run-func-tests.sh","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/8d6e9a8558c10a909d808cd1e20fa1b774fc511f\/run-func-tests.sh","changes":3,"filename":"run-func-tests.sh","sha":"4ba14e7f815e2d7af71c8bb57184ac604aa43800","additions":3,"patch":"@@ -44,6 +44,9 @@ for storage in ${GNOCCHI_TEST_STORAGE_DRIVERS}; do\n                 fi\n                 eval $(pifpaf -e STORAGE run s3rver)\n                 ;;\n+            rocksdb)\n+                STORAGE_URL=rocksdb:\/\/\n+                ;;\n             file)\n                 STORAGE_URL=file:\/\/\n                 ;;","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/run-func-tests.sh?ref=8d6e9a8558c10a909d808cd1e20fa1b774fc511f"},{"status":"modified","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/8d6e9a8558c10a909d808cd1e20fa1b774fc511f\/setup.cfg","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/8d6e9a8558c10a909d808cd1e20fa1b774fc511f\/setup.cfg","changes":4,"filename":"setup.cfg","sha":"6bf2c84deff9c2d1827d399f190ccfe01f859b1c","additions":4,"patch":"@@ -81,6 +81,9 @@ ceph_alternative =\n prometheus =\n     python-snappy\n     protobuf\n+rocksdb =\n+    python-rocksdb\n+    Cython>=0.20\n doc =\n     sphinx<1.6.0\n     sphinx_rtd_theme\n@@ -118,6 +121,7 @@ gnocchi.storage =\n     swift = gnocchi.storage.swift:SwiftStorage\n     ceph = gnocchi.storage.ceph:CephStorage\n     file = gnocchi.storage.file:FileStorage\n+    rocksdb = gnocchi.storage.rocksdb:RocksDBStorage\n     s3 = gnocchi.storage.s3:S3Storage\n     redis = gnocchi.storage.redis:RedisStorage\n ","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/setup.cfg?ref=8d6e9a8558c10a909d808cd1e20fa1b774fc511f"},{"status":"modified","deletions":1,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/8d6e9a8558c10a909d808cd1e20fa1b774fc511f\/tox.ini","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/8d6e9a8558c10a909d808cd1e20fa1b774fc511f\/tox.ini","changes":5,"filename":"tox.ini","sha":"1e3360274d72902e1a339980ec51c47db495edec","additions":4,"patch":"@@ -10,13 +10,14 @@ passenv = LANG GNOCCHI_TEST_* AWS_*\n setenv =\n     GNOCCHI_TEST_STORAGE_DRIVER=file\n     GNOCCHI_TEST_INDEXER_DRIVER=postgresql\n-    GNOCCHI_TEST_STORAGE_DRIVERS=file swift ceph s3 redis\n+    GNOCCHI_TEST_STORAGE_DRIVERS=file swift ceph s3 redis rocksdb\n     GNOCCHI_TEST_INDEXER_DRIVERS=postgresql mysql\n     file: GNOCCHI_TEST_STORAGE_DRIVERS=file\n     swift: GNOCCHI_TEST_STORAGE_DRIVERS=swift\n     ceph: GNOCCHI_TEST_STORAGE_DRIVERS=ceph\n     redis: GNOCCHI_TEST_STORAGE_DRIVERS=redis\n     s3: GNOCCHI_TEST_STORAGE_DRIVERS=s3\n+    rocksdb: GNOCCHI_TEST_STORAGE_DRIVERS=rocksdb\n     postgresql: GNOCCHI_TEST_INDEXER_DRIVERS=postgresql\n     mysql: GNOCCHI_TEST_INDEXER_DRIVERS=mysql\n \n@@ -26,6 +27,7 @@ setenv =\n     file: GNOCCHI_STORAGE_DEPS=file\n     redis: GNOCCHI_STORAGE_DEPS=redis\n     s3: GNOCCHI_STORAGE_DEPS=s3\n+    rocksdb: GNOCCHI_STORAGE_DEPS=rocksdb\n \n     GNOCCHI_INDEXER_DEPS=mysql,postgresql\n     mysql: GNOCCHI_INDEXER_DEPS=mysql\n@@ -38,6 +40,7 @@ setenv =\n     s3: GNOCCHI_TEST_TARBALLS=\n     redis: GNOCCHI_TEST_TARBALLS=\n     file: GNOCCHI_TEST_TARBALLS=\n+    rocksdb: GNOCCHI_TEST_TARBALLS=\n # NOTE(jd) Install redis as a test dependency since it is used as a\n # coordination driver in functional tests (--coordination-driver is passed to\n # pifpaf)","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/tox.ini?ref=8d6e9a8558c10a909d808cd1e20fa1b774fc511f"}],"committer":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"stats":{"deletions":7,"additions":771,"total":778},"author":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/8d6e9a8558c10a909d808cd1e20fa1b774fc511f","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/8d6e9a8558c10a909d808cd1e20fa1b774fc511f\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/8d6e9a8558c10a909d808cd1e20fa1b774fc511f","sha":"8d6e9a8558c10a909d808cd1e20fa1b774fc511f","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/1c0265eefee23597d70b9475aa4ab41b1087214b","sha":"1c0265eefee23597d70b9475aa4ab41b1087214b","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/1c0265eefee23597d70b9475aa4ab41b1087214b"}],"commit":{"committer":{"date":"2018-03-14T09:07:39Z","name":"Mehdi Abaakouk","email":"sileht@redhat.com"},"author":{"date":"2018-02-08T15:23:21Z","name":"Mehdi Abaakouk","email":"sileht@redhat.com"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/8d6e9a8558c10a909d808cd1e20fa1b774fc511f","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/a40060d249476de1896c132a90db8448b520d70b","sha":"a40060d249476de1896c132a90db8448b520d70b"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"storage: rocksdb driver"}}],"diff_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/816.diff","pastamaker_ci_statuses":{},"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/816","body":"Add the rocksdb write worker\nstorage: rocksdb driver\ntests: process sack by sack rather than metric by metric in functional tests\nmetricd: use process_new_measures_for_sack in test code\nmetricd: publish statistics about processing speed\nstorage: allow to list split keys for different metric at the same time\nstorage: fetch all splits for all metrics at the same time\nstorage: allow to unserialize splits for multiple metrics at once\nstorage: allow to batch splits retrieval for multiple metrics\nstorage: update and delete all splits for all metrics at once\nstorage: update_metric_splits can batch several metrics at once\nstorage: batch split storage on multiple metrics\nstorage: _delete_metric_splits can now batch over multiple metrics\nchef\/storage: process all metrics from the sack in one single batch\nchef: lock sack when using process_new_measures_for_sack\nincoming: introduce process_measures_for_sack","head":{"repo":{"issues_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/issues{\/number}","deployments_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/deployments","has_wiki":true,"forks_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/forks","mirror_url":null,"subscription_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/subscription","notifications_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/notifications{?since,all,participating}","collaborators_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/collaborators{\/collaborator}","updated_at":"2017-05-23T14:32:13Z","private":false,"pulls_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/pulls{\/number}","issue_comment_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/issues\/comments{\/number}","labels_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/labels{\/name}","full_name":"sileht\/gnocchi","owner":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"statuses_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/statuses\/{sha}","id":92182973,"keys_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/keys{\/key_id}","size":4575,"tags_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/tags","archived":false,"downloads_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/downloads","assignees_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/assignees{\/user}","contents_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/contents\/{+path}","description":"Timeseries database","git_refs_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/git\/refs{\/sha}","has_projects":true,"clone_url":"https:\/\/github.com\/sileht\/gnocchi.git","watchers_count":0,"git_tags_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/git\/tags{\/sha}","milestones_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/milestones{\/number}","license":null,"stargazers_count":0,"homepage":null,"fork":true,"commits_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/commits{\/sha}","releases_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/releases{\/id}","issue_events_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/issues\/events{\/number}","has_downloads":true,"has_pages":false,"events_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/events","contributors_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/contributors","html_url":"https:\/\/github.com\/sileht\/gnocchi","compare_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/compare\/{base}...{head}","open_issues":0,"watchers":0,"git_commits_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/git\/commits{\/sha}","git_url":"git:\/\/github.com\/sileht\/gnocchi.git","svn_url":"https:\/\/github.com\/sileht\/gnocchi","merges_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/merges","has_issues":false,"ssh_url":"git@github.com:sileht\/gnocchi.git","blobs_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/git\/blobs{\/sha}","forks":0,"hooks_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/hooks","open_issues_count":0,"comments_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/comments{\/number}","name":"gnocchi","language":"Python","url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi","created_at":"2017-05-23T14:32:11Z","archive_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/{archive_format}{\/ref}","pushed_at":"2018-03-14T09:08:11Z","forks_count":0,"default_branch":"master","teams_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/teams","trees_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/git\/trees{\/sha}","languages_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/languages","branches_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/branches{\/branch}","subscribers_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/subscribers","stargazers_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/stargazers"},"sha":"8d6e9a8558c10a909d808cd1e20fa1b774fc511f","ref":"sileht\/rocksdb-batch","user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"label":"sileht:sileht\/rocksdb-batch"},"pastamaker_weight":-1,"commits":15,"author_association":"OWNER","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/816\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/816","pastamaker_travis_url":"https:\/\/travis-ci.org\/gnocchixyz\/gnocchi\/builds\/353235047?utm_source=github_status&utm_medium=notification","updated_at":"2018-03-14T09:08:12Z","pastamaker_approved":false,"base":{"repo":{"issues_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues{\/number}","deployments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/deployments","has_wiki":false,"forks_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/forks","mirror_url":null,"subscription_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/subscription","notifications_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/notifications{?since,all,participating}","collaborators_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/collaborators{\/collaborator}","updated_at":"2018-03-13T20:46:37Z","private":false,"pulls_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls{\/number}","issue_comment_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments{\/number}","labels_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/labels{\/name}","full_name":"gnocchixyz\/gnocchi","owner":{"following_url":"https:\/\/api.github.com\/users\/gnocchixyz\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/gnocchixyz\/orgs","url":"https:\/\/api.github.com\/users\/gnocchixyz","gists_url":"https:\/\/api.github.com\/users\/gnocchixyz\/gists{\/gist_id}","html_url":"https:\/\/github.com\/gnocchixyz","subscriptions_url":"https:\/\/api.github.com\/users\/gnocchixyz\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/26142905?v=4","repos_url":"https:\/\/api.github.com\/users\/gnocchixyz\/repos","received_events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/gnocchixyz\/starred{\/owner}{\/repo}","site_admin":false,"login":"gnocchixyz","type":"Organization","id":26142905,"followers_url":"https:\/\/api.github.com\/users\/gnocchixyz\/followers"},"statuses_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/statuses\/{sha}","id":91715647,"keys_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/keys{\/key_id}","size":4901,"tags_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/tags","archived":false,"downloads_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/downloads","assignees_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/assignees{\/user}","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/{+path}","description":"Timeseries database","git_refs_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/refs{\/sha}","has_projects":false,"clone_url":"https:\/\/github.com\/gnocchixyz\/gnocchi.git","watchers_count":132,"git_tags_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/tags{\/sha}","milestones_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/milestones{\/number}","license":{"spdx_id":"Apache-2.0","url":"https:\/\/api.github.com\/licenses\/apache-2.0","name":"Apache License 2.0","key":"apache-2.0"},"stargazers_count":132,"homepage":null,"fork":false,"commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits{\/sha}","releases_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/releases{\/id}","issue_events_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/events{\/number}","has_downloads":true,"has_pages":false,"events_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/events","contributors_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contributors","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi","compare_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/compare\/{base}...{head}","open_issues":50,"watchers":132,"git_commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits{\/sha}","git_url":"git:\/\/github.com\/gnocchixyz\/gnocchi.git","svn_url":"https:\/\/github.com\/gnocchixyz\/gnocchi","merges_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/merges","has_issues":true,"ssh_url":"git@github.com:gnocchixyz\/gnocchi.git","blobs_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/blobs{\/sha}","forks":30,"hooks_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/hooks","open_issues_count":50,"comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/comments{\/number}","name":"gnocchi","language":"Python","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi","created_at":"2017-05-18T16:32:52Z","archive_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/{archive_format}{\/ref}","pushed_at":"2018-03-14T09:08:12Z","forks_count":30,"default_branch":"master","teams_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/teams","trees_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees{\/sha}","languages_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/languages","branches_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/branches{\/branch}","subscribers_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/subscribers","stargazers_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/stargazers"},"sha":"827ed4c3c8f8ed726692f7b1e4ce37777f906bb6","ref":"master","user":{"following_url":"https:\/\/api.github.com\/users\/gnocchixyz\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/gnocchixyz\/orgs","url":"https:\/\/api.github.com\/users\/gnocchixyz","gists_url":"https:\/\/api.github.com\/users\/gnocchixyz\/gists{\/gist_id}","html_url":"https:\/\/github.com\/gnocchixyz","subscriptions_url":"https:\/\/api.github.com\/users\/gnocchixyz\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/26142905?v=4","repos_url":"https:\/\/api.github.com\/users\/gnocchixyz\/repos","received_events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/gnocchixyz\/starred{\/owner}{\/repo}","site_admin":false,"login":"gnocchixyz","type":"Organization","id":26142905,"followers_url":"https:\/\/api.github.com\/users\/gnocchixyz\/followers"},"label":"gnocchixyz:master"},"rebaseable":true,"milestone":null,"pastamaker_travis_detail":{"commit_id":105186306,"repository_id":13523406,"jobs":[{"build_id":353235047,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/353235049\/log","number":"2494.1","allow_failure":false,"queue":"builds.gce","state":"failed","commit_id":105186306,"finished_at":"2018-03-14T09:10:36Z","started_at":"2018-03-14T09:08:46Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=pep8"},"id":353235049},{"build_id":353235047,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/353235053\/log","number":"2494.2","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":105186306,"finished_at":"2018-03-14T09:11:53Z","started_at":"2018-03-14T09:08:46Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=docs"},"id":353235053},{"build_id":353235047,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/353235054\/log","number":"2494.3","allow_failure":false,"queue":"builds.gce","state":"failed","commit_id":105186306,"finished_at":"2018-03-14T09:13:15Z","started_at":"2018-03-14T09:08:46Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=docs-gnocchi.xyz"},"id":353235054},{"build_id":353235047,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/353235055\/log","number":"2494.4","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":105186306,"finished_at":"2018-03-14T09:13:18Z","started_at":"2018-03-14T09:08:51Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-mysql-ceph-upgrade-from-4.0"},"id":353235055},{"build_id":353235047,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/353235056\/log","number":"2494.5","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":105186306,"finished_at":"2018-03-14T09:13:44Z","started_at":"2018-03-14T09:09:06Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-postgresql-file-upgrade-from-4.0"},"id":353235056},{"build_id":353235047,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/353235057\/log","number":"2494.6","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":105186306,"finished_at":"2018-03-14T09:15:46Z","started_at":"2018-03-14T09:11:22Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-mysql-ceph-upgrade-from-4.1"},"id":353235057},{"build_id":353235047,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/353235058\/log","number":"2494.7","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":105186306,"finished_at":"2018-03-14T09:17:13Z","started_at":"2018-03-14T09:12:28Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-postgresql-file-upgrade-from-4.1"},"id":353235058},{"build_id":353235047,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/353235059\/log","number":"2494.8","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":105186306,"finished_at":"2018-03-14T09:19:28Z","started_at":"2018-03-14T09:13:47Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-mysql-ceph-upgrade-from-4.2"},"id":353235059},{"build_id":353235047,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/353235060\/log","number":"2494.9","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":105186306,"finished_at":"2018-03-14T09:19:01Z","started_at":"2018-03-14T09:13:48Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-postgresql-file-upgrade-from-4.2"},"id":353235060},{"build_id":353235047,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/353235061\/log","number":"2494.10","allow_failure":false,"queue":"builds.gce","state":"failed","commit_id":105186306,"finished_at":"2018-03-14T09:21:47Z","started_at":"2018-03-14T09:14:21Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-mysql"},"id":353235061},{"build_id":353235047,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/353235062\/log","number":"2494.11","allow_failure":false,"queue":"builds.gce","state":"failed","commit_id":105186306,"finished_at":"2018-03-14T09:21:33Z","started_at":"2018-03-14T09:16:28Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-mysql"},"id":353235062},{"build_id":353235047,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/353235063\/log","number":"2494.12","allow_failure":false,"queue":"builds.gce","state":"failed","commit_id":105186306,"finished_at":"2018-03-14T09:24:51Z","started_at":"2018-03-14T09:17:42Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-postgresql"},"id":353235063},{"build_id":353235047,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/353235064\/log","number":"2494.13","allow_failure":false,"queue":"builds.gce","state":"failed","commit_id":105186306,"finished_at":"2018-03-14T09:25:14Z","started_at":"2018-03-14T09:19:36Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-postgresql"},"id":353235064}],"event_type":"pull_request","finished_at":"2018-03-14T09:25:14Z","number":"2494","job_ids":[353235049,353235053,353235054,353235055,353235056,353235057,353235058,353235059,353235060,353235061,353235062,353235063,353235064],"state":"failed","pull_request_title":"Pull request for sileht\/rocksdb-batch","pull_request":true,"duration":3832,"started_at":"2018-03-14T09:08:46Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then set -x; case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; case $TARGET in docs-gnocchi.xyz) git branch -a | sed -n \"\/\\\/HEAD \/d; \/\\\/master$\/d; s,remotes\/origin\/,,p;\" | xargs -i git branch {} origin\/{} ; git branch -D master; git checkout -b master; git remote set-url origin file:\/\/\/home\/tester\/src; git ls-remote --heads --tags | grep heads; ;; esac ; set +x; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","os":"linux","deploy":{"distributions":"sdist bdist_wheel","password":{"secure":"c+Ccx3SHCWepiy0PUxDJ7XO9r3aNYnHjkzxF5c\/kjV8QaCJayAJEgXJnBKhvjroqwgn7JPUgpD6QdSWdB4FqjbZYQ3I3oHOO1YL0vYYa8wHG5HuMsMp4J8qvzgs3QNQDECPI1mXsPevn3VMfGszUN+6BQrHB3FbZsTtOmE+Kmgok5NCT+obsfEhVea\/UOD0XFUkVW9VJhPjQ2ytvYvFIc46\/73GQf2Er\/5DCa\/4GGDEBSD++bDJgp3kQj438xslCAFeZWDwGsa+cTc43PI0Y0+E144ySVY7QyVbZ1B66a1BGWVrXJuM+gW\/eIBCMN1FJXmD7CDdPa22azKI8dfMF7qaH3Oiv3cVovPWpubOvhTUHUFwG8+W7Fx+zUKktCWiLer\/fZvEd3W8tcgby2kNOdcUfKfDB2ImZJ+P694\/OJ4jJ8T5TQerruNoP2OstzcBMon77Ry0XawXR15SZd4JhbqhSi+h7XV6EYmct1UN4zoysA7fx\/cWHcBxdnm2G6R0gzmOiiGUd74ptU8lZ3IlEP6EZckK\/OZOdy1I8EQeUe7aiTooXZDAn07iPkDZliYRr2e36ij\/xjtWCe1AjCksn\/xdKfHOKJv5UVob495DU2GuNObe01ewXzexcnldjfp9Sb8SVEFuhHx6IvH5OC+vAq+BVYu2jwvMcVfXi3VSOkB4="},"true":{"all_branches":true,"tags":true},"user":"jd","provider":"pypi"},"env":["TARGET=pep8","TARGET=docs","TARGET=docs-gnocchi.xyz","TARGET=py27-mysql-ceph-upgrade-from-4.0","TARGET=py35-postgresql-file-upgrade-from-4.0","TARGET=py27-mysql-ceph-upgrade-from-4.1","TARGET=py35-postgresql-file-upgrade-from-4.1","TARGET=py27-mysql-ceph-upgrade-from-4.2","TARGET=py35-postgresql-file-upgrade-from-4.2","TARGET=py27-mysql","TARGET=py35-mysql","TARGET=py27-postgresql","TARGET=py35-postgresql"]},"id":353235047,"pull_request_number":816,"resume_state":"failure"},"requested_teams":[],"locked":false,"merged_by":null,"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/816","mergeable_state":"blocked","created_at":"2018-03-13T14:27:12Z","merged":false,"review_comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/816\/comments","review_comments":0,"assignees":[],"review_comment_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/comments{\/number}","pastamaker_comments":[],"pastamaker_approvals":[[],[],2,[0,1]],"patch_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/816.patch","changed_files":31,"user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"}},{"deletions":167,"pastamaker_combined_status":"failure","merge_commit_sha":"82bcade083ae8ab6759ee0ca58c4b08ad7a0a207","additions":198,"labels":[],"number":409,"pastamaker_travis_state":"error","assignee":null,"commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/409\/commits","mergeable":false,"closed_at":null,"requested_reviewers":[],"statuses_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/statuses\/d9a659d541b1a2b3674e538b2cd4cc2f0ad836ea","id":144692379,"maintainer_can_modify":true,"title":"tests: move to pytest","comments":39,"merged_at":null,"state":"open","_links":{"review_comment":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/comments{\/number}"},"commits":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/409\/commits"},"self":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/409"},"comments":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409\/comments"},"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409"},"review_comments":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/409\/comments"},"issue":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"},"statuses":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/statuses\/d9a659d541b1a2b3674e538b2cd4cc2f0ad836ea"}},"pastamaker_reviews":[{"body":"","commit_id":"21966d547e7bad43c0b2d84503eb9fd2ea9295f2","submitted_at":"2017-10-04T15:09:55Z","created_at":"2017-10-04T15:09:55Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#pullrequestreview-67099182","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/409","state":"COMMENTED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#pullrequestreview-67099182"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/409"}},"user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"id":67099182},{"body":"","commit_id":"21966d547e7bad43c0b2d84503eb9fd2ea9295f2","submitted_at":"2017-10-04T15:14:23Z","created_at":"2017-10-04T15:14:23Z","author_association":"CONTRIBUTOR","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#pullrequestreview-67100978","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/409","state":"COMMENTED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#pullrequestreview-67100978"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/409"}},"user":{"following_url":"https:\/\/api.github.com\/users\/cdent\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/cdent\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/cdent\/orgs","url":"https:\/\/api.github.com\/users\/cdent","events_url":"https:\/\/api.github.com\/users\/cdent\/events{\/privacy}","html_url":"https:\/\/github.com\/cdent","subscriptions_url":"https:\/\/api.github.com\/users\/cdent\/subscriptions","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/34498?v=4","repos_url":"https:\/\/api.github.com\/users\/cdent\/repos","received_events_url":"https:\/\/api.github.com\/users\/cdent\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/cdent\/starred{\/owner}{\/repo}","site_admin":false,"login":"cdent","type":"User","id":34498,"followers_url":"https:\/\/api.github.com\/users\/cdent\/followers"},"id":67100978},{"body":"","commit_id":"87c030cfb444743e97af7db151ab9d2aaed9f275","submitted_at":"2017-10-20T14:44:40Z","created_at":"2017-10-20T14:44:40Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#pullrequestreview-70865098","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/409","state":"DISMISSED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#pullrequestreview-70865098"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/409"}},"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"id":70865098}],"pastamaker_commits":[{"files":[{"status":"modified","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/87a950c9134544384100ece34c67a06e63cb2201\/gnocchi\/tests\/__init__.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/87a950c9134544384100ece34c67a06e63cb2201\/gnocchi\/tests\/__init__.py","changes":27,"filename":"gnocchi\/tests\/__init__.py","sha":"3cb9c9db8028efbae0ae29af0c4532d3d6ee9182","additions":27,"patch":"@@ -0,0 +1,27 @@\n+#\n+# Copyright 2015-2017 Red Hat. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n+# not use this file except in compliance with the License. You may obtain\n+# a copy of the License at\n+#\n+#      http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+# License for the specific language governing permissions and limitations\n+# under the License.\n+\n+import warnings\n+\n+import sqlalchemy.exc\n+\n+# NOTE(sileht) We create and recreate ton of sqlalchemy db\n+# Because we play with the declartive object list at runtime\n+# for resource type. In tests sqlalchemy complains we override\n+# the list again and again. So we filter them in tests\n+warnings.filterwarnings(\"ignore\",\n+                        \"This declarative base already contains a \"\n+                        \"class with the same class name\",\n+                        sqlalchemy.exc.SAWarning)","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/__init__.py?ref=87a950c9134544384100ece34c67a06e63cb2201"}],"committer":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"stats":{"deletions":0,"additions":27,"total":27},"author":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/87a950c9134544384100ece34c67a06e63cb2201","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/87a950c9134544384100ece34c67a06e63cb2201\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/87a950c9134544384100ece34c67a06e63cb2201","sha":"87a950c9134544384100ece34c67a06e63cb2201","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/7892684dde395dd3ccec67a9cb172659975d74a8","sha":"7892684dde395dd3ccec67a9cb172659975d74a8","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/7892684dde395dd3ccec67a9cb172659975d74a8"}],"commit":{"committer":{"date":"2017-12-05T15:17:38Z","name":"Mehdi Abaakouk","email":"sileht@redhat.com"},"author":{"date":"2017-10-12T07:04:02Z","name":"Mehdi Abaakouk","email":"sileht@redhat.com"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/87a950c9134544384100ece34c67a06e63cb2201","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/13845ed6cf9eca8c04da6219c6c4d434a7d05e24","sha":"13845ed6cf9eca8c04da6219c6c4d434a7d05e24"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"tests: hide useless SAWarning\n\npytest reports warning at the end of tests.\nAnd one SAWarning is expected to happen a lot.\n\nThis change hides it."}},{"files":[{"status":"modified","deletions":1,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/b9f7ff280d5deed74d1024934dc1fe72da6a1dc6\/.gitignore","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/b9f7ff280d5deed74d1024934dc1fe72da6a1dc6\/.gitignore","changes":2,"filename":".gitignore","sha":"135f346313bf5ab01f7427b25a66a5f3b3bfe8b3","additions":1,"patch":"@@ -1,4 +1,4 @@\n-.testrepository\n+.cache\n *.pyc\n .tox\n *.egg-info","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/.gitignore?ref=b9f7ff280d5deed74d1024934dc1fe72da6a1dc6"},{"status":"removed","deletions":5,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/87a950c9134544384100ece34c67a06e63cb2201\/.testr.conf","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/87a950c9134544384100ece34c67a06e63cb2201\/.testr.conf","changes":5,"filename":".testr.conf","sha":"6e2e4a5e0d1d14880c3f0cf509d24efaca74fb99","additions":0,"patch":"@@ -1,5 +0,0 @@\n-[DEFAULT]\n-test_command=${PYTHON:-python} -m subunit.run discover -t .  ${GNOCCHI_TEST_PATH:-gnocchi\/tests} $LISTOPT $IDOPTION\n-test_id_option=--load-list $IDFILE\n-test_list_option=--list\n-group_regex=(gabbi\\.suitemaker\\.test_gabbi((_live_|_)([^_]+)))_","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/.testr.conf?ref=87a950c9134544384100ece34c67a06e63cb2201"},{"status":"modified","deletions":2,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/b9f7ff280d5deed74d1024934dc1fe72da6a1dc6\/gnocchi\/gendoc.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/b9f7ff280d5deed74d1024934dc1fe72da6a1dc6\/gnocchi\/gendoc.py","changes":4,"filename":"gnocchi\/gendoc.py","sha":"938501eba11d2db67b0e911c649c61297b84f0f0","additions":2,"patch":"@@ -187,8 +187,8 @@ def setup(app):\n     with open(\"doc\/source\/rest.yaml\") as f:\n         scenarios = ScenarioList(yaml.load(f))\n \n-    test = test_rest.RestTest()\n-    test.auth_mode = \"basic\"\n+    test_rest.BasicRestTest.runTest = staticmethod(lambda: True)\n+    test = test_rest.BasicRestTest()\n     test.setUpClass()\n     test.setUp()\n     webapp = test.app","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/gendoc.py?ref=b9f7ff280d5deed74d1024934dc1fe72da6a1dc6"},{"status":"modified","deletions":6,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/b9f7ff280d5deed74d1024934dc1fe72da6a1dc6\/gnocchi\/tests\/functional\/test_gabbi.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/b9f7ff280d5deed74d1024934dc1fe72da6a1dc6\/gnocchi\/tests\/functional\/test_gabbi.py","changes":15,"filename":"gnocchi\/tests\/functional\/test_gabbi.py","sha":"635352337c0bb18e85652499b522ca052fdeb48d","additions":9,"patch":"@@ -18,6 +18,10 @@\n import os\n \n from gabbi import driver\n+# We need test_pytest so that pytest test collection works properly.\n+# Without this, the pytest_generate_tests method below will not be\n+# called.\n+from gabbi.driver import test_pytest  # noqa\n import wsgi_intercept\n \n from gnocchi.tests.functional import fixtures\n@@ -28,10 +32,9 @@\n PREFIX = '\/gnocchi'\n \n \n-def load_tests(loader, tests, pattern):\n-    \"\"\"Provide a TestSuite to the discovery process.\"\"\"\n+def pytest_generate_tests(metafunc):\n     test_dir = os.path.join(os.path.dirname(__file__), TESTS_DIR)\n-    return driver.build_tests(test_dir, loader, host=None, prefix=PREFIX,\n-                              intercept=fixtures.setup_app,\n-                              fixture_module=fixtures,\n-                              safe_yaml=False)\n+    driver.py_test_generator(test_dir, prefix=PREFIX,\n+                             intercept=fixtures.setup_app,\n+                             fixture_module=fixtures, metafunc=metafunc,\n+                             safe_yaml=False)","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/functional\/test_gabbi.py?ref=b9f7ff280d5deed74d1024934dc1fe72da6a1dc6"},{"status":"modified","deletions":20,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/b9f7ff280d5deed74d1024934dc1fe72da6a1dc6\/gnocchi\/tests\/functional_live\/test_gabbi_live.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/b9f7ff280d5deed74d1024934dc1fe72da6a1dc6\/gnocchi\/tests\/functional_live\/test_gabbi_live.py","changes":42,"filename":"gnocchi\/tests\/functional_live\/test_gabbi_live.py","sha":"74d0cc1887b7b86fd7e8018221bef24ebd5b244b","additions":22,"patch":"@@ -18,31 +18,33 @@\n import os\n \n from gabbi import driver\n+# We need test_pytest so that pytest test collection works properly.\n+# Without this, the pytest_generate_tests method below will not be\n+# called.\n+from gabbi.driver import test_pytest  # noqa\n import six.moves.urllib.parse as urlparse\n \n \n TESTS_DIR = 'gabbits'\n \n \n-def load_tests(loader, tests, pattern):\n+def pytest_generate_tests(metafunc):\n     \"\"\"Provide a TestSuite to the discovery process.\"\"\"\n     gnocchi_url = os.getenv('GNOCCHI_ENDPOINT')\n-    if gnocchi_url:\n-        parsed_url = urlparse.urlsplit(gnocchi_url)\n-        prefix = parsed_url.path.rstrip('\/')  # turn it into a prefix\n-\n-        # NOTE(chdent): gabbi requires a port be passed or it will\n-        # default to 8001, so we must dance a little dance to get\n-        # the right ports. Probably gabbi needs to change.\n-        # https:\/\/github.com\/cdent\/gabbi\/issues\/50\n-        port = 443 if parsed_url.scheme == 'https' else 80\n-        if parsed_url.port:\n-            port = parsed_url.port\n-\n-        test_dir = os.path.join(os.path.dirname(__file__), TESTS_DIR)\n-        return driver.build_tests(test_dir, loader,\n-                                  host=parsed_url.hostname,\n-                                  port=port,\n-                                  prefix=prefix)\n-    elif os.getenv(\"GABBI_LIVE\"):\n-        raise RuntimeError('\"GNOCCHI_ENDPOINT\" is not set')\n+    parsed_url = urlparse.urlsplit(gnocchi_url)\n+    prefix = parsed_url.path.rstrip('\/')  # turn it into a prefix\n+\n+    # NOTE(chdent): gabbi requires a port be passed or it will\n+    # default to 8001, so we must dance a little dance to get\n+    # the right ports. Probably gabbi needs to change.\n+    # https:\/\/github.com\/cdent\/gabbi\/issues\/50\n+    port = 443 if parsed_url.scheme == 'https' else 80\n+    if parsed_url.port:\n+        port = parsed_url.port\n+\n+    test_dir = os.path.join(os.path.dirname(__file__), TESTS_DIR)\n+    driver.py_test_generator(test_dir,\n+                             host=parsed_url.hostname,\n+                             port=port,\n+                             prefix=prefix,\n+                             metafunc=metafunc)","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/functional_live\/test_gabbi_live.py?ref=b9f7ff280d5deed74d1024934dc1fe72da6a1dc6"},{"status":"modified","deletions":104,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/b9f7ff280d5deed74d1024934dc1fe72da6a1dc6\/gnocchi\/tests\/test_rest.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/b9f7ff280d5deed74d1024934dc1fe72da6a1dc6\/gnocchi\/tests\/test_rest.py","changes":184,"filename":"gnocchi\/tests\/test_rest.py","sha":"b4bbc63ba4199cb9fa8e309a454e9007869a93f7","additions":80,"patch":"@@ -28,7 +28,6 @@\n import mock\n import pbr.version\n import six\n-import testscenarios\n from testtools import testcase\n import webtest\n \n@@ -40,10 +39,7 @@\n from gnocchi import utils\n \n \n-load_tests = testscenarios.load_tests_apply_scenarios\n-\n-\n-class TestingApp(webtest.TestApp):\n+class FakeApp(webtest.TestApp):\n     VALID_TOKEN_ADMIN = str(uuid.uuid4())\n     USER_ID_ADMIN = str(uuid.uuid4())\n     PROJECT_ID_ADMIN = str(uuid.uuid4())\n@@ -63,7 +59,7 @@ def __init__(self, *args, **kwargs):\n         self.storage = kwargs.pop('storage')\n         self.indexer = kwargs.pop('indexer')\n         self.incoming = kwargs.pop('incoming')\n-        super(TestingApp, self).__init__(*args, **kwargs)\n+        super(FakeApp, self).__init__(*args, **kwargs)\n         # Setup Keystone auth_token fake cache\n         self.token = self.VALID_TOKEN\n         # Setup default user for basic auth\n@@ -127,68 +123,97 @@ def do_request(self, req, *args, **kwargs):\n             )\n         elif self.auth_mode == \"remoteuser\":\n             req.remote_user = self.user\n-        response = super(TestingApp, self).do_request(req, *args, **kwargs)\n+        response = super(FakeApp, self).do_request(req, *args, **kwargs)\n         metrics = tests_utils.list_all_incoming_metrics(self.incoming)\n         self.storage.process_new_measures(\n             self.indexer, self.incoming, metrics, sync=True)\n         return response\n \n \n-class RestTest(tests_base.TestCase, testscenarios.TestWithScenarios):\n-\n-    scenarios = [\n-        ('basic', dict(auth_mode=\"basic\")),\n-        ('keystone', dict(auth_mode=\"keystone\")),\n-        ('remoteuser', dict(auth_mode=\"remoteuser\")),\n-    ]\n+class BasicRestTest(tests_base.TestCase):\n+    auth_mode = \"basic\"\n \n     def setUp(self):\n-        super(RestTest, self).setUp()\n+        super(BasicRestTest, self).setUp()\n \n         if self.auth_mode == \"keystone\":\n             self.auth_token_fixture = self.useFixture(\n                 ksm_fixture.AuthTokenFixture())\n             self.auth_token_fixture.add_token_data(\n                 is_v2=True,\n-                token_id=TestingApp.VALID_TOKEN_ADMIN,\n-                user_id=TestingApp.USER_ID_ADMIN,\n+                token_id=FakeApp.VALID_TOKEN_ADMIN,\n+                user_id=FakeApp.USER_ID_ADMIN,\n                 user_name='adminusername',\n-                project_id=TestingApp.PROJECT_ID_ADMIN,\n+                project_id=FakeApp.PROJECT_ID_ADMIN,\n                 role_list=['admin'])\n             self.auth_token_fixture.add_token_data(\n                 is_v2=True,\n-                token_id=TestingApp.VALID_TOKEN,\n-                user_id=TestingApp.USER_ID,\n+                token_id=FakeApp.VALID_TOKEN,\n+                user_id=FakeApp.USER_ID,\n                 user_name='myusername',\n-                project_id=TestingApp.PROJECT_ID,\n+                project_id=FakeApp.PROJECT_ID,\n                 role_list=[\"member\"])\n             self.auth_token_fixture.add_token_data(\n                 is_v2=True,\n-                token_id=TestingApp.VALID_TOKEN_2,\n-                user_id=TestingApp.USER_ID_2,\n+                token_id=FakeApp.VALID_TOKEN_2,\n+                user_id=FakeApp.USER_ID_2,\n                 user_name='myusername2',\n-                project_id=TestingApp.PROJECT_ID_2,\n+                project_id=FakeApp.PROJECT_ID_2,\n                 role_list=[\"member\"])\n \n         self.conf.set_override(\"auth_mode\", self.auth_mode, group=\"api\")\n \n-        self.app = TestingApp(app.load_app(conf=self.conf,\n-                                           indexer=self.index,\n-                                           storage=self.storage,\n-                                           incoming=self.incoming,\n-                                           not_implemented_middleware=False),\n-                              storage=self.storage,\n-                              indexer=self.index,\n-                              incoming=self.incoming,\n-                              auth_mode=self.auth_mode)\n-\n-    # NOTE(jd) Used at least by docs\n-    @staticmethod\n-    def runTest():\n-        pass\n+        self.app = FakeApp(app.load_app(conf=self.conf,\n+                                        indexer=self.index,\n+                                        storage=self.storage,\n+                                        incoming=self.incoming,\n+                                        not_implemented_middleware=False),\n+                           storage=self.storage,\n+                           indexer=self.index,\n+                           incoming=self.incoming,\n+                           auth_mode=self.auth_mode)\n \n+        self.attributes = {\n+            \"id\": str(uuid.uuid4()),\n+            \"started_at\": \"2014-01-03T02:02:02+00:00\",\n+            \"user_id\": str(uuid.uuid4()),\n+            \"project_id\": str(uuid.uuid4()),\n+            \"name\": \"my-name\",\n+        }\n+        self.patchable_attributes = {\n+            \"ended_at\": \"2014-01-03T02:02:02+00:00\",\n+            \"name\": \"new-name\",\n+        }\n+        self.resource = self.attributes.copy()\n+        # Set original_resource_id\n+        self.resource['original_resource_id'] = self.resource['id']\n+        self.resource['created_by_user_id'] = FakeApp.USER_ID\n+        if self.auth_mode == \"keystone\":\n+            self.resource['created_by_project_id'] = FakeApp.PROJECT_ID\n+            self.resource['creator'] = (\n+                FakeApp.USER_ID + \":\" + FakeApp.PROJECT_ID\n+            )\n+        elif self.auth_mode in [\"basic\", \"remoteuser\"]:\n+            self.resource['created_by_project_id'] = \"\"\n+            self.resource['creator'] = FakeApp.USER_ID\n+        self.resource['ended_at'] = None\n+        self.resource['metrics'] = {}\n+        if 'user_id' not in self.resource:\n+            self.resource['user_id'] = None\n+        if 'project_id' not in self.resource:\n+            self.resource['project_id'] = None\n+\n+        mgr = self.index.get_resource_type_schema()\n+        self.resource_type = str(uuid.uuid4())\n+        self.index.create_resource_type(\n+            mgr.resource_type_from_dict(self.resource_type, {\n+                \"name\": {\"type\": \"string\",\n+                         \"min_length\": 1,\n+                         \"max_length\": 40,\n+                         \"required\": True}\n+            }, \"creating\"))\n+        self.resource['type'] = self.resource_type\n \n-class RootTest(RestTest):\n     def test_deserialize_force_json(self):\n         with self.app.use_admin_user():\n             self.app.post(\n@@ -219,13 +244,6 @@ def test_status(self):\n         self.assertIsInstance(status['storage']['summary']['metrics'], int)\n         self.assertIsInstance(status['storage']['summary']['measures'], int)\n \n-\n-class ArchivePolicyTest(RestTest):\n-    \"\"\"Test the ArchivePolicies REST API.\n-\n-    See also gnocchi\/tests\/gabbi\/gabbits\/archive.yaml\n-    \"\"\"\n-\n     # TODO(chdent): The tests left here involve inspecting the\n     # aggregation methods which gabbi can't currently handle because\n     # the ordering of the results is not predictable.\n@@ -295,17 +313,14 @@ def test_list_archive_policy(self):\n             ]\n             self.assertIn(apj, aps)\n \n-\n-class MetricTest(RestTest):\n-\n     def test_get_metric_with_another_user_linked_resource(self):\n         result = self.app.post_json(\n             \"\/v1\/resource\/generic\",\n             params={\n                 \"id\": str(uuid.uuid4()),\n                 \"started_at\": \"2014-01-01 02:02:02\",\n-                \"user_id\": TestingApp.USER_ID_2,\n-                \"project_id\": TestingApp.PROJECT_ID_2,\n+                \"user_id\": FakeApp.USER_ID_2,\n+                \"project_id\": FakeApp.PROJECT_ID_2,\n                 \"metrics\": {\"foobar\": {\"archive_policy_name\": \"low\"}},\n             })\n         resource = json.loads(result.text)\n@@ -440,7 +455,7 @@ def test_get_measures_with_another_user_allowed(self):\n         self.app.post_json(\"\/v1\/resource\/generic\",\n                            params={\n                                \"id\": rid,\n-                               \"project_id\": TestingApp.PROJECT_ID_2,\n+                               \"project_id\": FakeApp.PROJECT_ID_2,\n                                \"metrics\": {\n                                    \"disk\": {\"archive_policy_name\": \"low\"},\n                                }\n@@ -624,51 +639,6 @@ def test_search_value(self):\n              metric2: []},\n             result)\n \n-\n-class ResourceTest(RestTest):\n-    def setUp(self):\n-        super(ResourceTest, self).setUp()\n-        self.attributes = {\n-            \"id\": str(uuid.uuid4()),\n-            \"started_at\": \"2014-01-03T02:02:02+00:00\",\n-            \"user_id\": str(uuid.uuid4()),\n-            \"project_id\": str(uuid.uuid4()),\n-            \"name\": \"my-name\",\n-        }\n-        self.patchable_attributes = {\n-            \"ended_at\": \"2014-01-03T02:02:02+00:00\",\n-            \"name\": \"new-name\",\n-        }\n-        self.resource = self.attributes.copy()\n-        # Set original_resource_id\n-        self.resource['original_resource_id'] = self.resource['id']\n-        self.resource['created_by_user_id'] = TestingApp.USER_ID\n-        if self.auth_mode == \"keystone\":\n-            self.resource['created_by_project_id'] = TestingApp.PROJECT_ID\n-            self.resource['creator'] = (\n-                TestingApp.USER_ID + \":\" + TestingApp.PROJECT_ID\n-            )\n-        elif self.auth_mode in [\"basic\", \"remoteuser\"]:\n-            self.resource['created_by_project_id'] = \"\"\n-            self.resource['creator'] = TestingApp.USER_ID\n-        self.resource['ended_at'] = None\n-        self.resource['metrics'] = {}\n-        if 'user_id' not in self.resource:\n-            self.resource['user_id'] = None\n-        if 'project_id' not in self.resource:\n-            self.resource['project_id'] = None\n-\n-        mgr = self.index.get_resource_type_schema()\n-        self.resource_type = str(uuid.uuid4())\n-        self.index.create_resource_type(\n-            mgr.resource_type_from_dict(self.resource_type, {\n-                \"name\": {\"type\": \"string\",\n-                         \"min_length\": 1,\n-                         \"max_length\": 40,\n-                         \"required\": True}\n-            }, \"creating\"))\n-        self.resource['type'] = self.resource_type\n-\n     @mock.patch.object(utils, 'utcnow')\n     def test_post_resource(self, utcnow):\n         utcnow.return_value = utils.datetime_utc(2014, 1, 1, 10, 23)\n@@ -1357,7 +1327,7 @@ def test_search_resources_with_another_project_id(self):\n                 \"id\": str(uuid.uuid4()),\n                 \"started_at\": \"2014-01-01 02:02:02\",\n                 \"user_id\": u1,\n-                \"project_id\": TestingApp.PROJECT_ID_2,\n+                \"project_id\": FakeApp.PROJECT_ID_2,\n             })\n         g = json.loads(result.text)\n \n@@ -1520,8 +1490,8 @@ def test_list_resources_with_another_project_id(self):\n             params={\n                 \"id\": str(uuid.uuid4()),\n                 \"started_at\": \"2014-01-01 02:02:02\",\n-                \"user_id\": TestingApp.USER_ID_2,\n-                \"project_id\": TestingApp.PROJECT_ID_2,\n+                \"user_id\": FakeApp.USER_ID_2,\n+                \"project_id\": FakeApp.PROJECT_ID_2,\n             })\n         g = json.loads(result.text)\n \n@@ -1800,8 +1770,6 @@ def test_search_resources_with_like(self):\n         resources = json.loads(result.text)\n         self.assertEqual([], resources)\n \n-\n-class GenericResourceTest(RestTest):\n     def test_list_resources_tied_to_user(self):\n         resource_id = str(uuid.uuid4())\n         self.app.post_json(\n@@ -1827,8 +1795,8 @@ def test_get_resources_metric_tied_to_user(self):\n             params={\n                 \"id\": resource_id,\n                 \"started_at\": \"2014-01-01 02:02:02\",\n-                \"user_id\": TestingApp.USER_ID_2,\n-                \"project_id\": TestingApp.PROJECT_ID_2,\n+                \"user_id\": FakeApp.USER_ID_2,\n+                \"project_id\": FakeApp.PROJECT_ID_2,\n                 \"metrics\": {\"foobar\": {\"archive_policy_name\": \"low\"}},\n             })\n \n@@ -1920,3 +1888,11 @@ def test_search_query_builder(self):\n                           ]},\n                           {\"=\": {\"foo\": \"quote\"}},\n                       ]})\n+\n+\n+class KeystoneRestTest(BasicRestTest):\n+    auth_mode = \"keystone\"\n+\n+\n+class RemoteUserRestTest(BasicRestTest):\n+    auth_mode = \"remoteuser\"","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/test_rest.py?ref=b9f7ff280d5deed74d1024934dc1fe72da6a1dc6"},{"status":"modified","deletions":2,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/b9f7ff280d5deed74d1024934dc1fe72da6a1dc6\/run-func-tests.sh","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/b9f7ff280d5deed74d1024934dc1fe72da6a1dc6\/run-func-tests.sh","changes":4,"filename":"run-func-tests.sh","sha":"2d7c79f1e55f8cf33114064fa6b08406bd5be55a","additions":2,"patch":"@@ -64,8 +64,8 @@ for storage in ${GNOCCHI_TEST_STORAGE_DRIVERS}; do\n \n         export GNOCCHI_SERVICE_TOKEN=\"\" # Just make gabbi happy\n         export GNOCCHI_AUTHORIZATION=\"basic YWRtaW46\" # admin in base64\n-        export GNOCCHI_TEST_PATH=gnocchi\/tests\/functional_live\n-        pifpaf -e GNOCCHI run gnocchi --indexer-url $INDEXER_URL --storage-url $STORAGE_URL --coordination-driver redis -- .\/tools\/pretty_tox.sh $*\n+        pifpaf -e GNOCCHI run gnocchi --indexer-url $INDEXER_URL --storage-url $STORAGE_URL --coordination-driver redis -- pytest gnocchi\/tests\/functional_live $*\n+\n \n         cleanup\n     done","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/run-func-tests.sh?ref=b9f7ff280d5deed74d1024934dc1fe72da6a1dc6"},{"status":"modified","deletions":5,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/b9f7ff280d5deed74d1024934dc1fe72da6a1dc6\/run-tests.sh","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/b9f7ff280d5deed74d1024934dc1fe72da6a1dc6\/run-tests.sh","changes":10,"filename":"run-tests.sh","sha":"68ef4b0f6ed2a6ff60808df24906c0d41a217cf7","additions":5,"patch":"@@ -1,5 +1,7 @@\n #!\/bin\/bash -x\n set -e\n+\n+PYTEST_OPTS=\"--ignore=gnocchi\/tests\/functional_live ${*:-gnocchi\/tests}\"\n PIDS=\"\"\n GNOCCHI_TEST_STORAGE_DRIVERS=${GNOCCHI_TEST_STORAGE_DRIVERS:-file}\n GNOCCHI_TEST_INDEXER_DRIVERS=${GNOCCHI_TEST_INDEXER_DRIVERS:-postgresql}\n@@ -11,7 +13,7 @@ do\n         {\n         case $GNOCCHI_TEST_STORAGE_DRIVER in\n             ceph|redis)\n-                pifpaf run $GNOCCHI_TEST_STORAGE_DRIVER -- pifpaf -g GNOCCHI_INDEXER_URL run $indexer -- .\/tools\/pretty_tox.sh $*\n+                pifpaf run $GNOCCHI_TEST_STORAGE_DRIVER -- pifpaf -g GNOCCHI_INDEXER_URL run $indexer -- pytest $PYTEST_OPTS\n                 ;;\n             s3)\n                 if ! which s3rver >\/dev\/null 2>&1\n@@ -21,12 +23,10 @@ do\n                     npm install s3rver --global\n                     export PATH=$PWD\/npm-s3rver\/bin:$PATH\n                 fi\n-                pifpaf -e GNOCCHI_STORAGE run s3rver -- \\\n-                       pifpaf -e GNOCCHI_INDEXER run $indexer -- \\\n-                       .\/tools\/pretty_tox.sh $*\n+                pifpaf -e GNOCCHI_STORAGE run s3rver -- pifpaf -e GNOCCHI_INDEXER run $indexer -- pytest $PYTEST_OPTS\n                 ;;\n             *)\n-                pifpaf -g GNOCCHI_INDEXER_URL run $indexer -- .\/tools\/pretty_tox.sh $*\n+                pifpaf -g GNOCCHI_INDEXER_URL run $indexer -- pytest $PYTEST_OPTS\n                 ;;\n         esac\n         # NOTE(sileht): Start all storage tests at once","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/run-tests.sh?ref=b9f7ff280d5deed74d1024934dc1fe72da6a1dc6"},{"status":"modified","deletions":4,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/b9f7ff280d5deed74d1024934dc1fe72da6a1dc6\/setup.cfg","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/b9f7ff280d5deed74d1024934dc1fe72da6a1dc6\/setup.cfg","changes":7,"filename":"setup.cfg","sha":"d2a131470d9780d4eae77bd40b41e9285769d927","additions":3,"patch":"@@ -60,12 +60,11 @@ test =\n     coverage>=3.6\n     fixtures\n     mock\n-    python-subunit>=0.0.18\n-    os-testr\n-    testrepository\n-    testscenarios\n     testresources>=0.2.4 # Apache-2.0\/BSD\n     testtools>=0.9.38\n+    pytest\n+    pytest-cov\n+    pytest-xdist>=1.19.0\n     WebTest>=2.0.16\n     doc8\n     keystonemiddleware>=4.0.0","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/setup.cfg?ref=b9f7ff280d5deed74d1024934dc1fe72da6a1dc6"},{"status":"modified","deletions":17,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/b9f7ff280d5deed74d1024934dc1fe72da6a1dc6\/tox.ini","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/b9f7ff280d5deed74d1024934dc1fe72da6a1dc6\/tox.ini","changes":29,"filename":"tox.ini","sha":"549a53b8a919d00fe1c8e53b6a901333ff4acd1d","additions":12,"patch":"@@ -127,23 +127,9 @@ whitelist_externals = bash\n commands = flake8\n            bashate -v devstack\/plugin.sh\n \n-[testenv:py27-gate]\n-setenv = GNOCCHI_TEST_PATH=gnocchi\/tests\/functional_live\n-         GABBI_LIVE=1\n-passenv = {[testenv]passenv} GNOCCHI_SERVICE* GNOCCHI_AUTHORIZATION\n-sitepackages = True\n-basepython = python2.7\n-commands = {toxinidir}\/tools\/pretty_tox.sh '{posargs}'\n-\n-# This target provides a shortcut to running just the gabbi tests.\n-[testenv:py27-gabbi]\n-deps = .[test,postgresql,file]\n-setenv = GNOCCHI_TEST_PATH=gnocchi\/tests\/functional\n-basepython = python2.7\n-commands = pifpaf -g GNOCCHI_INDEXER_URL run postgresql -- {toxinidir}\/tools\/pretty_tox.sh '{posargs}'\n-\n-[testenv:py27-cover]\n-commands = pifpaf -g GNOCCHI_INDEXER_URL run postgresql -- python setup.py testr --coverage --testr-args=\"{posargs}\"\n+[testenv:cover]\n+deps = {[testenv:docs]deps}\n+commands = pifpaf -g GNOCCHI_INDEXER_URL run postgresql -- pytest --cov=gnocchi {posargs:gnocchi\/tests}\n \n [testenv:venv]\n # This is used by the doc job on the gate\n@@ -175,6 +161,10 @@ deps = {[testenv:docs]deps}\n        sphinxcontrib-versioning\n # fox <= 4.1 doc\n        pandas\n+       python-subunit>=0.0.18\n+       os-testr\n+       testrepository\n+       testscenarios\n # for 3.x doc\n        oslotest\n        oslosphinx\n@@ -186,3 +176,8 @@ commands =\n \n [doc8]\n ignore-path = doc\/source\/rest.rst,doc\/source\/comparison-table.rst\n+\n+[pytest]\n+# NOTE(sileht): loadscope is needed to ensure gabbi tests are ran into the same worker\n+addopts = --verbose --dist=loadscope --numprocesses=auto\n+norecursedirs = .tox","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/tox.ini?ref=b9f7ff280d5deed74d1024934dc1fe72da6a1dc6"}],"committer":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"stats":{"deletions":166,"additions":136,"total":302},"author":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/b9f7ff280d5deed74d1024934dc1fe72da6a1dc6","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/b9f7ff280d5deed74d1024934dc1fe72da6a1dc6\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/b9f7ff280d5deed74d1024934dc1fe72da6a1dc6","sha":"b9f7ff280d5deed74d1024934dc1fe72da6a1dc6","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/87a950c9134544384100ece34c67a06e63cb2201","sha":"87a950c9134544384100ece34c67a06e63cb2201","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/87a950c9134544384100ece34c67a06e63cb2201"}],"commit":{"committer":{"date":"2017-12-05T15:19:16Z","name":"Mehdi Abaakouk","email":"sileht@redhat.com"},"author":{"date":"2017-10-12T21:41:07Z","name":"Mehdi Abaakouk","email":"sileht@redhat.com"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/b9f7ff280d5deed74d1024934dc1fe72da6a1dc6","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/a601d5a7d17d21d9f62d523435da0e4502360798","sha":"a601d5a7d17d21d9f62d523435da0e4502360798"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"tests: move to pytest\n\nTo do so:\n* testscenario have been replaced by a simple class inherit\n* remove obsolete tox target\n* Use pytest-xdist to run tests in parallel\n* Move gabbi test runner from unittest driver to pytest driver\n* USe pytest-cov to run coverage\n\nTo ensure gabbi tests are grouped into the same worker like group_regex\nof testr. This change uses --dist=loadscope of pytest-xdist>=1.19."}},{"files":[{"status":"modified","deletions":10,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/d9a659d541b1a2b3674e538b2cd4cc2f0ad836ea\/gnocchi\/tests\/functional\/test_gabbi.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/d9a659d541b1a2b3674e538b2cd4cc2f0ad836ea\/gnocchi\/tests\/functional\/test_gabbi.py","changes":55,"filename":"gnocchi\/tests\/functional\/test_gabbi.py","sha":"efef3d4c18ae1bbaf9b8e0da3cb8bf9ba27e34ff","additions":45,"patch":"@@ -16,14 +16,12 @@\n \"\"\"A test module to exercise the Gnocchi API with gabbi.\"\"\"\n \n import os\n+import unittest\n \n from gabbi import driver\n-# We need test_pytest so that pytest test collection works properly.\n-# Without this, the pytest_generate_tests method below will not be\n-# called.\n-from gabbi.driver import test_pytest  # noqa\n import wsgi_intercept\n \n+from gnocchi.tests import base\n from gnocchi.tests.functional import fixtures\n \n \n@@ -32,9 +30,46 @@\n PREFIX = '\/gnocchi'\n \n \n-def pytest_generate_tests(metafunc):\n-    test_dir = os.path.join(os.path.dirname(__file__), TESTS_DIR)\n-    driver.py_test_generator(test_dir, prefix=PREFIX,\n-                             intercept=fixtures.setup_app,\n-                             fixture_module=fixtures, metafunc=metafunc,\n-                             safe_yaml=False)\n+class TestFunctional(base.BaseTestCase):\n+    # NOTE(sileht): This run each yaml file into one testcase\n+    # instead of one testcase per yaml line\n+    # This permits to use pytest-xdist any --dist\n+\n+    def _do_test(self, test):\n+        with open(os.devnull, 'w') as stream:\n+            result = unittest.TextTestRunner(\n+                stream=stream, verbosity=0, failfast=True\n+            ).run(test)\n+\n+        if not result.wasSuccessful():\n+            failures = (result.errors + result.failures +\n+                        result.unexpectedSuccesses)\n+            if failures:\n+                test, bt = failures[0]\n+                name = test.test_data.get('name', test.id())\n+                msg = 'From test \"%s\" :\\n%s' % (name, bt)\n+                self.fail(msg)\n+\n+        self.assertTrue(result.wasSuccessful())\n+\n+    @staticmethod\n+    def _test_maker(name, t):\n+        def test(self):\n+            self._do_test(t)\n+            test.__name__ = name\n+        return test\n+\n+    @classmethod\n+    def generate_tests(cls):\n+        test_dir = os.path.join(os.path.dirname(__file__), TESTS_DIR)\n+        loader = unittest.TestLoader()\n+        tests = driver.build_tests(test_dir, loader,\n+                                   intercept=fixtures.setup_app,\n+                                   fixture_module=fixtures,\n+                                   prefix=PREFIX, safe_yaml=False)\n+        for test in tests:\n+            name = test._tests[0].__class__.__name__\n+            setattr(cls, name, cls._test_maker(name, test))\n+\n+\n+TestFunctional.generate_tests()","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/functional\/test_gabbi.py?ref=d9a659d541b1a2b3674e538b2cd4cc2f0ad836ea"},{"status":"modified","deletions":2,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/d9a659d541b1a2b3674e538b2cd4cc2f0ad836ea\/tox.ini","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/d9a659d541b1a2b3674e538b2cd4cc2f0ad836ea\/tox.ini","changes":3,"filename":"tox.ini","sha":"77b93a3d6af0690693b871f8d20c12250e7800dc","additions":1,"patch":"@@ -178,6 +178,5 @@ commands =\n ignore-path = doc\/source\/rest.rst,doc\/source\/comparison-table.rst\n \n [pytest]\n-# NOTE(sileht): loadscope is needed to ensure gabbi tests are ran into the same worker\n-addopts = --verbose --dist=loadscope --numprocesses=auto\n+addopts = --verbose --numprocesses=auto\n norecursedirs = .tox","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/tox.ini?ref=d9a659d541b1a2b3674e538b2cd4cc2f0ad836ea"}],"committer":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"stats":{"deletions":12,"additions":46,"total":58},"author":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/d9a659d541b1a2b3674e538b2cd4cc2f0ad836ea","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/d9a659d541b1a2b3674e538b2cd4cc2f0ad836ea\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/d9a659d541b1a2b3674e538b2cd4cc2f0ad836ea","sha":"d9a659d541b1a2b3674e538b2cd4cc2f0ad836ea","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/b9f7ff280d5deed74d1024934dc1fe72da6a1dc6","sha":"b9f7ff280d5deed74d1024934dc1fe72da6a1dc6","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/b9f7ff280d5deed74d1024934dc1fe72da6a1dc6"}],"commit":{"committer":{"date":"2017-12-06T08:27:33Z","name":"Mehdi Abaakouk","email":"sileht@redhat.com"},"author":{"date":"2017-10-23T18:42:07Z","name":"Mehdi Abaakouk","email":"sileht@redhat.com"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/d9a659d541b1a2b3674e538b2cd4cc2f0ad836ea","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/39755521c6008a2267e86cd79a02dbe2890683a1","sha":"39755521c6008a2267e86cd79a02dbe2890683a1"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"gabbi\/pytest: increase run speed"}}],"diff_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409.diff","pastamaker_ci_statuses":{"continuous-integration\/travis-ci\/pr":{"url":"https:\/\/travis-ci.org\/gnocchixyz\/gnocchi\/builds\/312294129?utm_source=github_status&utm_medium=notification","state":"error"},"pastamaker\/reviewers":{"url":null,"state":"pending"}},"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409","body":"","head":{"repo":{"issues_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/issues{\/number}","deployments_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/deployments","has_wiki":true,"forks_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/forks","mirror_url":null,"issue_events_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/issues\/events{\/number}","subscription_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/subscription","merges_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/merges","collaborators_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/collaborators{\/collaborator}","updated_at":"2017-05-23T14:32:13Z","private":false,"pulls_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/pulls{\/number}","issue_comment_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/issues\/comments{\/number}","trees_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/git\/trees{\/sha}","full_name":"sileht\/gnocchi","owner":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"statuses_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/statuses\/{sha}","id":92182973,"keys_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/keys{\/key_id}","size":4456,"tags_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/tags","archived":false,"downloads_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/downloads","assignees_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/assignees{\/user}","contents_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/contents\/{+path}","has_pages":false,"git_refs_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/git\/refs{\/sha}","has_projects":true,"clone_url":"https:\/\/github.com\/sileht\/gnocchi.git","watchers_count":0,"git_tags_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/git\/tags{\/sha}","milestones_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/milestones{\/number}","stargazers_count":0,"homepage":null,"branches_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/branches{\/branch}","fork":true,"commits_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/commits{\/sha}","releases_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/releases{\/id}","description":"Timeseries database","has_downloads":true,"labels_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/labels{\/name}","events_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/events","contributors_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/contributors","html_url":"https:\/\/github.com\/sileht\/gnocchi","compare_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/compare\/{base}...{head}","language":"Python","watchers":0,"git_url":"git:\/\/github.com\/sileht\/gnocchi.git","svn_url":"https:\/\/github.com\/sileht\/gnocchi","notifications_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/notifications{?since,all,participating}","has_issues":false,"ssh_url":"git@github.com:sileht\/gnocchi.git","blobs_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/git\/blobs{\/sha}","forks":0,"hooks_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/hooks","open_issues_count":0,"comments_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/comments{\/number}","name":"gnocchi","license":null,"url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi","created_at":"2017-05-23T14:32:11Z","archive_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/{archive_format}{\/ref}","pushed_at":"2018-03-05T07:35:20Z","forks_count":0,"default_branch":"master","teams_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/teams","open_issues":0,"languages_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/languages","git_commits_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/git\/commits{\/sha}","subscribers_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/subscribers","stargazers_url":"https:\/\/api.github.com\/repos\/sileht\/gnocchi\/stargazers"},"sha":"d9a659d541b1a2b3674e538b2cd4cc2f0ad836ea","ref":"sileht\/pytest","user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"label":"sileht:sileht\/pytest"},"pastamaker_weight":-1,"commits":3,"author_association":"OWNER","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409","pastamaker_travis_url":"https:\/\/travis-ci.org\/gnocchixyz\/gnocchi\/builds\/312294129?utm_source=github_status&utm_medium=notification","updated_at":"2018-03-05T07:52:24Z","pastamaker_approved":false,"base":{"repo":{"issues_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues{\/number}","deployments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/deployments","has_wiki":false,"forks_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/forks","mirror_url":null,"issue_events_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/events{\/number}","subscription_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/subscription","merges_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/merges","collaborators_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/collaborators{\/collaborator}","updated_at":"2018-03-02T08:55:56Z","private":false,"pulls_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls{\/number}","issue_comment_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments{\/number}","trees_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees{\/sha}","full_name":"gnocchixyz\/gnocchi","owner":{"following_url":"https:\/\/api.github.com\/users\/gnocchixyz\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/gnocchixyz\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/gnocchixyz\/orgs","url":"https:\/\/api.github.com\/users\/gnocchixyz","events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/events{\/privacy}","html_url":"https:\/\/github.com\/gnocchixyz","subscriptions_url":"https:\/\/api.github.com\/users\/gnocchixyz\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/26142905?v=4","repos_url":"https:\/\/api.github.com\/users\/gnocchixyz\/repos","received_events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/gnocchixyz\/starred{\/owner}{\/repo}","site_admin":false,"login":"gnocchixyz","type":"Organization","id":26142905,"followers_url":"https:\/\/api.github.com\/users\/gnocchixyz\/followers"},"statuses_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/statuses\/{sha}","id":91715647,"keys_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/keys{\/key_id}","size":4854,"tags_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/tags","archived":false,"downloads_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/downloads","assignees_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/assignees{\/user}","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/{+path}","has_pages":false,"git_refs_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/refs{\/sha}","has_projects":false,"clone_url":"https:\/\/github.com\/gnocchixyz\/gnocchi.git","watchers_count":124,"git_tags_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/tags{\/sha}","milestones_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/milestones{\/number}","stargazers_count":124,"homepage":null,"branches_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/branches{\/branch}","fork":false,"commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits{\/sha}","releases_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/releases{\/id}","description":"Timeseries database","has_downloads":true,"labels_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/labels{\/name}","events_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/events","contributors_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contributors","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi","compare_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/compare\/{base}...{head}","language":"Python","watchers":124,"git_url":"git:\/\/github.com\/gnocchixyz\/gnocchi.git","svn_url":"https:\/\/github.com\/gnocchixyz\/gnocchi","notifications_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/notifications{?since,all,participating}","has_issues":true,"ssh_url":"git@github.com:gnocchixyz\/gnocchi.git","blobs_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/blobs{\/sha}","forks":29,"hooks_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/hooks","open_issues_count":52,"comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/comments{\/number}","name":"gnocchi","license":{"spdx_id":"Apache-2.0","url":"https:\/\/api.github.com\/licenses\/apache-2.0","name":"Apache License 2.0","key":"apache-2.0"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi","created_at":"2017-05-18T16:32:52Z","archive_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/{archive_format}{\/ref}","pushed_at":"2018-03-05T07:35:29Z","forks_count":29,"default_branch":"master","teams_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/teams","open_issues":52,"languages_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/languages","git_commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits{\/sha}","subscribers_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/subscribers","stargazers_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/stargazers"},"sha":"7892684dde395dd3ccec67a9cb172659975d74a8","ref":"master","user":{"following_url":"https:\/\/api.github.com\/users\/gnocchixyz\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/gnocchixyz\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/gnocchixyz\/orgs","url":"https:\/\/api.github.com\/users\/gnocchixyz","events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/events{\/privacy}","html_url":"https:\/\/github.com\/gnocchixyz","subscriptions_url":"https:\/\/api.github.com\/users\/gnocchixyz\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/26142905?v=4","repos_url":"https:\/\/api.github.com\/users\/gnocchixyz\/repos","received_events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/gnocchixyz\/starred{\/owner}{\/repo}","site_admin":false,"login":"gnocchixyz","type":"Organization","id":26142905,"followers_url":"https:\/\/api.github.com\/users\/gnocchixyz\/followers"},"label":"gnocchixyz:master"},"rebaseable":false,"milestone":null,"pastamaker_travis_detail":{"commit_id":92565521,"repository_id":13523406,"jobs":[{"build_id":312294129,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/312294130\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"1689.1","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":92565521,"finished_at":"2017-12-06T08:31:01Z","started_at":"2017-12-06T08:28:36Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"python","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=pep8"},"id":312294130},{"build_id":312294129,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/312294131\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"1689.2","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":92565521,"finished_at":"2017-12-06T08:31:15Z","started_at":"2017-12-06T08:28:38Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"python","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=docs"},"id":312294131},{"build_id":312294129,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/312294132\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"1689.3","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":92565521,"finished_at":"2017-12-06T08:34:45Z","started_at":"2017-12-06T08:28:40Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"python","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=docs-gnocchi.xyz"},"id":312294132},{"build_id":312294129,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/312294133\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"1689.4","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":92565521,"finished_at":"2017-12-06T22:52:36Z","started_at":"2017-12-06T22:48:28Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"python","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-mysql-ceph-upgrade-from-3.1"},"id":312294133},{"build_id":312294129,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/312294134\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"1689.5","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":92565521,"finished_at":"2017-12-06T08:33:08Z","started_at":"2017-12-06T08:28:36Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"python","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-postgresql-file-upgrade-from-3.1"},"id":312294134},{"build_id":312294129,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/312294135\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"1689.6","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":92565521,"finished_at":"2017-12-06T08:36:09Z","started_at":"2017-12-06T08:31:45Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"python","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-mysql-ceph-upgrade-from-4.0"},"id":312294135},{"build_id":312294129,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/312294136\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"1689.7","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":92565521,"finished_at":"2017-12-06T08:36:00Z","started_at":"2017-12-06T08:31:56Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"python","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-postgresql-file-upgrade-from-4.0"},"id":312294136},{"build_id":312294129,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/312294137\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"1689.8","allow_failure":false,"queue":"builds.gce","state":"failed","commit_id":92565521,"finished_at":"2017-12-06T08:38:23Z","started_at":"2017-12-06T08:33:46Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"python","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-mysql-ceph-upgrade-from-4.1"},"id":312294137},{"build_id":312294129,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/312294138\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"1689.9","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":92565521,"finished_at":"2017-12-06T08:39:27Z","started_at":"2017-12-06T08:35:29Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"python","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-postgresql-file-upgrade-from-4.1"},"id":312294138},{"build_id":312294129,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/312294139\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"1689.10","allow_failure":false,"queue":"builds.gce","state":"errored","commit_id":92565521,"finished_at":"2017-12-06T09:26:01Z","started_at":"2017-12-06T08:36:40Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"python","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-mysql"},"id":312294139},{"build_id":312294129,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/312294140\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"1689.11","allow_failure":false,"queue":"builds.gce","state":"failed","commit_id":92565521,"finished_at":"2017-12-06T09:24:33Z","started_at":"2017-12-06T08:36:49Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"python","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-mysql"},"id":312294140},{"build_id":312294129,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/312294141\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"1689.12","allow_failure":false,"queue":"builds.gce","state":"failed","commit_id":92565521,"finished_at":"2017-12-06T09:08:51Z","started_at":"2017-12-06T08:39:03Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"python","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-postgresql"},"id":312294141},{"build_id":312294129,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/312294142\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"1689.13","allow_failure":false,"queue":"builds.gce","state":"failed","commit_id":92565521,"finished_at":"2017-12-06T09:10:08Z","started_at":"2017-12-06T08:40:06Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"python","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-postgresql"},"id":312294142}],"event_type":"pull_request","finished_at":"2017-12-06T22:52:36Z","number":"1689","id":312294129,"state":"errored","pull_request_title":"tests: move to pytest","pull_request":true,"duration":11625,"started_at":"2017-12-06T22:48:28Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","env":["TARGET=pep8","TARGET=docs","TARGET=docs-gnocchi.xyz","TARGET=py27-mysql-ceph-upgrade-from-3.1","TARGET=py35-postgresql-file-upgrade-from-3.1","TARGET=py27-mysql-ceph-upgrade-from-4.0","TARGET=py35-postgresql-file-upgrade-from-4.0","TARGET=py27-mysql-ceph-upgrade-from-4.1","TARGET=py35-postgresql-file-upgrade-from-4.1","TARGET=py27-mysql","TARGET=py35-mysql","TARGET=py27-postgresql","TARGET=py35-postgresql"],"language":"python","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty",".result":"configured","deploy":{"true":{"all_branches":true,"tags":true},"password":{"secure":"c+Ccx3SHCWepiy0PUxDJ7XO9r3aNYnHjkzxF5c\/kjV8QaCJayAJEgXJnBKhvjroqwgn7JPUgpD6QdSWdB4FqjbZYQ3I3oHOO1YL0vYYa8wHG5HuMsMp4J8qvzgs3QNQDECPI1mXsPevn3VMfGszUN+6BQrHB3FbZsTtOmE+Kmgok5NCT+obsfEhVea\/UOD0XFUkVW9VJhPjQ2ytvYvFIc46\/73GQf2Er\/5DCa\/4GGDEBSD++bDJgp3kQj438xslCAFeZWDwGsa+cTc43PI0Y0+E144ySVY7QyVbZ1B66a1BGWVrXJuM+gW\/eIBCMN1FJXmD7CDdPa22azKI8dfMF7qaH3Oiv3cVovPWpubOvhTUHUFwG8+W7Fx+zUKktCWiLer\/fZvEd3W8tcgby2kNOdcUfKfDB2ImZJ+P694\/OJ4jJ8T5TQerruNoP2OstzcBMon77Ry0XawXR15SZd4JhbqhSi+h7XV6EYmct1UN4zoysA7fx\/cWHcBxdnm2G6R0gzmOiiGUd74ptU8lZ3IlEP6EZckK\/OZOdy1I8EQeUe7aiTooXZDAn07iPkDZliYRr2e36ij\/xjtWCe1AjCksn\/xdKfHOKJv5UVob495DU2GuNObe01ewXzexcnldjfp9Sb8SVEFuhHx6IvH5OC+vAq+BVYu2jwvMcVfXi3VSOkB4="},"distributions":"sdist bdist_wheel","user":"jd","provider":"pypi"}},"job_ids":[312294130,312294131,312294132,312294133,312294134,312294135,312294136,312294137,312294138,312294139,312294140,312294141,312294142],"pull_request_number":409,"resume_state":"error"},"requested_teams":[],"locked":false,"merged_by":null,"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/409","mergeable_state":"dirty","created_at":"2017-10-04T14:54:14Z","merged":false,"review_comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/409\/comments","review_comments":2,"assignees":[],"review_comment_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/comments{\/number}","pastamaker_comments":[{"body":"Pull-request updated, HEAD is now 0aa5efe8a879d448d7eb36856694df7efe58942e","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/334182685","created_at":"2017-10-04T14:54:59Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#issuecomment-334182685","updated_at":"2017-10-04T14:54:59Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"id":334182685,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"},{"body":"Pull-request updated, HEAD is now 21966d547e7bad43c0b2d84503eb9fd2ea9295f2","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/334186461","created_at":"2017-10-04T15:05:52Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#issuecomment-334186461","updated_at":"2017-10-04T15:05:52Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"id":334186461,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"},{"original_position":23,"diff_hunk":"@@ -28,9 +32,8 @@\n PREFIX = '\/gnocchi'\n \n \n-def load_tests(loader, tests, pattern):\n-    \"\"\"Provide a TestSuite to the discovery process.\"\"\"\n+def pytest_generate_tests(metafunc):\n     test_dir = os.path.join(os.path.dirname(__file__), TESTS_DIR)\n-    return driver.build_tests(test_dir, loader, host=None, prefix=PREFIX,\n-                              intercept=fixtures.setup_app,\n-                              fixture_module=fixtures)\n+    driver.py_test_generator(test_dir, prefix=PREFIX,\n+                             intercept=fixtures.setup_app,","pull_request_review_id":67099182,"created_at":"2017-10-04T15:09:42Z","author_association":"OWNER","body":"@cdent any idea http:\/\/paste.openstack.org\/show\/622670\/ ?\r\n\r\nLooks like gabbi does not call fixtures.setup_app()","updated_at":"2017-12-06T08:27:42Z","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#discussion_r142699569","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/409","state":"COMMENT","commit_id":"d9a659d541b1a2b3674e538b2cd4cc2f0ad836ea","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/comments\/142699569","position":null,"_links":{"self":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/comments\/142699569"},"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#discussion_r142699569"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/409"}},"path":"gnocchi\/tests\/functional\/test_gabbi.py","original_commit_id":"21966d547e7bad43c0b2d84503eb9fd2ea9295f2","id":142699569,"user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"}},{"body":"","commit_id":"21966d547e7bad43c0b2d84503eb9fd2ea9295f2","submitted_at":"2017-10-04T15:09:55Z","created_at":"2017-10-04T15:09:55Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#pullrequestreview-67099182","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/409","state":"COMMENTED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#pullrequestreview-67099182"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/409"}},"user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"id":67099182},{"original_position":23,"diff_hunk":"@@ -28,9 +32,8 @@\n PREFIX = '\/gnocchi'\n \n \n-def load_tests(loader, tests, pattern):\n-    \"\"\"Provide a TestSuite to the discovery process.\"\"\"\n+def pytest_generate_tests(metafunc):\n     test_dir = os.path.join(os.path.dirname(__file__), TESTS_DIR)\n-    return driver.build_tests(test_dir, loader, host=None, prefix=PREFIX,\n-                              intercept=fixtures.setup_app,\n-                              fixture_module=fixtures)\n+    driver.py_test_generator(test_dir, prefix=PREFIX,\n+                             intercept=fixtures.setup_app,","in_reply_to_id":142699569,"pull_request_review_id":67100978,"created_at":"2017-10-04T15:14:23Z","author_association":"CONTRIBUTOR","body":"Zounds, moving to pytest, that's exciting. It's supposed to do fixtures, so I'm not sure what's going on, I'll pull this down and try it myself.","updated_at":"2017-12-06T08:27:42Z","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#discussion_r142701052","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/409","state":"COMMENT","commit_id":"d9a659d541b1a2b3674e538b2cd4cc2f0ad836ea","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/comments\/142701052","position":null,"_links":{"self":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/comments\/142701052"},"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#discussion_r142701052"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/409"}},"path":"gnocchi\/tests\/functional\/test_gabbi.py","original_commit_id":"21966d547e7bad43c0b2d84503eb9fd2ea9295f2","id":142701052,"user":{"following_url":"https:\/\/api.github.com\/users\/cdent\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/cdent\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/cdent\/orgs","url":"https:\/\/api.github.com\/users\/cdent","events_url":"https:\/\/api.github.com\/users\/cdent\/events{\/privacy}","html_url":"https:\/\/github.com\/cdent","subscriptions_url":"https:\/\/api.github.com\/users\/cdent\/subscriptions","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/34498?v=4","repos_url":"https:\/\/api.github.com\/users\/cdent\/repos","received_events_url":"https:\/\/api.github.com\/users\/cdent\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/cdent\/starred{\/owner}{\/repo}","site_admin":false,"login":"cdent","type":"User","id":34498,"followers_url":"https:\/\/api.github.com\/users\/cdent\/followers"}},{"body":"","commit_id":"21966d547e7bad43c0b2d84503eb9fd2ea9295f2","submitted_at":"2017-10-04T15:14:23Z","created_at":"2017-10-04T15:14:23Z","author_association":"CONTRIBUTOR","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#pullrequestreview-67100978","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/409","state":"COMMENTED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#pullrequestreview-67100978"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/409"}},"user":{"following_url":"https:\/\/api.github.com\/users\/cdent\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/cdent\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/cdent\/orgs","url":"https:\/\/api.github.com\/users\/cdent","events_url":"https:\/\/api.github.com\/users\/cdent\/events{\/privacy}","html_url":"https:\/\/github.com\/cdent","subscriptions_url":"https:\/\/api.github.com\/users\/cdent\/subscriptions","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/34498?v=4","repos_url":"https:\/\/api.github.com\/users\/cdent\/repos","received_events_url":"https:\/\/api.github.com\/users\/cdent\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/cdent\/starred{\/owner}{\/repo}","site_admin":false,"login":"cdent","type":"User","id":34498,"followers_url":"https:\/\/api.github.com\/users\/cdent\/followers"},"id":67100978},{"body":"Tests FAILURE for HEAD 21966d547e7bad43c0b2d84503eb9fd2ea9295f2\n\n- [TARGET=pep8](https:\/\/api.travis-ci.org\/jobs\/283235891\/log): PASSED\n- [TARGET=docs](https:\/\/api.travis-ci.org\/jobs\/283235894\/log): FAILED\n- [TARGET=docs-gnocchi.xyz](https:\/\/api.travis-ci.org\/jobs\/283235896\/log): FAILED\n- [TARGET=py27-mysql-ceph-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/283235897\/log): PASSED\n- [TARGET=py35-postgresql-file-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/283235898\/log): PASSED\n- [TARGET=py27-mysql-ceph-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/283235899\/log): FAILED\n- [TARGET=py35-postgresql-file-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/283235900\/log): PASSED\n- [TARGET=py27-mysql](https:\/\/api.travis-ci.org\/jobs\/283235901\/log): FAILED\n- [TARGET=py35-mysql](https:\/\/api.travis-ci.org\/jobs\/283235902\/log): FAILED\n- [TARGET=py27-postgresql](https:\/\/api.travis-ci.org\/jobs\/283235903\/log): FAILED\n- [TARGET=py35-postgresql](https:\/\/api.travis-ci.org\/jobs\/283235904\/log): FAILED","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/334191906","created_at":"2017-10-04T15:21:57Z","author_association":"NONE","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#issuecomment-334191906","updated_at":"2017-10-04T15:21:57Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/orgs","url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D","events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/events{\/privacy}","html_url":"https:\/\/github.com\/apps\/pastamaker","subscriptions_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/subscriptions","avatar_url":"https:\/\/avatars3.githubusercontent.com\/in\/2908?v=4","repos_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/repos","received_events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/starred{\/owner}{\/repo}","site_admin":false,"login":"pastamaker[bot]","type":"Bot","id":29290835,"followers_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/followers"},"id":334191906,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"},{"body":"The problem seems to be a conflict between existing tests (many of which aren't being collected properly because they have __init__ and py.test doesn't like that) and something going on in the discovery process. The result is that none of the gabbi fixtures run. I can get successful gabbi run with the following adjustment and tox call:\r\n\r\n```diff\r\ndiff --git a\/run-tests.sh b\/run-tests.sh\r\nindex d7cd7ac1..617ba6dd 100755\r\n--- a\/run-tests.sh\r\n+++ b\/run-tests.sh\r\n@@ -26,7 +26,7 @@ do\r\n                        .\/tools\/pretty_tox.sh $*\r\n                 ;;\r\n             *)\r\n-                pifpaf -g GNOCCHI_INDEXER_URL run $indexer -- pytest -v --ignore=gnocchi\/tests\/functional_live $* gnocchi\/tests\r\n+                pifpaf -g GNOCCHI_INDEXER_URL run $indexer -- pytest -v --ignore=gnocchi\/tests\/functional_live ${*:-gnocchi\/tests}\r\n                 ;;\r\n         esac\r\n         # NOTE(sileht): Start all storage tests at once\r\n```\r\n\r\n`tox -epy27-postgresql-file -- -svx gnocchi\/tests\/functional\/test_gabbi.py`\r\n\r\nbut then pifpaf gets upset and exits non-zero","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/334225290","created_at":"2017-10-04T17:12:43Z","author_association":"CONTRIBUTOR","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#issuecomment-334225290","updated_at":"2017-10-04T17:12:43Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/cdent\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/cdent\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/cdent\/orgs","url":"https:\/\/api.github.com\/users\/cdent","events_url":"https:\/\/api.github.com\/users\/cdent\/events{\/privacy}","html_url":"https:\/\/github.com\/cdent","subscriptions_url":"https:\/\/api.github.com\/users\/cdent\/subscriptions","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/34498?v=4","repos_url":"https:\/\/api.github.com\/users\/cdent\/repos","received_events_url":"https:\/\/api.github.com\/users\/cdent\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/cdent\/starred{\/owner}{\/repo}","site_admin":false,"login":"cdent","type":"User","id":34498,"followers_url":"https:\/\/api.github.com\/users\/cdent\/followers"},"id":334225290,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"},{"body":"Pull-request updated, HEAD is now 9bc72ff630717122253a1d8c0aa449c0af70e43a","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/334369702","created_at":"2017-10-05T06:19:23Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#issuecomment-334369702","updated_at":"2017-10-05T06:19:23Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"id":334369702,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"},{"body":"Pull-request updated, HEAD is now 33696560fff36bead3d343af0c2042ea04bf04a5","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/334370243","created_at":"2017-10-05T06:23:15Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#issuecomment-334370243","updated_at":"2017-10-05T06:23:15Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"id":334370243,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"},{"body":"Tests FAILURE for HEAD 33696560fff36bead3d343af0c2042ea04bf04a5\n\n- [TARGET=pep8](https:\/\/api.travis-ci.org\/jobs\/283542570\/log): FAILED\n- [TARGET=docs](https:\/\/api.travis-ci.org\/jobs\/283542571\/log): FAILED\n- [TARGET=docs-gnocchi.xyz](https:\/\/api.travis-ci.org\/jobs\/283542572\/log): FAILED\n- [TARGET=py27-mysql-ceph-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/283542574\/log): PASSED\n- [TARGET=py35-postgresql-file-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/283542575\/log): PASSED\n- [TARGET=py27-mysql-ceph-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/283542577\/log): FAILED\n- [TARGET=py35-postgresql-file-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/283542578\/log): PASSED\n- [TARGET=py27-mysql](https:\/\/api.travis-ci.org\/jobs\/283542579\/log): FAILED\n- [TARGET=py35-mysql](https:\/\/api.travis-ci.org\/jobs\/283542580\/log): FAILED\n- [TARGET=py27-postgresql](https:\/\/api.travis-ci.org\/jobs\/283542581\/log): FAILED\n- [TARGET=py35-postgresql](https:\/\/api.travis-ci.org\/jobs\/283542583\/log): FAILED","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/334373361","created_at":"2017-10-05T06:42:24Z","author_association":"NONE","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#issuecomment-334373361","updated_at":"2017-10-05T06:42:24Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/orgs","url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D","events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/events{\/privacy}","html_url":"https:\/\/github.com\/apps\/pastamaker","subscriptions_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/subscriptions","avatar_url":"https:\/\/avatars3.githubusercontent.com\/in\/2908?v=4","repos_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/repos","received_events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/starred{\/owner}{\/repo}","site_admin":false,"login":"pastamaker[bot]","type":"Bot","id":29290835,"followers_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/followers"},"id":334373361,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"},{"body":"Pull-request updated, HEAD is now 4ded8e1be9834bf7a4e27ba06f445fd5c358c06b","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/334374077","created_at":"2017-10-05T06:46:12Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#issuecomment-334374077","updated_at":"2017-10-05T06:46:12Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"id":334374077,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"},{"body":"Pull-request updated, HEAD is now 937d91d14a3ed28a11ef5c0d78874fbf1202ff0e","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/334413886","created_at":"2017-10-05T09:39:59Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#issuecomment-334413886","updated_at":"2017-10-05T09:39:59Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"id":334413886,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"},{"body":"Tests FAILURE for HEAD 937d91d14a3ed28a11ef5c0d78874fbf1202ff0e\n\n- [TARGET=pep8](https:\/\/api.travis-ci.org\/jobs\/283608390\/log): PASSED\n- [TARGET=docs](https:\/\/api.travis-ci.org\/jobs\/283608391\/log): PASSED\n- [TARGET=docs-gnocchi.xyz](https:\/\/api.travis-ci.org\/jobs\/283608392\/log): FAILED\n- [TARGET=py27-mysql-ceph-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/283608393\/log): PASSED\n- [TARGET=py35-postgresql-file-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/283608394\/log): PASSED\n- [TARGET=py27-mysql-ceph-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/283608395\/log): PASSED\n- [TARGET=py35-postgresql-file-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/283608396\/log): PASSED\n- [TARGET=py27-mysql](https:\/\/api.travis-ci.org\/jobs\/283608397\/log): FAILED\n- [TARGET=py35-mysql](https:\/\/api.travis-ci.org\/jobs\/283608398\/log): FAILED\n- [TARGET=py27-postgresql](https:\/\/api.travis-ci.org\/jobs\/283608399\/log): FAILED\n- [TARGET=py35-postgresql](https:\/\/api.travis-ci.org\/jobs\/283608400\/log): FAILED","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/334428609","created_at":"2017-10-05T10:44:08Z","author_association":"NONE","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#issuecomment-334428609","updated_at":"2017-10-05T10:44:08Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/orgs","url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D","events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/events{\/privacy}","html_url":"https:\/\/github.com\/apps\/pastamaker","subscriptions_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/subscriptions","avatar_url":"https:\/\/avatars3.githubusercontent.com\/in\/2908?v=4","repos_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/repos","received_events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/starred{\/owner}{\/repo}","site_admin":false,"login":"pastamaker[bot]","type":"Bot","id":29290835,"followers_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/followers"},"id":334428609,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"},{"body":"Pull-request updated, HEAD is now 0ad8d971040ba0a3189634168698799c3827d92b","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/336051750","created_at":"2017-10-12T08:00:48Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#issuecomment-336051750","updated_at":"2017-10-12T08:00:48Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"id":336051750,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"},{"body":"Tests FAILURE for HEAD 0ad8d971040ba0a3189634168698799c3827d92b\n\n- [TARGET=pep8](https:\/\/api.travis-ci.org\/jobs\/286910448\/log): FAILED\n- [TARGET=docs](https:\/\/api.travis-ci.org\/jobs\/286910449\/log): PASSED\n- [TARGET=docs-gnocchi.xyz](https:\/\/api.travis-ci.org\/jobs\/286910450\/log): FAILED\n- [TARGET=py27-mysql-ceph-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/286910451\/log): PASSED\n- [TARGET=py35-postgresql-file-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/286910452\/log): PASSED\n- [TARGET=py27-mysql-ceph-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/286910453\/log): PASSED\n- [TARGET=py35-postgresql-file-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/286910454\/log): PASSED\n- [TARGET=py27-mysql](https:\/\/api.travis-ci.org\/jobs\/286910455\/log): FAILED\n- [TARGET=py35-mysql](https:\/\/api.travis-ci.org\/jobs\/286910456\/log): FAILED\n- [TARGET=py27-postgresql](https:\/\/api.travis-ci.org\/jobs\/286910457\/log): FAILED\n- [TARGET=py35-postgresql](https:\/\/api.travis-ci.org\/jobs\/286910458\/log): FAILED","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/336068649","created_at":"2017-10-12T09:08:24Z","author_association":"NONE","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#issuecomment-336068649","updated_at":"2017-10-12T09:08:24Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/orgs","url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D","events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/events{\/privacy}","html_url":"https:\/\/github.com\/apps\/pastamaker","subscriptions_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/subscriptions","avatar_url":"https:\/\/avatars3.githubusercontent.com\/in\/2908?v=4","repos_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/repos","received_events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/starred{\/owner}{\/repo}","site_admin":false,"login":"pastamaker[bot]","type":"Bot","id":29290835,"followers_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/followers"},"id":336068649,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"},{"body":"Pull-request updated, HEAD is now 346df3bddf5eb3239b0ad9c3095e0f24e593a683","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/336089485","created_at":"2017-10-12T10:34:38Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#issuecomment-336089485","updated_at":"2017-10-12T10:34:38Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"id":336089485,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"},{"body":"Tests FAILURE for HEAD 346df3bddf5eb3239b0ad9c3095e0f24e593a683\n\n- [TARGET=pep8](https:\/\/api.travis-ci.org\/jobs\/286970741\/log): PASSED\n- [TARGET=docs](https:\/\/api.travis-ci.org\/jobs\/286970742\/log): PASSED\n- [TARGET=docs-gnocchi.xyz](https:\/\/api.travis-ci.org\/jobs\/286970743\/log): FAILED\n- [TARGET=py27-mysql-ceph-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/286970744\/log): PASSED\n- [TARGET=py35-postgresql-file-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/286970747\/log): PASSED\n- [TARGET=py27-mysql-ceph-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/286970748\/log): PASSED\n- [TARGET=py35-postgresql-file-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/286970749\/log): PASSED\n- [TARGET=py27-mysql](https:\/\/api.travis-ci.org\/jobs\/286970756\/log): FAILED\n- [TARGET=py35-mysql](https:\/\/api.travis-ci.org\/jobs\/286970757\/log): FAILED\n- [TARGET=py27-postgresql](https:\/\/api.travis-ci.org\/jobs\/286970758\/log): FAILED\n- [TARGET=py35-postgresql](https:\/\/api.travis-ci.org\/jobs\/286970761\/log): FAILED","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/336092552","created_at":"2017-10-12T10:50:03Z","author_association":"NONE","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#issuecomment-336092552","updated_at":"2017-10-12T10:50:03Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/orgs","url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D","events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/events{\/privacy}","html_url":"https:\/\/github.com\/apps\/pastamaker","subscriptions_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/subscriptions","avatar_url":"https:\/\/avatars3.githubusercontent.com\/in\/2908?v=4","repos_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/repos","received_events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/starred{\/owner}{\/repo}","site_admin":false,"login":"pastamaker[bot]","type":"Bot","id":29290835,"followers_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/followers"},"id":336092552,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"},{"body":"Pull-request updated, HEAD is now 5e4f4fd2ad0644856a7534fb5f55d64ece3fe2db","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/336281594","created_at":"2017-10-12T21:43:28Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#issuecomment-336281594","updated_at":"2017-10-12T21:43:28Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"id":336281594,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"},{"body":"Tests FAILURE for HEAD 5e4f4fd2ad0644856a7534fb5f55d64ece3fe2db\n\n- [TARGET=pep8](https:\/\/api.travis-ci.org\/jobs\/287271794\/log): PASSED\n- [TARGET=docs](https:\/\/api.travis-ci.org\/jobs\/287271795\/log): PASSED\n- [TARGET=docs-gnocchi.xyz](https:\/\/api.travis-ci.org\/jobs\/287271796\/log): FAILED\n- [TARGET=py27-mysql-ceph-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/287271797\/log): PASSED\n- [TARGET=py35-postgresql-file-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/287271798\/log): PASSED\n- [TARGET=py27-mysql-ceph-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/287271801\/log): PASSED\n- [TARGET=py35-postgresql-file-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/287271809\/log): PASSED\n- [TARGET=py27-mysql](https:\/\/api.travis-ci.org\/jobs\/287271811\/log): FAILED\n- [TARGET=py35-mysql](https:\/\/api.travis-ci.org\/jobs\/287271812\/log): FAILED\n- [TARGET=py27-postgresql](https:\/\/api.travis-ci.org\/jobs\/287271813\/log): FAILED\n- [TARGET=py35-postgresql](https:\/\/api.travis-ci.org\/jobs\/287271818\/log): FAILED","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/336290357","created_at":"2017-10-12T22:12:23Z","author_association":"NONE","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#issuecomment-336290357","updated_at":"2017-10-12T22:12:23Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/orgs","url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D","events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/events{\/privacy}","html_url":"https:\/\/github.com\/apps\/pastamaker","subscriptions_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/subscriptions","avatar_url":"https:\/\/avatars3.githubusercontent.com\/in\/2908?v=4","repos_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/repos","received_events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/starred{\/owner}{\/repo}","site_admin":false,"login":"pastamaker[bot]","type":"Bot","id":29290835,"followers_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/followers"},"id":336290357,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"},{"body":"Pull-request updated, HEAD is now 0937e7980329fb969e31cbcac2905cabc0e2dece","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/336400840","created_at":"2017-10-13T09:28:56Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#issuecomment-336400840","updated_at":"2017-10-13T09:28:56Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"id":336400840,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"},{"body":"Tests FAILURE for HEAD 0937e7980329fb969e31cbcac2905cabc0e2dece\n\n- [TARGET=pep8](https:\/\/api.travis-ci.org\/jobs\/287481108\/log): PASSED\n- [TARGET=docs](https:\/\/api.travis-ci.org\/jobs\/287481109\/log): PASSED\n- [TARGET=docs-gnocchi.xyz](https:\/\/api.travis-ci.org\/jobs\/287481110\/log): FAILED\n- [TARGET=py27-mysql-ceph-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/287481111\/log): PASSED\n- [TARGET=py35-postgresql-file-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/287481112\/log): PASSED\n- [TARGET=py27-mysql-ceph-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/287481113\/log): PASSED\n- [TARGET=py35-postgresql-file-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/287481114\/log): PASSED\n- [TARGET=py27-mysql](https:\/\/api.travis-ci.org\/jobs\/287481116\/log): FAILED\n- [TARGET=py35-mysql](https:\/\/api.travis-ci.org\/jobs\/287481117\/log): FAILED\n- [TARGET=py27-postgresql](https:\/\/api.travis-ci.org\/jobs\/287481118\/log): FAILED\n- [TARGET=py35-postgresql](https:\/\/api.travis-ci.org\/jobs\/287481120\/log): FAILED","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/336403905","created_at":"2017-10-13T09:41:32Z","author_association":"NONE","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#issuecomment-336403905","updated_at":"2017-10-13T09:41:32Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/orgs","url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D","events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/events{\/privacy}","html_url":"https:\/\/github.com\/apps\/pastamaker","subscriptions_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/subscriptions","avatar_url":"https:\/\/avatars3.githubusercontent.com\/in\/2908?v=4","repos_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/repos","received_events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/starred{\/owner}{\/repo}","site_admin":false,"login":"pastamaker[bot]","type":"Bot","id":29290835,"followers_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/followers"},"id":336403905,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"},{"body":"Pull-request updated, HEAD is now 9d0f56f7e4d78587e3f470d26f7bccca269ae812","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/338133415","created_at":"2017-10-20T07:52:30Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#issuecomment-338133415","updated_at":"2017-10-20T07:52:30Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"id":338133415,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"},{"body":"Tests FAILURE for HEAD 9d0f56f7e4d78587e3f470d26f7bccca269ae812\n\n- [TARGET=pep8](https:\/\/api.travis-ci.org\/jobs\/290340246\/log): PASSED\n- [TARGET=docs](https:\/\/api.travis-ci.org\/jobs\/290340247\/log): PASSED\n- [TARGET=docs-gnocchi.xyz](https:\/\/api.travis-ci.org\/jobs\/290340248\/log): FAILED\n- [TARGET=py27-mysql-ceph-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/290340249\/log): PASSED\n- [TARGET=py35-postgresql-file-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/290340250\/log): PASSED\n- [TARGET=py27-mysql-ceph-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/290340251\/log): PASSED\n- [TARGET=py35-postgresql-file-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/290340252\/log): PASSED\n- [TARGET=py27-mysql](https:\/\/api.travis-ci.org\/jobs\/290340253\/log): FAILED\n- [TARGET=py35-mysql](https:\/\/api.travis-ci.org\/jobs\/290340254\/log): FAILED\n- [TARGET=py27-postgresql](https:\/\/api.travis-ci.org\/jobs\/290340255\/log): FAILED\n- [TARGET=py35-postgresql](https:\/\/api.travis-ci.org\/jobs\/290340256\/log): FAILED","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/338137411","created_at":"2017-10-20T08:09:19Z","author_association":"NONE","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#issuecomment-338137411","updated_at":"2017-10-20T08:09:19Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/orgs","url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D","events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/events{\/privacy}","html_url":"https:\/\/github.com\/apps\/pastamaker","subscriptions_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/subscriptions","avatar_url":"https:\/\/avatars3.githubusercontent.com\/in\/2908?v=4","repos_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/repos","received_events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/starred{\/owner}{\/repo}","site_admin":false,"login":"pastamaker[bot]","type":"Bot","id":29290835,"followers_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/followers"},"id":338137411,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"},{"body":"Pull-request updated, HEAD is now 8e272e75b4221f250da98411e2ea0a4b6ca92840","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/338144053","created_at":"2017-10-20T08:38:31Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#issuecomment-338144053","updated_at":"2017-10-20T08:38:31Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"id":338144053,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"},{"body":"Tests FAILURE for HEAD 8e272e75b4221f250da98411e2ea0a4b6ca92840\n\n- [TARGET=pep8](https:\/\/api.travis-ci.org\/jobs\/290352834\/log): PASSED\n- [TARGET=docs](https:\/\/api.travis-ci.org\/jobs\/290352835\/log): PASSED\n- [TARGET=docs-gnocchi.xyz](https:\/\/api.travis-ci.org\/jobs\/290352836\/log): FAILED\n- [TARGET=py27-mysql-ceph-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/290352837\/log): PASSED\n- [TARGET=py35-postgresql-file-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/290352838\/log): PASSED\n- [TARGET=py27-mysql-ceph-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/290352839\/log): PASSED\n- [TARGET=py35-postgresql-file-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/290352840\/log): PASSED\n- [TARGET=py27-mysql](https:\/\/api.travis-ci.org\/jobs\/290352841\/log): FAILED\n- [TARGET=py35-mysql](https:\/\/api.travis-ci.org\/jobs\/290352842\/log): FAILED\n- [TARGET=py27-postgresql](https:\/\/api.travis-ci.org\/jobs\/290352843\/log): FAILED\n- [TARGET=py35-postgresql](https:\/\/api.travis-ci.org\/jobs\/290352844\/log): FAILED","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/338147442","created_at":"2017-10-20T08:53:32Z","author_association":"NONE","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#issuecomment-338147442","updated_at":"2017-10-20T08:53:32Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/orgs","url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D","events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/events{\/privacy}","html_url":"https:\/\/github.com\/apps\/pastamaker","subscriptions_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/subscriptions","avatar_url":"https:\/\/avatars3.githubusercontent.com\/in\/2908?v=4","repos_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/repos","received_events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/starred{\/owner}{\/repo}","site_admin":false,"login":"pastamaker[bot]","type":"Bot","id":29290835,"followers_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/followers"},"id":338147442,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"},{"body":"Pull-request updated, HEAD is now f99b6753007f38f39dd9188df7b4bf0bc32f1c42","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/338148030","created_at":"2017-10-20T08:56:14Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#issuecomment-338148030","updated_at":"2017-10-20T08:56:14Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"id":338148030,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"},{"body":"Tests FAILURE for HEAD f99b6753007f38f39dd9188df7b4bf0bc32f1c42\n\n- [TARGET=pep8](https:\/\/api.travis-ci.org\/jobs\/290358123\/log): PASSED\n- [TARGET=docs](https:\/\/api.travis-ci.org\/jobs\/290358124\/log): PASSED\n- [TARGET=docs-gnocchi.xyz](https:\/\/api.travis-ci.org\/jobs\/290358125\/log): FAILED\n- [TARGET=py27-mysql-ceph-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/290358126\/log): PASSED\n- [TARGET=py35-postgresql-file-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/290358127\/log): PASSED\n- [TARGET=py27-mysql-ceph-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/290358128\/log): PASSED\n- [TARGET=py35-postgresql-file-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/290358129\/log): PASSED\n- [TARGET=py27-mysql](https:\/\/api.travis-ci.org\/jobs\/290358130\/log): FAILED\n- [TARGET=py35-mysql](https:\/\/api.travis-ci.org\/jobs\/290358131\/log): FAILED\n- [TARGET=py27-postgresql](https:\/\/api.travis-ci.org\/jobs\/290358132\/log): FAILED\n- [TARGET=py35-postgresql](https:\/\/api.travis-ci.org\/jobs\/290358133\/log): FAILED","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/338151890","created_at":"2017-10-20T09:13:12Z","author_association":"NONE","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#issuecomment-338151890","updated_at":"2017-10-20T09:13:12Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/orgs","url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D","events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/events{\/privacy}","html_url":"https:\/\/github.com\/apps\/pastamaker","subscriptions_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/subscriptions","avatar_url":"https:\/\/avatars3.githubusercontent.com\/in\/2908?v=4","repos_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/repos","received_events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/starred{\/owner}{\/repo}","site_admin":false,"login":"pastamaker[bot]","type":"Bot","id":29290835,"followers_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/followers"},"id":338151890,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"},{"body":"Pull-request updated, HEAD is now 8b51b875bae96243a73b71d4e0e24b1323578c48","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/338153506","created_at":"2017-10-20T09:19:49Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#issuecomment-338153506","updated_at":"2017-10-20T09:19:49Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"id":338153506,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"},{"body":"Pull-request updated, HEAD is now 4f792c60a681148a646dfa2c478b2c788d8dc737","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/338164199","created_at":"2017-10-20T10:05:09Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#issuecomment-338164199","updated_at":"2017-10-20T10:05:09Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"id":338164199,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"},{"body":"Tests FAILURE for HEAD 4f792c60a681148a646dfa2c478b2c788d8dc737\n\n- [TARGET=pep8](https:\/\/api.travis-ci.org\/jobs\/290383248\/log): PASSED\n- [TARGET=docs](https:\/\/api.travis-ci.org\/jobs\/290383249\/log): PASSED\n- [TARGET=docs-gnocchi.xyz](https:\/\/api.travis-ci.org\/jobs\/290383250\/log): PASSED\n- [TARGET=py27-mysql-ceph-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/290383251\/log): PASSED\n- [TARGET=py35-postgresql-file-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/290383252\/log): PASSED\n- [TARGET=py27-mysql-ceph-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/290383253\/log): PASSED\n- [TARGET=py35-postgresql-file-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/290383254\/log): PASSED\n- [TARGET=py27-mysql](https:\/\/api.travis-ci.org\/jobs\/290383255\/log): FAILED\n- [TARGET=py35-mysql](https:\/\/api.travis-ci.org\/jobs\/290383256\/log): FAILED\n- [TARGET=py27-postgresql](https:\/\/api.travis-ci.org\/jobs\/290383257\/log): FAILED\n- [TARGET=py35-postgresql](https:\/\/api.travis-ci.org\/jobs\/290383258\/log): FAILED","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/338174172","created_at":"2017-10-20T10:53:23Z","author_association":"NONE","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#issuecomment-338174172","updated_at":"2017-10-20T10:53:23Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/orgs","url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D","events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/events{\/privacy}","html_url":"https:\/\/github.com\/apps\/pastamaker","subscriptions_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/subscriptions","avatar_url":"https:\/\/avatars3.githubusercontent.com\/in\/2908?v=4","repos_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/repos","received_events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/starred{\/owner}{\/repo}","site_admin":false,"login":"pastamaker[bot]","type":"Bot","id":29290835,"followers_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/followers"},"id":338174172,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"},{"body":"Pull-request updated, HEAD is now 705a2419495f8f46bba13cbcecca882a410c1de6","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/338174994","created_at":"2017-10-20T10:58:07Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#issuecomment-338174994","updated_at":"2017-10-20T10:58:07Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"id":338174994,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"},{"body":"Pull-request updated, HEAD is now 705a2419495f8f46bba13cbcecca882a410c1de6","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/338175023","created_at":"2017-10-20T10:58:18Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#issuecomment-338175023","updated_at":"2017-10-20T10:58:18Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"id":338175023,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"},{"body":"Pull-request updated, HEAD is now 87c030cfb444743e97af7db151ab9d2aaed9f275","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/338176215","created_at":"2017-10-20T11:04:38Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#issuecomment-338176215","updated_at":"2017-10-20T11:04:38Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"id":338176215,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"},{"body":"Tests ERROR for HEAD 87c030cfb444743e97af7db151ab9d2aaed9f275\n\n- [TARGET=pep8](https:\/\/api.travis-ci.org\/jobs\/290401819\/log): PASSED\n- [TARGET=docs](https:\/\/api.travis-ci.org\/jobs\/290401820\/log): PASSED\n- [TARGET=docs-gnocchi.xyz](https:\/\/api.travis-ci.org\/jobs\/290401821\/log): PASSED\n- [TARGET=py27-mysql-ceph-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/290401822\/log): PASSED\n- [TARGET=py35-postgresql-file-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/290401823\/log): PASSED\n- [TARGET=py27-mysql-ceph-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/290401824\/log): PASSED\n- [TARGET=py35-postgresql-file-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/290401825\/log): PASSED\n- [TARGET=py27-mysql](https:\/\/api.travis-ci.org\/jobs\/290401826\/log): ERRORED\n- [TARGET=py35-mysql](https:\/\/api.travis-ci.org\/jobs\/290401827\/log): ERRORED\n- [TARGET=py27-postgresql](https:\/\/api.travis-ci.org\/jobs\/290401828\/log): PASSED\n- [TARGET=py35-postgresql](https:\/\/api.travis-ci.org\/jobs\/290401829\/log): PASSED","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/338191577","created_at":"2017-10-20T12:23:41Z","author_association":"NONE","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#issuecomment-338191577","updated_at":"2017-10-20T12:23:41Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/orgs","url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D","events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/events{\/privacy}","html_url":"https:\/\/github.com\/apps\/pastamaker","subscriptions_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/subscriptions","avatar_url":"https:\/\/avatars3.githubusercontent.com\/in\/2908?v=4","repos_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/repos","received_events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/starred{\/owner}{\/repo}","site_admin":false,"login":"pastamaker[bot]","type":"Bot","id":29290835,"followers_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/followers"},"id":338191577,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"},{"body":"Tests SUCCESS for HEAD 87c030cfb444743e97af7db151ab9d2aaed9f275\n\n- [TARGET=pep8](https:\/\/api.travis-ci.org\/jobs\/290401819\/log): PASSED\n- [TARGET=docs](https:\/\/api.travis-ci.org\/jobs\/290401820\/log): PASSED\n- [TARGET=docs-gnocchi.xyz](https:\/\/api.travis-ci.org\/jobs\/290401821\/log): PASSED\n- [TARGET=py27-mysql-ceph-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/290401822\/log): PASSED\n- [TARGET=py35-postgresql-file-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/290401823\/log): PASSED\n- [TARGET=py27-mysql-ceph-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/290401824\/log): PASSED\n- [TARGET=py35-postgresql-file-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/290401825\/log): PASSED\n- [TARGET=py27-mysql](https:\/\/api.travis-ci.org\/jobs\/290401826\/log): PASSED\n- [TARGET=py35-mysql](https:\/\/api.travis-ci.org\/jobs\/290401827\/log): PASSED\n- [TARGET=py27-postgresql](https:\/\/api.travis-ci.org\/jobs\/290401828\/log): PASSED\n- [TARGET=py35-postgresql](https:\/\/api.travis-ci.org\/jobs\/290401829\/log): PASSED","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/338214906","created_at":"2017-10-20T13:59:50Z","author_association":"NONE","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#issuecomment-338214906","updated_at":"2017-10-20T13:59:50Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/orgs","url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D","events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/events{\/privacy}","html_url":"https:\/\/github.com\/apps\/pastamaker","subscriptions_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/subscriptions","avatar_url":"https:\/\/avatars3.githubusercontent.com\/in\/2908?v=4","repos_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/repos","received_events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/starred{\/owner}{\/repo}","site_admin":false,"login":"pastamaker[bot]","type":"Bot","id":29290835,"followers_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/followers"},"id":338214906,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"},{"body":"","commit_id":"87c030cfb444743e97af7db151ab9d2aaed9f275","submitted_at":"2017-10-20T14:44:40Z","created_at":"2017-10-20T14:44:40Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#pullrequestreview-70865098","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/409","state":"DISMISSED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#pullrequestreview-70865098"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/409"}},"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"id":70865098},{"body":"Pull-request updated, HEAD is now 434a19bed330b1363a763d69ca1a1b8c07e144f5","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/338795462","created_at":"2017-10-23T21:01:27Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#issuecomment-338795462","updated_at":"2017-10-23T21:01:27Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"id":338795462,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"},{"body":"Tests ERROR for HEAD 434a19bed330b1363a763d69ca1a1b8c07e144f5\n\n- [TARGET=pep8](https:\/\/api.travis-ci.org\/jobs\/291757252\/log): PASSED\n- [TARGET=docs](https:\/\/api.travis-ci.org\/jobs\/291757253\/log): PASSED\n- [TARGET=docs-gnocchi.xyz](https:\/\/api.travis-ci.org\/jobs\/291757254\/log): PASSED\n- [TARGET=py27-mysql-ceph-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/291757255\/log): PASSED\n- [TARGET=py35-postgresql-file-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/291757256\/log): PASSED\n- [TARGET=py27-mysql-ceph-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/291757257\/log): PASSED\n- [TARGET=py35-postgresql-file-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/291757258\/log): PASSED\n- [TARGET=py27-mysql](https:\/\/api.travis-ci.org\/jobs\/291757259\/log): ERRORED\n- [TARGET=py35-mysql](https:\/\/api.travis-ci.org\/jobs\/291757260\/log): ERRORED\n- [TARGET=py27-postgresql](https:\/\/api.travis-ci.org\/jobs\/291757261\/log): FAILED\n- [TARGET=py35-postgresql](https:\/\/api.travis-ci.org\/jobs\/291757262\/log): FAILED","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/338808905","created_at":"2017-10-23T21:57:21Z","author_association":"NONE","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#issuecomment-338808905","updated_at":"2017-10-23T21:57:21Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/orgs","url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D","events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/events{\/privacy}","html_url":"https:\/\/github.com\/apps\/pastamaker","subscriptions_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/subscriptions","avatar_url":"https:\/\/avatars3.githubusercontent.com\/in\/2908?v=4","repos_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/repos","received_events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/starred{\/owner}{\/repo}","site_admin":false,"login":"pastamaker[bot]","type":"Bot","id":29290835,"followers_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/followers"},"id":338808905,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"},{"body":"Pull-request updated, HEAD is now e3148d9eef4f210141bc808fb913d6b0c98094ab","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/349336167","created_at":"2017-12-05T15:20:57Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#issuecomment-349336167","updated_at":"2017-12-05T15:20:57Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"id":349336167,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"},{"body":"Tests FAILURE for HEAD e3148d9eef4f210141bc808fb913d6b0c98094ab\n\n- [TARGET=pep8](https:\/\/api.travis-ci.org\/jobs\/311912593\/log): PASSED\n- [TARGET=docs](https:\/\/api.travis-ci.org\/jobs\/311912594\/log): PASSED\n- [TARGET=docs-gnocchi.xyz](https:\/\/api.travis-ci.org\/jobs\/311912595\/log): PASSED\n- [TARGET=py27-mysql-ceph-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/311912596\/log): PASSED\n- [TARGET=py35-postgresql-file-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/311912597\/log): PASSED\n- [TARGET=py27-mysql-ceph-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/311912598\/log): PASSED\n- [TARGET=py35-postgresql-file-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/311912599\/log): PASSED\n- [TARGET=py27-mysql-ceph-upgrade-from-4.1](https:\/\/api.travis-ci.org\/jobs\/311912600\/log): PASSED\n- [TARGET=py35-postgresql-file-upgrade-from-4.1](https:\/\/api.travis-ci.org\/jobs\/311912601\/log): PASSED\n- [TARGET=py27-mysql](https:\/\/api.travis-ci.org\/jobs\/311912603\/log): FAILED\n- [TARGET=py35-mysql](https:\/\/api.travis-ci.org\/jobs\/311912604\/log): FAILED\n- [TARGET=py27-postgresql](https:\/\/api.travis-ci.org\/jobs\/311912605\/log): FAILED\n- [TARGET=py35-postgresql](https:\/\/api.travis-ci.org\/jobs\/311912606\/log): FAILED","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/349342913","created_at":"2017-12-05T15:40:39Z","author_association":"NONE","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#issuecomment-349342913","updated_at":"2017-12-05T15:40:39Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/orgs","url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D","events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/events{\/privacy}","html_url":"https:\/\/github.com\/apps\/pastamaker","subscriptions_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/subscriptions","avatar_url":"https:\/\/avatars3.githubusercontent.com\/in\/2908?v=4","repos_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/repos","received_events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/starred{\/owner}{\/repo}","site_admin":false,"login":"pastamaker[bot]","type":"Bot","id":29290835,"followers_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/followers"},"id":349342913,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"},{"body":"Pull-request updated, HEAD is now d9a659d541b1a2b3674e538b2cd4cc2f0ad836ea","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/349569153","created_at":"2017-12-06T08:27:44Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#issuecomment-349569153","updated_at":"2017-12-06T08:27:44Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"id":349569153,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"},{"body":"Tests ERROR for HEAD d9a659d541b1a2b3674e538b2cd4cc2f0ad836ea\n\n- [TARGET=pep8](https:\/\/api.travis-ci.org\/jobs\/312294130\/log): PASSED\n- [TARGET=docs](https:\/\/api.travis-ci.org\/jobs\/312294131\/log): PASSED\n- [TARGET=docs-gnocchi.xyz](https:\/\/api.travis-ci.org\/jobs\/312294132\/log): PASSED\n- [TARGET=py27-mysql-ceph-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/312294133\/log): ERRORED\n- [TARGET=py35-postgresql-file-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/312294134\/log): PASSED\n- [TARGET=py27-mysql-ceph-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/312294135\/log): PASSED\n- [TARGET=py35-postgresql-file-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/312294136\/log): PASSED\n- [TARGET=py27-mysql-ceph-upgrade-from-4.1](https:\/\/api.travis-ci.org\/jobs\/312294137\/log): FAILED\n- [TARGET=py35-postgresql-file-upgrade-from-4.1](https:\/\/api.travis-ci.org\/jobs\/312294138\/log): PASSED\n- [TARGET=py27-mysql](https:\/\/api.travis-ci.org\/jobs\/312294139\/log): ERRORED\n- [TARGET=py35-mysql](https:\/\/api.travis-ci.org\/jobs\/312294140\/log): FAILED\n- [TARGET=py27-postgresql](https:\/\/api.travis-ci.org\/jobs\/312294141\/log): FAILED\n- [TARGET=py35-postgresql](https:\/\/api.travis-ci.org\/jobs\/312294142\/log): FAILED","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/349582628","created_at":"2017-12-06T09:26:31Z","author_association":"NONE","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#issuecomment-349582628","updated_at":"2017-12-06T09:26:31Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/orgs","url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D","events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/events{\/privacy}","html_url":"https:\/\/github.com\/apps\/pastamaker","subscriptions_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/subscriptions","avatar_url":"https:\/\/avatars3.githubusercontent.com\/in\/2908?v=4","repos_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/repos","received_events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/starred{\/owner}{\/repo}","site_admin":false,"login":"pastamaker[bot]","type":"Bot","id":29290835,"followers_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/followers"},"id":349582628,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"},{"body":"Tests ERROR for HEAD d9a659d541b1a2b3674e538b2cd4cc2f0ad836ea\n\n- [TARGET=pep8](https:\/\/api.travis-ci.org\/jobs\/312294130\/log): PASSED\n- [TARGET=docs](https:\/\/api.travis-ci.org\/jobs\/312294131\/log): PASSED\n- [TARGET=docs-gnocchi.xyz](https:\/\/api.travis-ci.org\/jobs\/312294132\/log): PASSED\n- [TARGET=py27-mysql-ceph-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/312294133\/log): PASSED\n- [TARGET=py35-postgresql-file-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/312294134\/log): PASSED\n- [TARGET=py27-mysql-ceph-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/312294135\/log): PASSED\n- [TARGET=py35-postgresql-file-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/312294136\/log): PASSED\n- [TARGET=py27-mysql-ceph-upgrade-from-4.1](https:\/\/api.travis-ci.org\/jobs\/312294137\/log): FAILED\n- [TARGET=py35-postgresql-file-upgrade-from-4.1](https:\/\/api.travis-ci.org\/jobs\/312294138\/log): PASSED\n- [TARGET=py27-mysql](https:\/\/api.travis-ci.org\/jobs\/312294139\/log): ERRORED\n- [TARGET=py35-mysql](https:\/\/api.travis-ci.org\/jobs\/312294140\/log): FAILED\n- [TARGET=py27-postgresql](https:\/\/api.travis-ci.org\/jobs\/312294141\/log): FAILED\n- [TARGET=py35-postgresql](https:\/\/api.travis-ci.org\/jobs\/312294142\/log): FAILED","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/349802012","created_at":"2017-12-06T22:53:29Z","author_association":"NONE","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409#issuecomment-349802012","updated_at":"2017-12-06T22:53:29Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/orgs","url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D","events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/events{\/privacy}","html_url":"https:\/\/github.com\/apps\/pastamaker","subscriptions_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/subscriptions","avatar_url":"https:\/\/avatars3.githubusercontent.com\/in\/2908?v=4","repos_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/repos","received_events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/starred{\/owner}{\/repo}","site_admin":false,"login":"pastamaker[bot]","type":"Bot","id":29290835,"followers_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/followers"},"id":349802012,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/409"}],"pastamaker_approvals":[[],[],2,[0,1]],"patch_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/409.patch","changed_files":11,"user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"}},{"deletions":2,"pastamaker_combined_status":"failure","merge_commit_sha":"789cc1cec8cc640deb906015eb2835445827c8b7","additions":14,"labels":[],"number":743,"pastamaker_travis_state":"success","assignee":null,"commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/743\/commits","mergeable":true,"closed_at":null,"requested_reviewers":[],"statuses_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/statuses\/6912651dd671975a01c798950c78bdeb0c61e0f3","id":169242070,"maintainer_can_modify":true,"title":"add telemetry logging","comments":2,"merged_at":null,"state":"open","_links":{"review_comment":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/comments{\/number}"},"commits":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/743\/commits"},"self":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/743"},"comments":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/743\/comments"},"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/743"},"review_comments":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/743\/comments"},"issue":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/743"},"statuses":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/statuses\/6912651dd671975a01c798950c78bdeb0c61e0f3"}},"pastamaker_reviews":[{"body":"","commit_id":"6912651dd671975a01c798950c78bdeb0c61e0f3","submitted_at":"2018-02-15T07:35:47Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/743#pullrequestreview-96754948","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/743","state":"APPROVED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/743#pullrequestreview-96754948"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/743"}},"user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"id":96754948},{"body":"","commit_id":"6912651dd671975a01c798950c78bdeb0c61e0f3","submitted_at":"2018-02-15T08:14:11Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/743#pullrequestreview-96761138","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/743","state":"CHANGES_REQUESTED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/743#pullrequestreview-96761138"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/743"}},"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"id":96761138},{"body":"","commit_id":"6912651dd671975a01c798950c78bdeb0c61e0f3","submitted_at":"2018-02-15T14:29:18Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/743#pullrequestreview-96865229","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/743","state":"COMMENTED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/743#pullrequestreview-96865229"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/743"}},"user":{"following_url":"https:\/\/api.github.com\/users\/chungg\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/chungg\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/chungg\/orgs","url":"https:\/\/api.github.com\/users\/chungg","events_url":"https:\/\/api.github.com\/users\/chungg\/events{\/privacy}","html_url":"https:\/\/github.com\/chungg","subscriptions_url":"https:\/\/api.github.com\/users\/chungg\/subscriptions","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/5091603?v=4","repos_url":"https:\/\/api.github.com\/users\/chungg\/repos","received_events_url":"https:\/\/api.github.com\/users\/chungg\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/chungg\/starred{\/owner}{\/repo}","site_admin":false,"login":"chungg","type":"User","id":5091603,"followers_url":"https:\/\/api.github.com\/users\/chungg\/followers"},"id":96865229},{"body":"","commit_id":"6912651dd671975a01c798950c78bdeb0c61e0f3","submitted_at":"2018-02-15T14:38:53Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/743#pullrequestreview-96867235","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/743","state":"CHANGES_REQUESTED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/743#pullrequestreview-96867235"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/743"}},"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"id":96867235},{"body":"","commit_id":"6912651dd671975a01c798950c78bdeb0c61e0f3","submitted_at":"2018-02-15T16:13:00Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/743#pullrequestreview-96906739","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/743","state":"COMMENTED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/743#pullrequestreview-96906739"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/743"}},"user":{"following_url":"https:\/\/api.github.com\/users\/chungg\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/chungg\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/chungg\/orgs","url":"https:\/\/api.github.com\/users\/chungg","events_url":"https:\/\/api.github.com\/users\/chungg\/events{\/privacy}","html_url":"https:\/\/github.com\/chungg","subscriptions_url":"https:\/\/api.github.com\/users\/chungg\/subscriptions","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/5091603?v=4","repos_url":"https:\/\/api.github.com\/users\/chungg\/repos","received_events_url":"https:\/\/api.github.com\/users\/chungg\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/chungg\/starred{\/owner}{\/repo}","site_admin":false,"login":"chungg","type":"User","id":5091603,"followers_url":"https:\/\/api.github.com\/users\/chungg\/followers"},"id":96906739},{"body":"","commit_id":"6912651dd671975a01c798950c78bdeb0c61e0f3","submitted_at":"2018-02-15T16:15:13Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/743#pullrequestreview-96907731","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/743","state":"COMMENTED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/743#pullrequestreview-96907731"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/743"}},"user":{"following_url":"https:\/\/api.github.com\/users\/chungg\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/chungg\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/chungg\/orgs","url":"https:\/\/api.github.com\/users\/chungg","events_url":"https:\/\/api.github.com\/users\/chungg\/events{\/privacy}","html_url":"https:\/\/github.com\/chungg","subscriptions_url":"https:\/\/api.github.com\/users\/chungg\/subscriptions","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/5091603?v=4","repos_url":"https:\/\/api.github.com\/users\/chungg\/repos","received_events_url":"https:\/\/api.github.com\/users\/chungg\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/chungg\/starred{\/owner}{\/repo}","site_admin":false,"login":"chungg","type":"User","id":5091603,"followers_url":"https:\/\/api.github.com\/users\/chungg\/followers"},"id":96907731},{"body":"","commit_id":"6912651dd671975a01c798950c78bdeb0c61e0f3","submitted_at":"2018-02-15T16:24:19Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/743#pullrequestreview-96911492","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/743","state":"COMMENTED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/743#pullrequestreview-96911492"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/743"}},"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"id":96911492},{"body":"","commit_id":"6912651dd671975a01c798950c78bdeb0c61e0f3","submitted_at":"2018-02-15T22:17:57Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/743#pullrequestreview-97027079","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/743","state":"COMMENTED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/743#pullrequestreview-97027079"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/743"}},"user":{"following_url":"https:\/\/api.github.com\/users\/chungg\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/chungg\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/chungg\/orgs","url":"https:\/\/api.github.com\/users\/chungg","events_url":"https:\/\/api.github.com\/users\/chungg\/events{\/privacy}","html_url":"https:\/\/github.com\/chungg","subscriptions_url":"https:\/\/api.github.com\/users\/chungg\/subscriptions","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/5091603?v=4","repos_url":"https:\/\/api.github.com\/users\/chungg\/repos","received_events_url":"https:\/\/api.github.com\/users\/chungg\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/chungg\/starred{\/owner}{\/repo}","site_admin":false,"login":"chungg","type":"User","id":5091603,"followers_url":"https:\/\/api.github.com\/users\/chungg\/followers"},"id":97027079}],"pastamaker_commits":[{"files":[{"status":"modified","deletions":2,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/6912651dd671975a01c798950c78bdeb0c61e0f3\/gnocchi\/storage\/__init__.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/6912651dd671975a01c798950c78bdeb0c61e0f3\/gnocchi\/storage\/__init__.py","changes":16,"filename":"gnocchi\/storage\/__init__.py","sha":"d27c4f4080fe7e9828c6adcedb0ecee8d25b8810","additions":14,"patch":"@@ -31,6 +31,10 @@\n     cfg.StrOpt('driver',\n                default='file',\n                help='Storage driver to use'),\n+    cfg.BoolOpt('enable_telemetry', default=True,\n+                help='Occasionally logs stats regarding service health. '\n+                     'Details should be reported to developers at '\n+                     'https:\/\/github.com\/gnocchixyz\/gnocchi\/issues'),\n ]\n \n \n@@ -106,8 +110,8 @@ def get_driver(conf):\n \n class StorageDriver(object):\n \n-    @staticmethod\n-    def __init__(conf):\n+    def __init__(self, conf):\n+        self.enable_telemetry = conf.enable_telemetry\n         pass\n \n     @staticmethod\n@@ -443,6 +447,14 @@ def compute_and_store_timeseries(self, metric, measures):\n             current_first_block_timestamp = None\n         else:\n             current_first_block_timestamp = ts.first_block_timestamp()\n+            # log if backwindow is larger than ~4MB to anticipate potential\n+            # performance issue\n+            if self.enable_telemetry and ts.ts.size > 320000:\n+                LOG.warning(\"TELEMETRY: The defined backwindow size for \"\n+                            \"metric %s may negatively affect performance: \"\n+                            \"(size: %s, back_window: %s, granularities: %s)\",\n+                            metric.id, ts.ts.size, back_window,\n+                            [d.granularity for d in definition])\n \n         # NOTE(jd) This is Python where you need such\n         # hack to pass a variable around a closure,","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/storage\/__init__.py?ref=6912651dd671975a01c798950c78bdeb0c61e0f3"}],"committer":{"following_url":"https:\/\/api.github.com\/users\/chungg\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/chungg\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/chungg\/orgs","url":"https:\/\/api.github.com\/users\/chungg","events_url":"https:\/\/api.github.com\/users\/chungg\/events{\/privacy}","html_url":"https:\/\/github.com\/chungg","subscriptions_url":"https:\/\/api.github.com\/users\/chungg\/subscriptions","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/5091603?v=4","repos_url":"https:\/\/api.github.com\/users\/chungg\/repos","received_events_url":"https:\/\/api.github.com\/users\/chungg\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/chungg\/starred{\/owner}{\/repo}","site_admin":false,"login":"chungg","type":"User","id":5091603,"followers_url":"https:\/\/api.github.com\/users\/chungg\/followers"},"stats":{"deletions":2,"additions":14,"total":16},"author":{"following_url":"https:\/\/api.github.com\/users\/chungg\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/chungg\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/chungg\/orgs","url":"https:\/\/api.github.com\/users\/chungg","events_url":"https:\/\/api.github.com\/users\/chungg\/events{\/privacy}","html_url":"https:\/\/github.com\/chungg","subscriptions_url":"https:\/\/api.github.com\/users\/chungg\/subscriptions","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/5091603?v=4","repos_url":"https:\/\/api.github.com\/users\/chungg\/repos","received_events_url":"https:\/\/api.github.com\/users\/chungg\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/chungg\/starred{\/owner}{\/repo}","site_admin":false,"login":"chungg","type":"User","id":5091603,"followers_url":"https:\/\/api.github.com\/users\/chungg\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/6912651dd671975a01c798950c78bdeb0c61e0f3","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/6912651dd671975a01c798950c78bdeb0c61e0f3\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/6912651dd671975a01c798950c78bdeb0c61e0f3","sha":"6912651dd671975a01c798950c78bdeb0c61e0f3","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/413b380a63c0def914825c01ff6834e5e3f202e8","sha":"413b380a63c0def914825c01ff6834e5e3f202e8","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/413b380a63c0def914825c01ff6834e5e3f202e8"}],"commit":{"committer":{"date":"2018-02-14T22:24:59Z","name":"gord chung","email":"gord@live.ca"},"author":{"date":"2018-02-14T21:53:28Z","name":"gord chung","email":"gord@live.ca"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/6912651dd671975a01c798950c78bdeb0c61e0f3","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/deb0e02dbf3774c699e360672dd9dbf0d44b9aa4","sha":"deb0e02dbf3774c699e360672dd9dbf0d44b9aa4"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"add telemetry logging\n\nwarn if backwindow is ~4MB. 4MB is based on default object size\nused in ceph rados bench tool. 12.6B\/point used as average size\nbased on existing BoundTimeSerie random benchmark."}}],"diff_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/743.diff","pastamaker_ci_statuses":{},"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/743","body":"warn if backwindow is ~4MB. 4MB is based on default object size\r\nused in ceph rados bench tool. 12.6B\/point used as average size\r\nbased on existing BoundTimeSerie random benchmark.","head":{"repo":{"issues_url":"https:\/\/api.github.com\/repos\/chungg\/gnocchi\/issues{\/number}","deployments_url":"https:\/\/api.github.com\/repos\/chungg\/gnocchi\/deployments","has_wiki":true,"forks_url":"https:\/\/api.github.com\/repos\/chungg\/gnocchi\/forks","mirror_url":null,"issue_events_url":"https:\/\/api.github.com\/repos\/chungg\/gnocchi\/issues\/events{\/number}","subscription_url":"https:\/\/api.github.com\/repos\/chungg\/gnocchi\/subscription","merges_url":"https:\/\/api.github.com\/repos\/chungg\/gnocchi\/merges","collaborators_url":"https:\/\/api.github.com\/repos\/chungg\/gnocchi\/collaborators{\/collaborator}","updated_at":"2017-05-23T12:27:11Z","private":false,"pulls_url":"https:\/\/api.github.com\/repos\/chungg\/gnocchi\/pulls{\/number}","owner":{"following_url":"https:\/\/api.github.com\/users\/chungg\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/chungg\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/chungg\/orgs","url":"https:\/\/api.github.com\/users\/chungg","events_url":"https:\/\/api.github.com\/users\/chungg\/events{\/privacy}","html_url":"https:\/\/github.com\/chungg","subscriptions_url":"https:\/\/api.github.com\/users\/chungg\/subscriptions","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/5091603?v=4","repos_url":"https:\/\/api.github.com\/users\/chungg\/repos","received_events_url":"https:\/\/api.github.com\/users\/chungg\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/chungg\/starred{\/owner}{\/repo}","site_admin":false,"login":"chungg","type":"User","id":5091603,"followers_url":"https:\/\/api.github.com\/users\/chungg\/followers"},"trees_url":"https:\/\/api.github.com\/repos\/chungg\/gnocchi\/git\/trees{\/sha}","full_name":"chungg\/gnocchi","issue_comment_url":"https:\/\/api.github.com\/repos\/chungg\/gnocchi\/issues\/comments{\/number}","statuses_url":"https:\/\/api.github.com\/repos\/chungg\/gnocchi\/statuses\/{sha}","id":92168625,"keys_url":"https:\/\/api.github.com\/repos\/chungg\/gnocchi\/keys{\/key_id}","size":4365,"tags_url":"https:\/\/api.github.com\/repos\/chungg\/gnocchi\/tags","archived":false,"downloads_url":"https:\/\/api.github.com\/repos\/chungg\/gnocchi\/downloads","assignees_url":"https:\/\/api.github.com\/repos\/chungg\/gnocchi\/assignees{\/user}","contents_url":"https:\/\/api.github.com\/repos\/chungg\/gnocchi\/contents\/{+path}","has_pages":false,"git_refs_url":"https:\/\/api.github.com\/repos\/chungg\/gnocchi\/git\/refs{\/sha}","has_projects":true,"clone_url":"https:\/\/github.com\/chungg\/gnocchi.git","watchers_count":0,"git_tags_url":"https:\/\/api.github.com\/repos\/chungg\/gnocchi\/git\/tags{\/sha}","milestones_url":"https:\/\/api.github.com\/repos\/chungg\/gnocchi\/milestones{\/number}","stargazers_count":0,"comments_url":"https:\/\/api.github.com\/repos\/chungg\/gnocchi\/comments{\/number}","homepage":null,"branches_url":"https:\/\/api.github.com\/repos\/chungg\/gnocchi\/branches{\/branch}","fork":true,"commits_url":"https:\/\/api.github.com\/repos\/chungg\/gnocchi\/commits{\/sha}","releases_url":"https:\/\/api.github.com\/repos\/chungg\/gnocchi\/releases{\/id}","description":"Timeseries database","has_downloads":true,"labels_url":"https:\/\/api.github.com\/repos\/chungg\/gnocchi\/labels{\/name}","events_url":"https:\/\/api.github.com\/repos\/chungg\/gnocchi\/events","contributors_url":"https:\/\/api.github.com\/repos\/chungg\/gnocchi\/contributors","html_url":"https:\/\/github.com\/chungg\/gnocchi","compare_url":"https:\/\/api.github.com\/repos\/chungg\/gnocchi\/compare\/{base}...{head}","language":"Python","git_url":"git:\/\/github.com\/chungg\/gnocchi.git","svn_url":"https:\/\/github.com\/chungg\/gnocchi","notifications_url":"https:\/\/api.github.com\/repos\/chungg\/gnocchi\/notifications{?since,all,participating}","has_issues":false,"ssh_url":"git@github.com:chungg\/gnocchi.git","blobs_url":"https:\/\/api.github.com\/repos\/chungg\/gnocchi\/git\/blobs{\/sha}","forks":0,"hooks_url":"https:\/\/api.github.com\/repos\/chungg\/gnocchi\/hooks","open_issues_count":0,"watchers":0,"name":"gnocchi","license":null,"url":"https:\/\/api.github.com\/repos\/chungg\/gnocchi","created_at":"2017-05-23T12:09:19Z","archive_url":"https:\/\/api.github.com\/repos\/chungg\/gnocchi\/{archive_format}{\/ref}","pushed_at":"2018-02-14T22:25:55Z","forks_count":0,"default_branch":"master","teams_url":"https:\/\/api.github.com\/repos\/chungg\/gnocchi\/teams","open_issues":0,"languages_url":"https:\/\/api.github.com\/repos\/chungg\/gnocchi\/languages","git_commits_url":"https:\/\/api.github.com\/repos\/chungg\/gnocchi\/git\/commits{\/sha}","subscribers_url":"https:\/\/api.github.com\/repos\/chungg\/gnocchi\/subscribers","stargazers_url":"https:\/\/api.github.com\/repos\/chungg\/gnocchi\/stargazers"},"sha":"6912651dd671975a01c798950c78bdeb0c61e0f3","ref":"telemetry","user":{"following_url":"https:\/\/api.github.com\/users\/chungg\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/chungg\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/chungg\/orgs","url":"https:\/\/api.github.com\/users\/chungg","events_url":"https:\/\/api.github.com\/users\/chungg\/events{\/privacy}","html_url":"https:\/\/github.com\/chungg","subscriptions_url":"https:\/\/api.github.com\/users\/chungg\/subscriptions","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/5091603?v=4","repos_url":"https:\/\/api.github.com\/users\/chungg\/repos","received_events_url":"https:\/\/api.github.com\/users\/chungg\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/chungg\/starred{\/owner}{\/repo}","site_admin":false,"login":"chungg","type":"User","id":5091603,"followers_url":"https:\/\/api.github.com\/users\/chungg\/followers"},"label":"chungg:telemetry"},"pastamaker_weight":-1,"commits":1,"author_association":"OWNER","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/743\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/743","pastamaker_travis_url":"https:\/\/travis-ci.org\/gnocchixyz\/gnocchi\/builds\/341659388?utm_source=github_status&utm_medium=notification","updated_at":"2018-02-15T22:17:57Z","pastamaker_approved":false,"base":{"repo":{"issues_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues{\/number}","deployments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/deployments","has_wiki":false,"forks_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/forks","mirror_url":null,"issue_events_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/events{\/number}","subscription_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/subscription","merges_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/merges","collaborators_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/collaborators{\/collaborator}","updated_at":"2018-02-14T14:59:22Z","private":false,"pulls_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls{\/number}","owner":{"following_url":"https:\/\/api.github.com\/users\/gnocchixyz\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/gnocchixyz\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/gnocchixyz\/orgs","url":"https:\/\/api.github.com\/users\/gnocchixyz","events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/events{\/privacy}","html_url":"https:\/\/github.com\/gnocchixyz","subscriptions_url":"https:\/\/api.github.com\/users\/gnocchixyz\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/26142905?v=4","repos_url":"https:\/\/api.github.com\/users\/gnocchixyz\/repos","received_events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/gnocchixyz\/starred{\/owner}{\/repo}","site_admin":false,"login":"gnocchixyz","type":"Organization","id":26142905,"followers_url":"https:\/\/api.github.com\/users\/gnocchixyz\/followers"},"trees_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees{\/sha}","full_name":"gnocchixyz\/gnocchi","issue_comment_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments{\/number}","statuses_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/statuses\/{sha}","id":91715647,"keys_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/keys{\/key_id}","size":4749,"tags_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/tags","archived":false,"downloads_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/downloads","assignees_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/assignees{\/user}","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/{+path}","has_pages":false,"git_refs_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/refs{\/sha}","has_projects":false,"clone_url":"https:\/\/github.com\/gnocchixyz\/gnocchi.git","watchers_count":123,"git_tags_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/tags{\/sha}","milestones_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/milestones{\/number}","stargazers_count":123,"comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/comments{\/number}","homepage":null,"branches_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/branches{\/branch}","fork":false,"commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits{\/sha}","releases_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/releases{\/id}","description":"Timeseries database","has_downloads":true,"labels_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/labels{\/name}","events_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/events","contributors_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contributors","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi","compare_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/compare\/{base}...{head}","language":"Python","git_url":"git:\/\/github.com\/gnocchixyz\/gnocchi.git","svn_url":"https:\/\/github.com\/gnocchixyz\/gnocchi","notifications_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/notifications{?since,all,participating}","has_issues":true,"ssh_url":"git@github.com:gnocchixyz\/gnocchi.git","blobs_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/blobs{\/sha}","forks":29,"hooks_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/hooks","open_issues_count":51,"watchers":123,"name":"gnocchi","license":{"spdx_id":"Apache-2.0","url":"https:\/\/api.github.com\/licenses\/apache-2.0","name":"Apache License 2.0","key":"apache-2.0"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi","created_at":"2017-05-18T16:32:52Z","archive_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/{archive_format}{\/ref}","pushed_at":"2018-02-15T17:33:56Z","forks_count":29,"default_branch":"master","teams_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/teams","open_issues":51,"languages_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/languages","git_commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits{\/sha}","subscribers_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/subscribers","stargazers_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/stargazers"},"sha":"413b380a63c0def914825c01ff6834e5e3f202e8","ref":"master","user":{"following_url":"https:\/\/api.github.com\/users\/gnocchixyz\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/gnocchixyz\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/gnocchixyz\/orgs","url":"https:\/\/api.github.com\/users\/gnocchixyz","events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/events{\/privacy}","html_url":"https:\/\/github.com\/gnocchixyz","subscriptions_url":"https:\/\/api.github.com\/users\/gnocchixyz\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/26142905?v=4","repos_url":"https:\/\/api.github.com\/users\/gnocchixyz\/repos","received_events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/gnocchixyz\/starred{\/owner}{\/repo}","site_admin":false,"login":"gnocchixyz","type":"Organization","id":26142905,"followers_url":"https:\/\/api.github.com\/users\/gnocchixyz\/followers"},"label":"gnocchixyz:master"},"rebaseable":true,"milestone":null,"pastamaker_travis_detail":{"commit_id":101593454,"repository_id":13523406,"jobs":[{"build_id":341659388,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/341659389\/log","number":"2236.1","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":101593454,"finished_at":"2018-02-14T22:43:14Z","started_at":"2018-02-14T22:41:04Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=pep8"},"id":341659389},{"build_id":341659388,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/341659390\/log","number":"2236.2","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":101593454,"finished_at":"2018-02-14T22:45:17Z","started_at":"2018-02-14T22:40:57Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=docs"},"id":341659390},{"build_id":341659388,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/341659391\/log","number":"2236.3","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":101593454,"finished_at":"2018-02-14T22:47:32Z","started_at":"2018-02-14T22:41:06Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=docs-gnocchi.xyz"},"id":341659391},{"build_id":341659388,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/341659392\/log","number":"2236.4","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":101593454,"finished_at":"2018-02-14T22:46:44Z","started_at":"2018-02-14T22:40:56Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-mysql-ceph-upgrade-from-4.0"},"id":341659392},{"build_id":341659388,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/341659393\/log","number":"2236.5","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":101593454,"finished_at":"2018-02-14T22:47:29Z","started_at":"2018-02-14T22:41:03Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-postgresql-file-upgrade-from-4.0"},"id":341659393},{"build_id":341659388,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/341659394\/log","number":"2236.6","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":101593454,"finished_at":"2018-02-14T22:50:02Z","started_at":"2018-02-14T22:43:48Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-mysql-ceph-upgrade-from-4.1"},"id":341659394},{"build_id":341659388,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/341659395\/log","number":"2236.7","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":101593454,"finished_at":"2018-02-14T22:52:16Z","started_at":"2018-02-14T22:45:48Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-postgresql-file-upgrade-from-4.1"},"id":341659395},{"build_id":341659388,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/341659396\/log","number":"2236.8","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":101593454,"finished_at":"2018-02-14T22:54:00Z","started_at":"2018-02-14T22:47:14Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-mysql-ceph-upgrade-from-4.2"},"id":341659396},{"build_id":341659388,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/341659397\/log","number":"2236.9","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":101593454,"finished_at":"2018-02-14T22:54:34Z","started_at":"2018-02-14T22:47:59Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-postgresql-file-upgrade-from-4.2"},"id":341659397},{"build_id":341659388,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/341659398\/log","number":"2236.10","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":101593454,"finished_at":"2018-02-14T23:17:34Z","started_at":"2018-02-14T22:48:08Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-mysql"},"id":341659398},{"build_id":341659388,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/341659399\/log","number":"2236.11","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":101593454,"finished_at":"2018-02-14T23:21:13Z","started_at":"2018-02-14T22:50:32Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-mysql"},"id":341659399},{"build_id":341659388,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/341659400\/log","number":"2236.12","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":101593454,"finished_at":"2018-02-14T23:24:13Z","started_at":"2018-02-14T22:52:47Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-postgresql"},"id":341659400},{"build_id":341659388,"repository_id":13523406,"stage_id":null,"tags":null,"repository_slug":"gnocchixyz\/gnocchi","log_url":"https:\/\/api.travis-ci.org\/jobs\/341659401\/log","number":"2236.13","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":101593454,"finished_at":"2018-02-14T23:25:52Z","started_at":"2018-02-14T22:54:41Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-postgresql"},"id":341659401}],"event_type":"pull_request","finished_at":"2018-02-14T23:25:52Z","number":"2236","job_ids":[341659389,341659390,341659391,341659392,341659393,341659394,341659395,341659396,341659397,341659398,341659399,341659400,341659401],"state":"passed","pull_request_title":"add telemetry logging","pull_request":true,"duration":10437,"started_at":"2018-02-14T22:40:56Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"sudo":"required","group":"stable",".result":"configured","language":"generic","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty","os":"linux","deploy":{"distributions":"sdist bdist_wheel","password":{"secure":"c+Ccx3SHCWepiy0PUxDJ7XO9r3aNYnHjkzxF5c\/kjV8QaCJayAJEgXJnBKhvjroqwgn7JPUgpD6QdSWdB4FqjbZYQ3I3oHOO1YL0vYYa8wHG5HuMsMp4J8qvzgs3QNQDECPI1mXsPevn3VMfGszUN+6BQrHB3FbZsTtOmE+Kmgok5NCT+obsfEhVea\/UOD0XFUkVW9VJhPjQ2ytvYvFIc46\/73GQf2Er\/5DCa\/4GGDEBSD++bDJgp3kQj438xslCAFeZWDwGsa+cTc43PI0Y0+E144ySVY7QyVbZ1B66a1BGWVrXJuM+gW\/eIBCMN1FJXmD7CDdPa22azKI8dfMF7qaH3Oiv3cVovPWpubOvhTUHUFwG8+W7Fx+zUKktCWiLer\/fZvEd3W8tcgby2kNOdcUfKfDB2ImZJ+P694\/OJ4jJ8T5TQerruNoP2OstzcBMon77Ry0XawXR15SZd4JhbqhSi+h7XV6EYmct1UN4zoysA7fx\/cWHcBxdnm2G6R0gzmOiiGUd74ptU8lZ3IlEP6EZckK\/OZOdy1I8EQeUe7aiTooXZDAn07iPkDZliYRr2e36ij\/xjtWCe1AjCksn\/xdKfHOKJv5UVob495DU2GuNObe01ewXzexcnldjfp9Sb8SVEFuhHx6IvH5OC+vAq+BVYu2jwvMcVfXi3VSOkB4="},"true":{"all_branches":true,"tags":true},"user":"jd","provider":"pypi"},"env":["TARGET=pep8","TARGET=docs","TARGET=docs-gnocchi.xyz","TARGET=py27-mysql-ceph-upgrade-from-4.0","TARGET=py35-postgresql-file-upgrade-from-4.0","TARGET=py27-mysql-ceph-upgrade-from-4.1","TARGET=py35-postgresql-file-upgrade-from-4.1","TARGET=py27-mysql-ceph-upgrade-from-4.2","TARGET=py35-postgresql-file-upgrade-from-4.2","TARGET=py27-mysql","TARGET=py35-mysql","TARGET=py27-postgresql","TARGET=py35-postgresql"]},"id":341659388,"pull_request_number":743,"resume_state":"success"},"requested_teams":[],"locked":false,"merged_by":null,"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/743","mergeable_state":"behind","created_at":"2018-02-14T22:40:20Z","merged":false,"review_comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/743\/comments","review_comments":9,"assignees":[],"review_comment_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/comments{\/number}","pastamaker_comments":[],"pastamaker_approvals":[[{"bio":"Free software hacker, devops for a non-profit ISP and swing dancer.","site_admin":false,"updated_at":"2018-02-12T08:20:05Z","gravatar_id":"","hireable":null,"id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers","following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","blog":"http:\/\/blog.sileht.net\/","followers":62,"location":"Toulouse","type":"User","email":"sileht@sileht.net","public_repos":155,"events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","company":"Red Hat","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","public_gists":9,"name":"Mehdi ABAAKOUK","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","created_at":"2010-02-10T08:04:36Z","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","following":2,"login":"sileht"}],[{"bio":"Free Software Hacker, runner, foodie and FPS player.","site_admin":false,"updated_at":"2018-02-01T21:33:04Z","gravatar_id":"","hireable":null,"id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers","following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","blog":"https:\/\/julien.danjou.info\/","followers":303,"location":"Paris, France","type":"User","email":"julien@danjou.info","public_repos":69,"events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","company":null,"gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","public_gists":20,"name":"Julien Danjou","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","created_at":"2008-03-09T19:52:38Z","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","following":23,"login":"jd"}],2,[0]],"patch_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/743.patch","changed_files":1,"user":{"following_url":"https:\/\/api.github.com\/users\/chungg\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/chungg\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/chungg\/orgs","url":"https:\/\/api.github.com\/users\/chungg","events_url":"https:\/\/api.github.com\/users\/chungg\/events{\/privacy}","html_url":"https:\/\/github.com\/chungg","subscriptions_url":"https:\/\/api.github.com\/users\/chungg\/subscriptions","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/5091603?v=4","repos_url":"https:\/\/api.github.com\/users\/chungg\/repos","received_events_url":"https:\/\/api.github.com\/users\/chungg\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/chungg\/starred{\/owner}{\/repo}","site_admin":false,"login":"chungg","type":"User","id":5091603,"followers_url":"https:\/\/api.github.com\/users\/chungg\/followers"}},{"deletions":101,"pastamaker_combined_status":"failure","merge_commit_sha":"c2975320f922853d1c9fb7d15f3f78e3ed1b10b6","additions":507,"number":436,"pastamaker_travis_state":"success","assignee":null,"commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/436\/commits","mergeable":false,"closed_at":null,"requested_reviewers":[],"statuses_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/statuses\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3","id":147751837,"maintainer_can_modify":true,"title":"Allow to rename archive policies","comments":4,"merged_at":null,"state":"open","_links":{"review_comment":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/comments{\/number}"},"commits":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/436\/commits"},"self":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/436"},"comments":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/436\/comments"},"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/436"},"review_comments":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/436\/comments"},"issue":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/436"},"statuses":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/statuses\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3"}},"pastamaker_reviews":[{"body":"","commit_id":"984854677503a6dcdab2d0295102c87192180333","submitted_at":"2017-10-20T18:51:16Z","created_at":"2017-10-20T18:51:16Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/436#pullrequestreview-70933282","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/436","state":"DISMISSED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/436#pullrequestreview-70933282"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/436"}},"user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"id":70933282},{"body":"This is a very good job, thanks @0livd !","commit_id":"12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3","submitted_at":"2017-10-25T09:56:14Z","created_at":"2017-10-25T09:56:14Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/436#pullrequestreview-71801879","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/436","state":"CHANGES_REQUESTED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/436#pullrequestreview-71801879"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/436"}},"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"id":71801879},{"body":"","commit_id":"12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3","submitted_at":"2017-10-27T16:34:49Z","created_at":"2017-10-27T16:34:49Z","author_association":"CONTRIBUTOR","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/436#pullrequestreview-72561756","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/436","state":"COMMENTED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/436#pullrequestreview-72561756"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/436"}},"user":{"following_url":"https:\/\/api.github.com\/users\/0livd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/0livd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/0livd\/orgs","url":"https:\/\/api.github.com\/users\/0livd","events_url":"https:\/\/api.github.com\/users\/0livd\/events{\/privacy}","html_url":"https:\/\/github.com\/0livd","subscriptions_url":"https:\/\/api.github.com\/users\/0livd\/subscriptions","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/24255883?v=4","repos_url":"https:\/\/api.github.com\/users\/0livd\/repos","received_events_url":"https:\/\/api.github.com\/users\/0livd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/0livd\/starred{\/owner}{\/repo}","site_admin":false,"login":"0livd","type":"User","id":24255883,"followers_url":"https:\/\/api.github.com\/users\/0livd\/followers"},"id":72561756}],"pastamaker_commits":[{"files":[{"status":"modified","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\/doc\/source\/rest.j2","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\/doc\/source\/rest.j2","changes":9,"filename":"doc\/source\/rest.j2","sha":"2c4ae8fa854a75efeecc67762247a5c23e0fc6b2","additions":9,"patch":"@@ -242,6 +242,15 @@ not retroactively calculated as backfill to accommodate the new |timespan|:\n    |Granularities| cannot be changed to a different rate. Also, |granularities|\n    cannot be added or dropped from a policy.\n \n+Existing |archive policies| can be renamed:\n+\n+{{ scenarios['rename-archive-policy']['doc'] }}\n+\n+.. note::\n+\n+    The `name` and `definition` parameters can both be specified to update and\n+    rename an |archive policy| within the same PATCH request.\n+\n It is possible to delete an |archive policy| if it is not used by any |metric|:\n \n {{ scenarios['delete-archive-policy']['doc'] }}","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/doc\/source\/rest.j2?ref=12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3"},{"status":"modified","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\/doc\/source\/rest.yaml","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\/doc\/source\/rest.yaml","changes":29,"filename":"doc\/source\/rest.yaml","sha":"552df477317792014f1601de8389236ee62da03f","additions":29,"patch":"@@ -63,6 +63,35 @@\n       ]\n     }\n \n+- name: create-archive-policy-to-rename\n+  request: |\n+    POST \/v1\/archive_policy HTTP\/1.1\n+    Content-Type: application\/json\n+\n+    {\n+      \"name\": \"very-short\",\n+      \"back_window\": 0,\n+      \"definition\": [\n+        {\n+          \"granularity\": \"0.001s\",\n+          \"timespan\": \"1 hour\"\n+        },\n+        {\n+          \"points\": 48,\n+          \"timespan\": \"1 day\"\n+        }\n+      ]\n+    }\n+\n+- name: rename-archive-policy\n+  request: |\n+    PATCH \/v1\/archive_policy\/{{ scenarios['create-archive-policy-to-rename']['response'].json['name'] }} HTTP\/1.1\n+    Content-Type: application\/json\n+\n+    {\n+      \"name\": \"not-so-short\"\n+    }\n+\n - name: create-archive-policy-to-delete\n   request: |\n     POST \/v1\/archive_policy HTTP\/1.1","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/doc\/source\/rest.yaml?ref=12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3"},{"status":"modified","deletions":3,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\/gnocchi\/archive_policy.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\/gnocchi\/archive_policy.py","changes":11,"filename":"gnocchi\/archive_policy.py","sha":"7a634b48c336c5317312a12a57ff93e352f5411b","additions":8,"patch":"@@ -17,6 +17,7 @@\n import collections\n import datetime\n import operator\n+import uuid\n \n import numpy\n from oslo_config import cfg\n@@ -52,7 +53,8 @@ class ArchivePolicy(object):\n                 VALID_AGGREGATION_METHODS)))\n \n     def __init__(self, name, back_window, definition,\n-                 aggregation_methods=None):\n+                 aggregation_methods=None, id=None):\n+        self.id = id or uuid.uuid4()\n         self.name = name\n         self.back_window = back_window\n         self.definition = []\n@@ -119,21 +121,24 @@ def from_dict(cls, d):\n         return cls(d['name'],\n                    d['back_window'],\n                    d['definition'],\n-                   d.get('aggregation_methods'))\n+                   d.get('aggregation_methods'),\n+                   d.get('id'))\n \n     def __eq__(self, other):\n         return (isinstance(other, ArchivePolicy)\n                 and self.name == other.name\n                 and self.back_window == other.back_window\n                 and self.definition == other.definition\n-                and self.aggregation_methods == other.aggregation_methods)\n+                and self.aggregation_methods == other.aggregation_methods\n+                and self.id == other.id)\n \n     def jsonify(self):\n         return {\n             \"name\": self.name,\n             \"back_window\": self.back_window,\n             \"definition\": self.definition,\n             \"aggregation_methods\": self.aggregation_methods,\n+            \"id\": self.id\n         }\n \n     @property","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/archive_policy.py?ref=12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3"},{"status":"modified","deletions":1,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\/gnocchi\/indexer\/__init__.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\/gnocchi\/indexer\/__init__.py","changes":2,"filename":"gnocchi\/indexer\/__init__.py","sha":"3b548a0ea2c16a16aa9b17df58c4f8f9b0440b08","additions":1,"patch":"@@ -416,7 +416,7 @@ def get_archive_policy_for_metric(self, metric_name):\n         rules = self.list_archive_policy_rules()\n         for rule in rules:\n             if fnmatch.fnmatch(metric_name or \"\", rule.metric_pattern):\n-                return self.get_archive_policy(rule.archive_policy_name)\n+                return self.get_archive_policy(id=rule.archive_policy_id)\n         raise NoArchivePolicyRuleMatch(metric_name)\n \n     @staticmethod","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/indexer\/__init__.py?ref=12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3"},{"status":"added","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\/gnocchi\/indexer\/alembic\/versions\/71cfe62bcf98_use_an_id_as_primary_key_for_archive_.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\/gnocchi\/indexer\/alembic\/versions\/71cfe62bcf98_use_an_id_as_primary_key_for_archive_.py","changes":147,"filename":"gnocchi\/indexer\/alembic\/versions\/71cfe62bcf98_use_an_id_as_primary_key_for_archive_.py","sha":"2a651832bef81f5ed72487b56d85e1b0f0841c8a","additions":147,"patch":"@@ -0,0 +1,147 @@\n+# Copyright 2017 The Gnocchi Developers\n+#\n+#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n+#    not use this file except in compliance with the License. You may obtain\n+#    a copy of the License at\n+#\n+#         http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n+#\n+#    Unless required by applicable law or agreed to in writing, software\n+#    distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+#    License for the specific language governing permissions and limitations\n+#    under the License.\n+#\n+\n+\"\"\"Use an id as primary key for archive policy\n+\n+Revision ID: 71cfe62bcf98\n+Revises: 1e1a63d3d186\n+Create Date: 2017-09-24 19:46:22.660503\n+\n+\"\"\"\n+\n+from alembic import op\n+import sqlalchemy as sa\n+import sqlalchemy_utils\n+import uuid\n+\n+\n+# revision identifiers, used by Alembic.\n+revision = '71cfe62bcf98'\n+down_revision = '1e1a63d3d186'\n+branch_labels = None\n+depends_on = None\n+\n+archive_policy_helper = sa.Table(\n+    'archive_policy',\n+    sa.MetaData(),\n+    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(binary=True),\n+              primary_key=True),\n+    sa.Column('name', sa.String(length=255), nullable=False, unique=True),\n+)\n+\n+metric_helper = sa.Table(\n+    'metric',\n+    sa.MetaData(),\n+    sa.Column('archive_policy_id',\n+              sqlalchemy_utils.types.uuid.UUIDType(binary=True)),\n+    sa.Column('archive_policy_name', sa.String(length=255), nullable=False),\n+)\n+\n+apr_helper = sa.Table(\n+    'archive_policy_rule',\n+    sa.MetaData(),\n+    sa.Column('archive_policy_id',\n+              sqlalchemy_utils.types.uuid.UUIDType(binary=True)),\n+    sa.Column('archive_policy_name', sa.String(length=255), nullable=False),\n+)\n+\n+\n+def upgrade():\n+    connection = op.get_bind()\n+    op.add_column('archive_policy',\n+                  sa.Column('id',\n+                            sqlalchemy_utils.types.uuid.UUIDType(\n+                                binary=True),\n+                            nullable=True))\n+    op.add_column('metric',\n+                  sa.Column('archive_policy_id',\n+                            sqlalchemy_utils.types.uuid.UUIDType(\n+                                binary=True),\n+                            nullable=True))\n+    op.add_column('archive_policy_rule',\n+                  sa.Column('archive_policy_id',\n+                            sqlalchemy_utils.types.uuid.UUIDType(\n+                                binary=True),\n+                            nullable=True))\n+\n+    # Migrate data\n+    for archive_policy in connection.execute(\n+            archive_policy_helper.select()):\n+        ap_id = uuid.uuid4()\n+        connection.execute(\n+            archive_policy_helper.update().where(\n+                archive_policy_helper.c.name == archive_policy.name\n+            ).values(\n+                id=ap_id\n+            )\n+        )\n+        for metric in connection.execute(metric_helper.select().where(\n+                metric_helper.c.archive_policy_name == archive_policy.name)):\n+            connection.execute(\n+                metric_helper.update().where(\n+                    metric_helper.c.archive_policy_name ==\n+                    metric.archive_policy_name\n+                ).values(\n+                    archive_policy_id=ap_id\n+                )\n+            )\n+        for apr in connection.execute(apr_helper.select().where(\n+                apr_helper.c.archive_policy_name == archive_policy.name)):\n+            connection.execute(\n+                apr_helper.update().where(\n+                    apr_helper.c.archive_policy_name == apr.archive_policy_name\n+                ).values(\n+                    archive_policy_id=ap_id\n+                )\n+            )\n+    op.alter_column('archive_policy', 'id', nullable=False,\n+                    type_=sqlalchemy_utils.types.uuid.UUIDType(binary=True))\n+    op.alter_column('metric', 'archive_policy_id', nullable=False,\n+                    type_=sqlalchemy_utils.types.uuid.UUIDType(binary=True))\n+    op.alter_column('archive_policy_rule', 'archive_policy_id', nullable=False,\n+                    type_=sqlalchemy_utils.types.uuid.UUIDType(binary=True))\n+\n+    op.drop_constraint('fk_metric_ap_name_ap_name', 'metric',\n+                       type_='foreignkey')\n+    op.drop_constraint('fk_apr_ap_name_ap_name', 'archive_policy_rule',\n+                       type_='foreignkey')\n+    if connection and connection.engine.name == \"mysql\":\n+        op.drop_constraint('PRIMARY', 'archive_policy', type_='primary')\n+        # FIXME(0livd) When recreating a primary key named PRIMARY\n+        # the following error is raised \"Incorrect index name 'PRIMARY'\"\n+        op.create_primary_key('archive_policy_pkey', 'archive_policy', ['id'])\n+    if connection and connection.engine.name == \"postgresql\":\n+        op.drop_constraint('archive_policy_pkey', 'archive_policy',\n+                           type_='primary')\n+        op.create_primary_key('archive_policy_pkey', 'archive_policy', ['id'])\n+    op.create_foreign_key(\n+        'fk_metric_ap_id_ap_id',\n+        'metric',\n+        'archive_policy',\n+        ['archive_policy_id'],\n+        ['id'],\n+        ondelete=\"RESTRICT\")\n+    op.create_foreign_key(\n+        'fk_apr_ap_id_ap_id',\n+        'archive_policy_rule',\n+        'archive_policy',\n+        ['archive_policy_id'],\n+        ['id'],\n+        ondelete=\"RESTRICT\")\n+    op.create_unique_constraint('uniq_ap_name', 'archive_policy', ['name'])\n+    op.create_index('ix_ap_name', 'archive_policy', ['name'])\n+\n+    op.drop_column('metric', 'archive_policy_name')\n+    op.drop_column('archive_policy_rule', 'archive_policy_name')","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/indexer\/alembic\/versions\/71cfe62bcf98_use_an_id_as_primary_key_for_archive_.py?ref=12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3"},{"status":"modified","deletions":53,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\/gnocchi\/indexer\/sqlalchemy.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\/gnocchi\/indexer\/sqlalchemy.py","changes":160,"filename":"gnocchi\/indexer\/sqlalchemy.py","sha":"4ddaa3df89cacbd0ba09ec3925e1d81d113f6a04","additions":107,"patch":"@@ -564,34 +564,49 @@ def list_archive_policies(self):\n         with self.facade.independent_reader() as session:\n             return list(session.query(ArchivePolicy).all())\n \n-    def get_archive_policy(self, name):\n+    def get_archive_policy(self, name=None, id=None):\n         with self.facade.independent_reader() as session:\n-            return session.query(ArchivePolicy).get(name)\n-\n-    def update_archive_policy(self, name, ap_items):\n-        with self.facade.independent_writer() as session:\n-            ap = session.query(ArchivePolicy).get(name)\n-            if not ap:\n-                raise indexer.NoSuchArchivePolicy(name)\n-            current = sorted(ap.definition,\n-                             key=operator.attrgetter('granularity'))\n-            new = sorted(ap_items, key=operator.attrgetter('granularity'))\n-            if len(current) != len(new):\n-                raise indexer.UnsupportedArchivePolicyChange(\n-                    name, 'Cannot add or drop granularities')\n-            for c, n in zip(current, new):\n-                if c.granularity != n.granularity:\n+            if name and not id:\n+                return session.query(ArchivePolicy).filter(\n+                    ArchivePolicy.name == name).first()\n+            if id and not name:\n+                return session.query(ArchivePolicy).filter(\n+                    ArchivePolicy.id == id).first()\n+            raise TypeError(\"get_archive_policy() takes one parameter, \"\n+                            \"either a name or an id\")\n+\n+    def update_archive_policy(self, name, ap_items, new_name=None):\n+        try:\n+            with self.facade.independent_writer() as session:\n+                ap = session.query(ArchivePolicy).filter(\n+                    ArchivePolicy.name == name).first()\n+                if not ap:\n+                    raise indexer.NoSuchArchivePolicy(name)\n+                current = sorted(ap.definition,\n+                                 key=operator.attrgetter('granularity'))\n+                new = sorted(ap_items, key=operator.attrgetter('granularity'))\n+                if len(current) != len(new):\n                     raise indexer.UnsupportedArchivePolicyChange(\n-                        name, '%s granularity interval was changed'\n-                        % utils.timespan_total_seconds(c.granularity))\n-            # NOTE(gordc): ORM doesn't update JSON column unless new\n-            ap.definition = ap_items\n-            return ap\n+                        name, 'Cannot add or drop granularities')\n+                for c, n in zip(current, new):\n+                    if c.granularity != n.granularity:\n+                        raise indexer.UnsupportedArchivePolicyChange(\n+                            name, '%s granularity interval was changed'\n+                            % utils.timespan_total_seconds(c.granularity))\n+                # NOTE(gordc): ORM doesn't update JSON column unless new\n+                ap.definition = ap_items\n+                if new_name:\n+                    ap.name = new_name\n+        except exception.DBDuplicateEntry:\n+            raise indexer.UnsupportedArchivePolicyChange(\n+                name,\n+                'Archive policy %s already exists.' % new_name)\n+        return ap\n \n     def delete_archive_policy(self, name):\n         constraints = [\n-            \"fk_metric_ap_name_ap_name\",\n-            \"fk_apr_ap_name_ap_name\"]\n+            \"fk_metric_ap_id_ap_id\",\n+            \"fk_apr_ap_id_ap_id\"]\n         with self.facade.writer() as session:\n             try:\n                 if session.query(ArchivePolicy).filter(\n@@ -608,6 +623,7 @@ def create_archive_policy(self, archive_policy):\n             back_window=archive_policy.back_window,\n             definition=archive_policy.definition,\n             aggregation_methods=list(archive_policy.aggregation_methods),\n+            id=archive_policy.id,\n         )\n         try:\n             with self.facade.writer() as session:\n@@ -618,14 +634,23 @@ def create_archive_policy(self, archive_policy):\n \n     def list_archive_policy_rules(self):\n         with self.facade.independent_reader() as session:\n-            return session.query(ArchivePolicyRule).order_by(\n+            apr_list = session.query(ArchivePolicyRule).order_by(\n                 ArchivePolicyRule.metric_pattern.desc(),\n                 ArchivePolicyRule.name.asc()\n             ).all()\n+            for apr in apr_list:\n+                # NOTE(0livd) Force load of archive policy\n+                apr.archive_policy\n+            return apr_list\n \n     def get_archive_policy_rule(self, name):\n         with self.facade.independent_reader() as session:\n-            return session.query(ArchivePolicyRule).get(name)\n+            apr = session.query(ArchivePolicyRule).get(name)\n+            if not apr:\n+                return None\n+            # NOTE(0livd) Force load of archive policy\n+            apr.archive_policy\n+        return apr\n \n     def delete_archive_policy_rule(self, name):\n         with self.facade.writer() as session:\n@@ -635,14 +660,20 @@ def delete_archive_policy_rule(self, name):\n \n     def create_archive_policy_rule(self, name, metric_pattern,\n                                    archive_policy_name):\n-        apr = ArchivePolicyRule(\n-            name=name,\n-            archive_policy_name=archive_policy_name,\n-            metric_pattern=metric_pattern\n-        )\n         try:\n             with self.facade.writer() as session:\n-                session.add(apr)\n+                archive_policy = session.query(ArchivePolicy).filter(\n+                    ArchivePolicy.name == archive_policy_name).first()\n+                if not archive_policy:\n+                    raise indexer.NoSuchArchivePolicy(archive_policy_name)\n+                apr = ArchivePolicyRule(\n+                    name=name,\n+                    archive_policy_id=archive_policy.id,\n+                    metric_pattern=metric_pattern,\n+                    # Note(0livd) Pass archive policy instead of force\n+                    # loading it later\n+                    archive_policy=archive_policy\n+                )\n         except exception.DBDuplicateEntry:\n             raise indexer.ArchivePolicyRuleAlreadyExists(name)\n         return apr\n@@ -665,21 +696,25 @@ def update_archive_policy_rule(self, name, new_name):\n     @retry_on_deadlock\n     def create_metric(self, id, creator, archive_policy_name,\n                       name=None, unit=None, resource_id=None):\n-        m = Metric(id=id,\n-                   creator=creator,\n-                   archive_policy_name=archive_policy_name,\n-                   name=name,\n-                   unit=unit,\n-                   resource_id=resource_id)\n         try:\n             with self.facade.writer() as session:\n+                archive_policy = session.query(ArchivePolicy).filter(\n+                    ArchivePolicy.name == archive_policy_name).first()\n+                if not archive_policy:\n+                    raise indexer.NoSuchArchivePolicy(archive_policy_name)\n+                m = Metric(id=id,\n+                           creator=creator,\n+                           archive_policy_id=archive_policy.id,\n+                           name=name,\n+                           unit=unit,\n+                           resource_id=resource_id,\n+                           # Note(0livd) Pass archive policy instead of\n+                           # force loading it later\n+                           archive_policy=archive_policy)\n                 session.add(m)\n         except exception.DBDuplicateEntry:\n             raise indexer.NamedMetricAlreadyExists(name)\n         except exception.DBReferenceError as e:\n-            if (e.constraint ==\n-               'fk_metric_ap_name_ap_name'):\n-                raise indexer.NoSuchArchivePolicy(archive_policy_name)\n             if e.constraint == 'fk_metric_resource_id_resource_id':\n                 raise indexer.NoSuchResource(resource_id)\n             raise\n@@ -709,7 +744,14 @@ def list_metrics(self, names=None, ids=None, details=False,\n                 else:\n                     q = q.filter(Metric.creator == creator)\n             for attr in kwargs:\n+                if attr == \"archive_policy_name\":\n+                    archive_policy = session.query(ArchivePolicy).filter(\n+                        ArchivePolicy.name == kwargs[attr]).first()\n+                    q = q.filter(getattr(Metric, \"archive_policy_id\") ==\n+                                 archive_policy.id)\n+                    continue\n                 q = q.filter(getattr(Metric, attr) == kwargs[attr])\n+            q = q.options(sqlalchemy.orm.joinedload('archive_policy'))\n             if details:\n                 q = q.options(sqlalchemy.orm.joinedload('resource'))\n \n@@ -775,8 +817,9 @@ def create_resource(self, resource_type, id,\n             if metrics is not None:\n                 self._set_metrics_for_resource(session, r, metrics)\n \n-            # NOTE(jd) Force load of metrics :)\n-            r.metrics\n+            # NOTE(jd) Force load of metrics and their archive policy :)\n+            for metric in r.metrics:\n+                metric.archive_policy\n \n             return r\n \n@@ -847,8 +890,10 @@ def update_resource(self, resource_type,\n                         resource_type, \"ended_at\", ended_at)\n                 raise\n \n-            # NOTE(jd) Force load of metrics \u2013 do it outside the session!\n-            r.metrics\n+            # NOTE(jd) Force load of metrics and their archive policy\n+            # do it outside the session!\n+            for metric in r.metrics:\n+                metric.archive_policy\n \n             return r\n \n@@ -869,9 +914,17 @@ def _set_metrics_for_resource(session, r, metrics):\n             else:\n                 unit = value.get('unit')\n                 ap_name = value['archive_policy_name']\n+                archive_policy = session.query(ArchivePolicy).filter(\n+                    ArchivePolicy.name == ap_name\n+                    ).first()\n+                if not archive_policy:\n+                    raise indexer.NoSuchArchivePolicy(ap_name)\n                 m = Metric(id=uuid.uuid4(),\n                            creator=r.creator,\n-                           archive_policy_name=ap_name,\n+                           archive_policy_id=archive_policy.id,\n+                           # Note(0livd) Pass archive policy instead of\n+                           # force loading it later\n+                           archive_policy=archive_policy,\n                            name=name,\n                            unit=unit,\n                            resource_id=r.id)\n@@ -880,11 +933,6 @@ def _set_metrics_for_resource(session, r, metrics):\n                     session.flush()\n                 except exception.DBDuplicateEntry:\n                     raise indexer.NamedMetricAlreadyExists(name)\n-                except exception.DBReferenceError as e:\n-                    if (e.constraint ==\n-                       'fk_metric_ap_name_ap_name'):\n-                        raise indexer.NoSuchArchivePolicy(ap_name)\n-                    raise\n \n         session.expire(r, ['metrics'])\n \n@@ -941,7 +989,9 @@ def get_resource(self, resource_type, resource_id, with_metrics=False):\n                 resource_cls).filter(\n                     resource_cls.id == resource_id)\n             if with_metrics:\n-                q = q.options(sqlalchemy.orm.joinedload('metrics'))\n+                q = q.options(\n+                    sqlalchemy.orm.joinedload('metrics').subqueryload(\n+                        Metric.archive_policy))\n             return q.first()\n \n     def _get_history_result_mapper(self, session, resource_type):\n@@ -1055,7 +1105,9 @@ def list_resources(self, resource_type='generic',\n                 raise indexer.InvalidPagination(e)\n \n             # Always include metrics\n-            q = q.options(sqlalchemy.orm.joinedload(\"metrics\"))\n+            q = q.options(\n+                sqlalchemy.orm.joinedload(\"metrics\").subqueryload(\n+                    Metric.archive_policy))\n             all_resources = q.all()\n \n             if details:\n@@ -1084,7 +1136,9 @@ def list_resources(self, resource_type='generic',\n \n                         q = session.query(target_cls).filter(f)\n                         # Always include metrics\n-                        q = q.options(sqlalchemy.orm.joinedload('metrics'))\n+                        q = q.options(\n+                            sqlalchemy.orm.joinedload(\"metrics\").subqueryload(\n+                                Metric.archive_policy))\n                         try:\n                             all_resources.extend(q.all())\n                         except sqlalchemy.exc.ProgrammingError as e:","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/indexer\/sqlalchemy.py?ref=12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3"},{"status":"modified","deletions":16,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\/gnocchi\/indexer\/sqlalchemy_base.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\/gnocchi\/indexer\/sqlalchemy_base.py","changes":49,"filename":"gnocchi\/indexer\/sqlalchemy_base.py","sha":"a49ccbd6ac3240831ea41a9643b17542d1f0ea36","additions":33,"patch":"@@ -149,8 +149,13 @@ def process_result_value(self, value, dialect):\n \n class ArchivePolicy(Base, GnocchiBase, archive_policy.ArchivePolicy):\n     __tablename__ = 'archive_policy'\n+    __table_args__ = (\n+        sqlalchemy.Index('ix_ap_name', 'name'),\n+        sqlalchemy.UniqueConstraint(\"name\", name=\"uniq_ap_name\"),\n+        COMMON_TABLES_ARGS)\n \n-    name = sqlalchemy.Column(sqlalchemy.String(255), primary_key=True)\n+    id = sqlalchemy.Column(sqlalchemy_utils.UUIDType(), primary_key=True)\n+    name = sqlalchemy.Column(sqlalchemy.String(255), nullable=False)\n     back_window = sqlalchemy.Column(sqlalchemy.Integer, nullable=False)\n     definition = sqlalchemy.Column(ArchivePolicyDefinitionType, nullable=False)\n     # TODO(jd) Use an array of string instead, PostgreSQL can do that\n@@ -169,14 +174,17 @@ class Metric(Base, GnocchiBase, indexer.Metric):\n \n     id = sqlalchemy.Column(sqlalchemy_utils.UUIDType(),\n                            primary_key=True)\n-    archive_policy_name = sqlalchemy.Column(\n-        sqlalchemy.String(255),\n+    archive_policy_id = sqlalchemy.Column(\n+        sqlalchemy_utils.UUIDType(),\n         sqlalchemy.ForeignKey(\n-            'archive_policy.name',\n+            'archive_policy.id',\n             ondelete=\"RESTRICT\",\n-            name=\"fk_metric_ap_name_ap_name\"),\n+            name=\"fk_metric_ap_id_ap_id\"),\n         nullable=False)\n-    archive_policy = sqlalchemy.orm.relationship(ArchivePolicy, lazy=\"joined\")\n+    archive_policy = sqlalchemy.orm.relationship(\n+        ArchivePolicy,\n+        backref=\"metric\",\n+        primaryjoin=\"ArchivePolicy.id == Metric.archive_policy_id\")\n     creator = sqlalchemy.Column(sqlalchemy.String(255))\n     resource_id = sqlalchemy.Column(\n         sqlalchemy_utils.UUIDType(),\n@@ -202,10 +210,8 @@ def jsonify(self):\n             d['resource_id'] = self.resource_id\n         else:\n             d['resource'] = self.resource\n-        if 'archive_policy' in unloaded:\n-            d['archive_policy_name'] = self.archive_policy_name\n-        else:\n-            d['archive_policy'] = self.archive_policy\n+\n+        d['archive_policy_name'] = self.archive_policy.name\n \n         if self.creator is None:\n             d['created_by_user_id'] = d['created_by_project_id'] = None\n@@ -218,12 +224,12 @@ def jsonify(self):\n \n     def __eq__(self, other):\n         # NOTE(jd) If `other` is a SQL Metric, we only compare\n-        # archive_policy_name, and we don't compare archive_policy that might\n+        # archive_policy_id, and we don't compare archive_policy that might\n         # not be loaded. Otherwise we fallback to the original comparison for\n         # indexer.Metric.\n         return ((isinstance(other, Metric)\n                  and self.id == other.id\n-                 and self.archive_policy_name == other.archive_policy_name\n+                 and self.archive_policy_id == other.archive_policy_id\n                  and self.creator == other.creator\n                  and self.name == other.name\n                  and self.unit == other.unit\n@@ -439,11 +445,22 @@ class ArchivePolicyRule(Base, GnocchiBase):\n     __tablename__ = 'archive_policy_rule'\n \n     name = sqlalchemy.Column(sqlalchemy.String(255), primary_key=True)\n-    archive_policy_name = sqlalchemy.Column(\n-        sqlalchemy.String(255),\n+    archive_policy_id = sqlalchemy.Column(\n+        sqlalchemy_utils.UUIDType(),\n         sqlalchemy.ForeignKey(\n-            'archive_policy.name',\n+            'archive_policy.id',\n             ondelete=\"RESTRICT\",\n-            name=\"fk_apr_ap_name_ap_name\"),\n+            name=\"fk_apr_ap_id_ap_id\"),\n         nullable=False)\n     metric_pattern = sqlalchemy.Column(sqlalchemy.String(255), nullable=False)\n+    archive_policy = sqlalchemy.orm.relationship(\n+        ArchivePolicy,\n+        backref=\"archive_policy_rule\",\n+        primaryjoin=\"ArchivePolicy.id == ArchivePolicyRule.archive_policy_id\")\n+\n+    def jsonify(self):\n+        return {\n+            \"name\": self.name,\n+            \"metric_pattern\": self.metric_pattern,\n+            \"archive_policy_name\": self.archive_policy.name,\n+        }","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/indexer\/sqlalchemy_base.py?ref=12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3"},{"status":"modified","deletions":7,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\/gnocchi\/rest\/api.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\/gnocchi\/rest\/api.py","changes":27,"filename":"gnocchi\/rest\/api.py","sha":"a857b1eae3038654fa79981b485e6f5bf9ab9b49","additions":20,"patch":"@@ -253,23 +253,35 @@ def patch(self):\n                 indexer.NoSuchArchivePolicy(self.archive_policy)))\n         enforce(\"update archive policy\", ap)\n \n-        body = deserialize_and_validate(voluptuous.Schema({\n-            voluptuous.Required(\"definition\"):\n-                voluptuous.All([{\n+        accepted_schemas = [\n+            voluptuous.Schema({\n+                voluptuous.Required(\"name\"): six.text_type,\n+                voluptuous.Optional(\"definition\"): voluptuous.All([{\n+                    \"granularity\": Timespan,\n+                    \"points\": PositiveNotNullInt,\n+                    \"timespan\": Timespan}], voluptuous.Length(min=1))\n+            }),\n+            voluptuous.Schema({\n+                voluptuous.Optional(\"name\"): six.text_type,\n+                voluptuous.Required(\"definition\"): voluptuous.All([{\n                     \"granularity\": Timespan,\n                     \"points\": PositiveNotNullInt,\n-                    \"timespan\": Timespan}], voluptuous.Length(min=1)),\n-            }))\n+                    \"timespan\": Timespan}], voluptuous.Length(min=1))\n+            })]\n+        body = deserialize_and_validate(voluptuous.Any(*accepted_schemas))\n         # Validate the data\n+        # If no new definition was passed, use the current one\n         try:\n             ap_items = [archive_policy.ArchivePolicyItem(**item) for item in\n-                        body['definition']]\n+                        body.get('definition', ap.definition)]\n         except ValueError as e:\n             abort(400, six.text_type(e))\n \n         try:\n             return pecan.request.indexer.update_archive_policy(\n-                self.archive_policy, ap_items)\n+                self.archive_policy,\n+                ap_items,\n+                new_name=body.get(\"name\"))\n         except indexer.UnsupportedArchivePolicyChange as e:\n             abort(400, six.text_type(e))\n \n@@ -313,6 +325,7 @@ def post(self):\n             })\n \n         body = deserialize_and_validate(ArchivePolicySchema)\n+        body['id'] = uuid.uuid4()\n         # Validate the data\n         try:\n             ap = archive_policy.ArchivePolicy.from_dict(body)","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/rest\/api.py?ref=12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3"},{"status":"modified","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\/gnocchi\/tests\/base.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\/gnocchi\/tests\/base.py","changes":4,"filename":"gnocchi\/tests\/base.py","sha":"09377dcfbb3c4506133c18b3653751a6cc75c3c1","additions":4,"patch":"@@ -225,6 +225,7 @@ class TestCase(BaseTestCase):\n                     timespan=numpy.timedelta64(1, 'D'),\n                 ),\n             ],\n+            id=uuid.UUID('1350af0d-2bca-4526-8b0f-f71c50cdecd2'),\n         ),\n         'low': archive_policy.ArchivePolicy(\n             \"low\", 0, [\n@@ -238,6 +239,7 @@ class TestCase(BaseTestCase):\n                 archive_policy.ArchivePolicyItem(\n                     granularity=numpy.timedelta64(1, 'D'), points=30),\n             ],\n+            id=uuid.UUID('595f9bd1-38f8-4c75-b57b-0899ac6c26ab'),\n         ),\n         'medium': archive_policy.ArchivePolicy(\n             \"medium\", 0, [\n@@ -251,6 +253,7 @@ class TestCase(BaseTestCase):\n                 archive_policy.ArchivePolicyItem(\n                     granularity=numpy.timedelta64(1, 'D'), points=365),\n             ],\n+            id=uuid.UUID('686d9406-41ad-435b-8dee-49a97e6721e9'),\n         ),\n         'high': archive_policy.ArchivePolicy(\n             \"high\", 0, [\n@@ -264,6 +267,7 @@ class TestCase(BaseTestCase):\n                 archive_policy.ArchivePolicyItem(\n                     granularity=numpy.timedelta64(1, 'h'), points=365 * 24),\n             ],\n+            id=uuid.UUID('fa81a4d2-6503-43fd-8b32-bd0765fbdd22'),\n         ),\n     }\n ","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/base.py?ref=12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3"},{"status":"modified","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\/gnocchi\/tests\/functional\/gabbits\/archive.yaml","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\/gnocchi\/tests\/functional\/gabbits\/archive.yaml","changes":74,"filename":"gnocchi\/tests\/functional\/gabbits\/archive.yaml","sha":"17385bf638b6f1f905abc6e6d93240d6e00111fa","additions":74,"patch":"@@ -292,6 +292,80 @@ tests:\n       response_strings:\n           - Archive policy large already exists\n \n+# Create another one, rename it and delete it\n+\n+    - name: create to_rename policy\n+      POST: \/v1\/archive_policy\n+      request_headers:\n+          # User admin\n+          authorization: \"basic YWRtaW46\"\n+      data:\n+          name: to_rename\n+          definition:\n+              - granularity: 1 second\n+                points: 20\n+              - granularity: 2 second\n+      response_headers:\n+          location: $SCHEME:\/\/$NETLOC\/v1\/archive_policy\/to_rename\n+      status: 201\n+\n+    - name: rename archive policy with existing name\n+      PATCH: \/v1\/archive_policy\/to_rename\n+      request_headers:\n+          # User admin\n+          authorization: \"basic YWRtaW46\"\n+      data:\n+          name: medium\n+      status: 400\n+      response_strings:\n+          - \"Archive policy medium already exists.\"\n+\n+    - name: rename archive policy\n+      PATCH: $LAST_URL\n+      request_headers:\n+          # User admin\n+          authorization: \"basic YWRtaW46\"\n+      data:\n+          name: renamed\n+      status: 200\n+      response_json_paths:\n+          $.name: renamed\n+          $.definition[0].granularity: \"0:00:01\"\n+          $.definition[0].points: 20\n+          $.definition[0].timespan: \"0:00:20\"\n+          $.definition[1].granularity: \"0:00:02\"\n+          $.definition[1].points: null\n+          $.definition[1].timespan: null\n+\n+    - name: confirm rename\n+      GET: $LAST_URL\n+      status: 404\n+\n+    - name: rename and update archive policy\n+      PATCH: \/v1\/archive_policy\/renamed\n+      request_headers:\n+          # User admin\n+          authorization: \"basic YWRtaW46\"\n+      data:\n+          name: renamed_twice\n+          definition:\n+              - granularity: 1 second\n+                points: 50\n+              - granularity: 2 second\n+      status: 200\n+      response_json_paths:\n+          $.name: renamed_twice\n+          $.definition[0].granularity: \"0:00:01\"\n+          $.definition[0].points: 50\n+          $.definition[0].timespan: \"0:00:50\"\n+\n+    - name: delete renamed policy\n+      DELETE: \/v1\/archive_policy\/renamed_twice\n+      request_headers:\n+        # User admin\n+        authorization: \"basic YWRtaW46\"\n+      status: 204\n+\n # Create a unicode named policy\n \n     - name: post unicode policy name","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/functional\/gabbits\/archive.yaml?ref=12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3"},{"status":"modified","deletions":2,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\/gnocchi\/tests\/functional\/gabbits\/base.yaml","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\/gnocchi\/tests\/functional\/gabbits\/base.yaml","changes":4,"filename":"gnocchi\/tests\/functional\/gabbits\/base.yaml","sha":"7bdfcc4eb4c2b16116909cce304c5d661ae09cec","additions":2,"patch":"@@ -61,14 +61,14 @@ tests:\n   GET: $LOCATION\n   status: 200\n   response_json_paths:\n-      $.archive_policy.name: test1\n+      $.archive_policy_name: test1\n       $.creator: foobar\n \n - name: list the one metric\n   GET: \/v1\/metric\n   status: 200\n   response_json_paths:\n-      $[0].archive_policy.name: test1\n+      $[0].archive_policy_name: test1\n \n - name: post a single measure\n   desc: post one measure","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/functional\/gabbits\/base.yaml?ref=12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3"},{"status":"modified","deletions":10,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\/gnocchi\/tests\/functional\/gabbits\/metric-list.yaml","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\/gnocchi\/tests\/functional\/gabbits\/metric-list.yaml","changes":20,"filename":"gnocchi\/tests\/functional\/gabbits\/metric-list.yaml","sha":"9d7e0ac93654ab136feefa26c4fe66c7b1c6857b","additions":10,"patch":"@@ -96,7 +96,7 @@ tests:\n       response_json_paths:\n           $.`len`: 1\n           $[0].name: disk.io.rate\n-          $[0].archive_policy.name: first_archive\n+          $[0].archive_policy_name: first_archive\n \n     - name: list metrics by name\n       GET: \/v1\/metric?name=disk.io.rate\n@@ -107,15 +107,15 @@ tests:\n           $.`len`: 2\n           $[0].name: disk.io.rate\n           $[1].name: disk.io.rate\n-          $[0].archive_policy.name: first_archive\n-          $[1].archive_policy.name: first_archive\n+          $[0].archive_policy_name: first_archive\n+          $[1].archive_policy_name: first_archive\n \n     - name: list metrics by unit\n       GET: \/v1\/metric?unit=ns\n       response_json_paths:\n           $.`len`: 1\n           $[0].name: cpu\n-          $[0].archive_policy.name: second_archive\n+          $[0].archive_policy_name: second_archive\n \n     - name: list metrics by archive_policy\n       GET: \/v1\/metric?archive_policy_name=first_archive&sort=name:desc\n@@ -127,9 +127,9 @@ tests:\n           $[0].name: disk.io.rate\n           $[1].name: disk.io.rate\n           $[2].name: cpu_util\n-          $[0].archive_policy.name: first_archive\n-          $[1].archive_policy.name: first_archive\n-          $[2].archive_policy.name: first_archive\n+          $[0].archive_policy_name: first_archive\n+          $[1].archive_policy_name: first_archive\n+          $[2].archive_policy_name: first_archive\n \n     - name: list metrics by archive_policy with limit and pagination links page 1\n       GET: \/v1\/metric?archive_policy_name=first_archive&sort=name:desc&limit=2\n@@ -142,8 +142,8 @@ tests:\n           $.`len`: 2\n           $[0].name: disk.io.rate\n           $[1].name: disk.io.rate\n-          $[0].archive_policy.name: first_archive\n-          $[1].archive_policy.name: first_archive\n+          $[0].archive_policy_name: first_archive\n+          $[1].archive_policy_name: first_archive\n \n     - name: list metrics by archive_policy with limit and pagination links page 2\n       GET: \/v1\/metric?archive_policy_name=first_archive&limit=2&marker=$RESPONSE['$[1].id']&sort=name:desc\n@@ -153,7 +153,7 @@ tests:\n       response_json_paths:\n           $.`len`: 1\n           $[0].name: cpu_util\n-          $[0].archive_policy.name: first_archive\n+          $[0].archive_policy_name: first_archive\n \n     - name: list metrics ensure no Link header\n       GET: \/v1\/metric?archive_policy_name=first_archive&sort=name:desc","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/functional\/gabbits\/metric-list.yaml?ref=12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3"},{"status":"modified","deletions":3,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\/gnocchi\/tests\/functional\/gabbits\/metric.yaml","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\/gnocchi\/tests\/functional\/gabbits\/metric.yaml","changes":6,"filename":"gnocchi\/tests\/functional\/gabbits\/metric.yaml","sha":"c1b5babcdc56dfdc72db3016fd86b41e55b9e10c","additions":3,"patch":"@@ -138,7 +138,7 @@ tests:\n       GET: \/v1\/metric\/$RESPONSE['$.id']\n       status: 200\n       response_json_paths:\n-        $.archive_policy.name: cookies\n+        $.archive_policy_name: cookies\n \n     - name: push measurements to metric before epoch\n       POST: \/v1\/metric\/$RESPONSE['$.id']\/measures\n@@ -152,7 +152,7 @@ tests:\n     - name: list valid metrics\n       GET: \/v1\/metric\n       response_json_paths:\n-          $[0].archive_policy.name: cookies\n+          $[0].archive_policy_name: cookies\n \n     - name: push measurements to metric with bad timestamp\n       POST: \/v1\/metric\/$HISTORY['list valid metrics'].$RESPONSE['$[0].id']\/measures\n@@ -344,7 +344,7 @@ tests:\n       GET: \/v1\/metric\n       status: 200\n       response_json_paths:\n-          $[0].archive_policy.name: cookies\n+          $[0].archive_policy_name: cookies\n \n     - name: get measure unknown aggregates\n       GET: \/v1\/aggregation\/metric?metric=$HISTORY['get metric list for aggregates'].$RESPONSE['$[0].id']&aggregation=last","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/functional\/gabbits\/metric.yaml?ref=12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3"},{"status":"modified","deletions":1,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\/gnocchi\/tests\/functional\/gabbits\/resource.yaml","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\/gnocchi\/tests\/functional\/gabbits\/resource.yaml","changes":2,"filename":"gnocchi\/tests\/functional\/gabbits\/resource.yaml","sha":"ea123d220fe593274261f4b913852a230bb9f484","additions":1,"patch":"@@ -462,7 +462,7 @@ tests:\n     - name: request cpuutil metric from generic\n       GET: \/v1\/resource\/generic\/85C44741-CC60-4033-804E-2D3098C7D2E9\/metric\/cpu.util\n       response_json_paths:\n-          $.archive_policy.name: medium\n+          $.archive_policy_name: medium\n \n     - name: try post cpuutil metric to generic\n       POST: $LAST_URL","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/functional\/gabbits\/resource.yaml?ref=12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3"},{"status":"modified","deletions":1,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\/gnocchi\/tests\/functional\/gabbits\/search-metric.yaml","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\/gnocchi\/tests\/functional\/gabbits\/search-metric.yaml","changes":2,"filename":"gnocchi\/tests\/functional\/gabbits\/search-metric.yaml","sha":"a1e7a673dddda7f0e8ff441b05ad6d1a727b5371","additions":1,"patch":"@@ -71,7 +71,7 @@ tests:\n       GET: \/v1\/metric\n       status: 200\n       response_json_paths:\n-          $[0].archive_policy.name: high\n+          $[0].archive_policy_name: high\n \n     - name: search with one correct granularity\n       POST: \/v1\/search\/metric?metric_id=$HISTORY['get metric id'].$RESPONSE['$[0].id']&granularity=1s","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/functional\/gabbits\/search-metric.yaml?ref=12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3"},{"status":"modified","deletions":1,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\/gnocchi\/tests\/functional_live\/gabbits\/live.yaml","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\/gnocchi\/tests\/functional_live\/gabbits\/live.yaml","changes":2,"filename":"gnocchi\/tests\/functional_live\/gabbits\/live.yaml","sha":"20027cf60a1c00a20d513f9a5c151085f5522d3e","additions":1,"patch":"@@ -413,7 +413,7 @@ tests:\n       GET: $LOCATION\n       status: 200\n       response_json_paths:\n-        $.archive_policy.name: gabbilive\n+        $.archive_policy_name: gabbilive\n \n     - name: delete the metric\n       DELETE: \/v1\/metric\/$RESPONSE['$.id']","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/functional_live\/gabbits\/live.yaml?ref=12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3"},{"status":"modified","deletions":3,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\/gnocchi\/tests\/test_indexer.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\/gnocchi\/tests\/test_indexer.py","changes":55,"filename":"gnocchi\/tests\/test_indexer.py","sha":"5717ada70c018a1606fd13179299b63e1065e910","additions":52,"patch":"@@ -51,6 +51,7 @@ def test_create_archive_policy_already_exists(self):\n \n     def test_get_archive_policy(self):\n         ap = self.index.get_archive_policy(\"low\")\n+        self.assertIsInstance(ap.id, uuid.UUID)\n         self.assertEqual({\n             'back_window': 0,\n             'aggregation_methods':\n@@ -65,7 +66,8 @@ def test_get_archive_policy(self):\n                 {u'granularity': numpy.timedelta64(86400, 's'),\n                  u'points': 30,\n                  u'timespan': numpy.timedelta64(2592000, 's')}],\n-            'name': u'low'}, dict(ap))\n+            'name': u'low',\n+            'id': ap.id}, dict(ap))\n \n     def test_update_archive_policy(self):\n         self.assertRaises(indexer.UnsupportedArchivePolicyChange,\n@@ -90,6 +92,7 @@ def test_update_archive_policy(self):\n                                                       points=24),\n                      archive_policy.ArchivePolicyItem(granularity=86400,\n                                                       points=30)])\n+        self.assertIsInstance(ap.id, uuid.UUID)\n         self.assertEqual({\n             'back_window': 0,\n             'aggregation_methods':\n@@ -104,14 +107,16 @@ def test_update_archive_policy(self):\n                 {u'granularity': numpy.timedelta64(86400, 's'),\n                  u'points': 30,\n                  u'timespan': numpy.timedelta64(2592000, 's')}],\n-            'name': apname}, dict(ap))\n+            'name': apname,\n+            'id': ap.id}, dict(ap))\n         ap = self.index.update_archive_policy(\n             apname, [archive_policy.ArchivePolicyItem(granularity=300,\n                                                       points=12),\n                      archive_policy.ArchivePolicyItem(granularity=3600,\n                                                       points=24),\n                      archive_policy.ArchivePolicyItem(granularity=86400,\n                                                       points=30)])\n+        self.assertIsInstance(ap.id, uuid.UUID)\n         self.assertEqual({\n             'back_window': 0,\n             'aggregation_methods':\n@@ -126,7 +131,51 @@ def test_update_archive_policy(self):\n                 {u'granularity': numpy.timedelta64(86400, 's'),\n                  u'points': 30,\n                  u'timespan': numpy.timedelta64(2592000, 's')}],\n-            'name': apname}, dict(ap))\n+            'name': apname,\n+            'id': ap.id}, dict(ap))\n+\n+    def test_rename_archive_policy(self):\n+        apname = str(uuid.uuid4())\n+        apname1 = str(uuid.uuid4())\n+        self.index.create_archive_policy(archive_policy.ArchivePolicy(\n+            apname, 0, [(12, 300), (24, 3600), (30, 86400)]))\n+        self.index.create_archive_policy(archive_policy.ArchivePolicy(\n+            apname1, 0, [(12, 300), (24, 3600), (30, 86400)]))\n+        self.assertRaises(indexer.UnsupportedArchivePolicyChange,\n+                          self.index.update_archive_policy, apname,\n+                          [archive_policy.ArchivePolicyItem(granularity=300,\n+                                                            points=12),\n+                           archive_policy.ArchivePolicyItem(granularity=3600,\n+                                                            points=24),\n+                           archive_policy.ArchivePolicyItem(granularity=86400,\n+                                                            points=30)],\n+                          apname1)\n+        new_apname = str(uuid.uuid4())\n+        ap = self.index.update_archive_policy(\n+            apname, [archive_policy.ArchivePolicyItem(granularity=300,\n+                                                      points=12),\n+                     archive_policy.ArchivePolicyItem(granularity=3600,\n+                                                      points=24),\n+                     archive_policy.ArchivePolicyItem(granularity=86400,\n+                                                      points=30)],\n+            new_apname)\n+        self.assertIsInstance(ap.id, uuid.UUID)\n+        self.assertEqual({\n+            'back_window': 0,\n+            'aggregation_methods':\n+            set(self.conf.archive_policy.default_aggregation_methods),\n+            'definition': [\n+                {u'granularity': numpy.timedelta64(5, 'm'),\n+                 u'points': 12,\n+                 u'timespan': numpy.timedelta64(3600, 's')},\n+                {u'granularity': numpy.timedelta64(3600, 's'),\n+                 u'points': 24,\n+                 u'timespan': numpy.timedelta64(86400, 's')},\n+                {u'granularity': numpy.timedelta64(86400, 's'),\n+                 u'points': 30,\n+                 u'timespan': numpy.timedelta64(2592000, 's')}],\n+            'name': new_apname,\n+            'id': ap.id}, dict(ap))\n \n     def test_delete_archive_policy(self):\n         name = str(uuid.uuid4())","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/test_indexer.py?ref=12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3"},{"status":"modified","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\/gnocchi\/tests\/test_rest.py","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\/gnocchi\/tests\/test_rest.py","changes":2,"filename":"gnocchi\/tests\/test_rest.py","sha":"c0cfd2d5e36920d92593eb15a11a1d696f3879ac","additions":2,"patch":"@@ -287,6 +287,7 @@ def test_get_archive_policy(self):\n         ]\n         self.assertEqual(set(ap['aggregation_methods']),\n                          ap_dict['aggregation_methods'])\n+        ap['id'] = uuid.UUID(ap['id'])\n         del ap['aggregation_methods']\n         del ap_dict['aggregation_methods']\n         self.assertEqual(ap_dict, ap)\n@@ -297,6 +298,7 @@ def test_list_archive_policy(self):\n         # Transform list to set\n         for ap in aps:\n             ap['aggregation_methods'] = set(ap['aggregation_methods'])\n+            ap['id'] = uuid.UUID(ap['id'])\n         for name, ap in six.iteritems(self.archive_policies):\n             apj = ap.jsonify()\n             apj['definition'] = [","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/gnocchi\/tests\/test_rest.py?ref=12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3"},{"status":"added","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/raw\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\/releasenotes\/notes\/add_update_archive_policy-fb5b46ff86e5bf2e.yaml","blob_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/blob\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\/releasenotes\/notes\/add_update_archive_policy-fb5b46ff86e5bf2e.yaml","changes":3,"filename":"releasenotes\/notes\/add_update_archive_policy-fb5b46ff86e5bf2e.yaml","sha":"9b09e012ce0fcb4a736126d1247acb85ff0fe4da","additions":3,"patch":"@@ -0,0 +1,3 @@\n+---\n+features:\n+  - Possibility to rename an archive policy.","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/releasenotes\/notes\/add_update_archive_policy-fb5b46ff86e5bf2e.yaml?ref=12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3"}],"committer":{"following_url":"https:\/\/api.github.com\/users\/0livd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/0livd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/0livd\/orgs","url":"https:\/\/api.github.com\/users\/0livd","events_url":"https:\/\/api.github.com\/users\/0livd\/events{\/privacy}","html_url":"https:\/\/github.com\/0livd","subscriptions_url":"https:\/\/api.github.com\/users\/0livd\/subscriptions","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/24255883?v=4","repos_url":"https:\/\/api.github.com\/users\/0livd\/repos","received_events_url":"https:\/\/api.github.com\/users\/0livd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/0livd\/starred{\/owner}{\/repo}","site_admin":false,"login":"0livd","type":"User","id":24255883,"followers_url":"https:\/\/api.github.com\/users\/0livd\/followers"},"stats":{"deletions":101,"additions":507,"total":608},"author":{"following_url":"https:\/\/api.github.com\/users\/0livd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/0livd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/0livd\/orgs","url":"https:\/\/api.github.com\/users\/0livd","events_url":"https:\/\/api.github.com\/users\/0livd\/events{\/privacy}","html_url":"https:\/\/github.com\/0livd","subscriptions_url":"https:\/\/api.github.com\/users\/0livd\/subscriptions","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/24255883?v=4","repos_url":"https:\/\/api.github.com\/users\/0livd\/repos","received_events_url":"https:\/\/api.github.com\/users\/0livd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/0livd\/starred{\/owner}{\/repo}","site_admin":false,"login":"0livd","type":"User","id":24255883,"followers_url":"https:\/\/api.github.com\/users\/0livd\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3","sha":"12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits\/fb8774406dc35059848040c58593ba2fa43c7b43","sha":"fb8774406dc35059848040c58593ba2fa43c7b43","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/commit\/fb8774406dc35059848040c58593ba2fa43c7b43"}],"commit":{"committer":{"date":"2017-10-23T13:38:04Z","name":"Olivier Destras","email":"gh@destras.fr"},"author":{"date":"2017-09-27T15:52:34Z","name":"Olivier Destras","email":"gh@destras.fr"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits\/12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees\/81ccb0b6476a32481b86f2145be362c37865585d","sha":"81ccb0b6476a32481b86f2145be362c37865585d"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"Allow to rename archive policies\n\nArchive policies can be renamed by issuing\na PATCH request containing the new name.\nThe definition of an ap can also be patched\nalong with the name within the same request.\nArchive policies are now identified by id\nbut their name must still be unique."}}],"diff_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/436.diff","pastamaker_ci_statuses":{"continuous-integration\/travis-ci\/pr":{"url":"https:\/\/travis-ci.org\/gnocchixyz\/gnocchi\/builds\/291549388?utm_source=github_status&utm_medium=notification","state":"success"},"pastamaker\/reviewers":{"url":null,"state":"failure"}},"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/436","body":"This supersedes #389.\r\n\r\nArchive policies can be renamed by issuing a PATCH request containing the new name.\r\nThe definition of an ap can also be patched along with the name within the same request.\r\nArchive policies are now identified by id but their name must still be unique.","head":{"repo":{"issues_url":"https:\/\/api.github.com\/repos\/0livd\/gnocchi\/issues{\/number}","deployments_url":"https:\/\/api.github.com\/repos\/0livd\/gnocchi\/deployments","has_wiki":false,"forks_url":"https:\/\/api.github.com\/repos\/0livd\/gnocchi\/forks","mirror_url":null,"issue_events_url":"https:\/\/api.github.com\/repos\/0livd\/gnocchi\/issues\/events{\/number}","subscription_url":"https:\/\/api.github.com\/repos\/0livd\/gnocchi\/subscription","merges_url":"https:\/\/api.github.com\/repos\/0livd\/gnocchi\/merges","collaborators_url":"https:\/\/api.github.com\/repos\/0livd\/gnocchi\/collaborators{\/collaborator}","updated_at":"2017-09-21T09:28:31Z","private":false,"pulls_url":"https:\/\/api.github.com\/repos\/0livd\/gnocchi\/pulls{\/number}","issue_comment_url":"https:\/\/api.github.com\/repos\/0livd\/gnocchi\/issues\/comments{\/number}","trees_url":"https:\/\/api.github.com\/repos\/0livd\/gnocchi\/git\/trees{\/sha}","full_name":"0livd\/gnocchi","owner":{"following_url":"https:\/\/api.github.com\/users\/0livd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/0livd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/0livd\/orgs","url":"https:\/\/api.github.com\/users\/0livd","events_url":"https:\/\/api.github.com\/users\/0livd\/events{\/privacy}","html_url":"https:\/\/github.com\/0livd","subscriptions_url":"https:\/\/api.github.com\/users\/0livd\/subscriptions","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/24255883?v=4","repos_url":"https:\/\/api.github.com\/users\/0livd\/repos","received_events_url":"https:\/\/api.github.com\/users\/0livd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/0livd\/starred{\/owner}{\/repo}","site_admin":false,"login":"0livd","type":"User","id":24255883,"followers_url":"https:\/\/api.github.com\/users\/0livd\/followers"},"statuses_url":"https:\/\/api.github.com\/repos\/0livd\/gnocchi\/statuses\/{sha}","id":104328307,"keys_url":"https:\/\/api.github.com\/repos\/0livd\/gnocchi\/keys{\/key_id}","size":3839,"tags_url":"https:\/\/api.github.com\/repos\/0livd\/gnocchi\/tags","archived":false,"downloads_url":"https:\/\/api.github.com\/repos\/0livd\/gnocchi\/downloads","assignees_url":"https:\/\/api.github.com\/repos\/0livd\/gnocchi\/assignees{\/user}","contents_url":"https:\/\/api.github.com\/repos\/0livd\/gnocchi\/contents\/{+path}","has_pages":false,"git_refs_url":"https:\/\/api.github.com\/repos\/0livd\/gnocchi\/git\/refs{\/sha}","has_projects":true,"clone_url":"https:\/\/github.com\/0livd\/gnocchi.git","watchers_count":0,"git_tags_url":"https:\/\/api.github.com\/repos\/0livd\/gnocchi\/git\/tags{\/sha}","milestones_url":"https:\/\/api.github.com\/repos\/0livd\/gnocchi\/milestones{\/number}","stargazers_count":0,"comments_url":"https:\/\/api.github.com\/repos\/0livd\/gnocchi\/comments{\/number}","homepage":null,"branches_url":"https:\/\/api.github.com\/repos\/0livd\/gnocchi\/branches{\/branch}","fork":true,"commits_url":"https:\/\/api.github.com\/repos\/0livd\/gnocchi\/commits{\/sha}","releases_url":"https:\/\/api.github.com\/repos\/0livd\/gnocchi\/releases{\/id}","description":"Timeseries database","has_downloads":true,"labels_url":"https:\/\/api.github.com\/repos\/0livd\/gnocchi\/labels{\/name}","events_url":"https:\/\/api.github.com\/repos\/0livd\/gnocchi\/events","contributors_url":"https:\/\/api.github.com\/repos\/0livd\/gnocchi\/contributors","html_url":"https:\/\/github.com\/0livd\/gnocchi","compare_url":"https:\/\/api.github.com\/repos\/0livd\/gnocchi\/compare\/{base}...{head}","language":"Python","git_url":"git:\/\/github.com\/0livd\/gnocchi.git","svn_url":"https:\/\/github.com\/0livd\/gnocchi","notifications_url":"https:\/\/api.github.com\/repos\/0livd\/gnocchi\/notifications{?since,all,participating}","has_issues":false,"ssh_url":"git@github.com:0livd\/gnocchi.git","blobs_url":"https:\/\/api.github.com\/repos\/0livd\/gnocchi\/git\/blobs{\/sha}","forks":0,"hooks_url":"https:\/\/api.github.com\/repos\/0livd\/gnocchi\/hooks","open_issues_count":0,"watchers":0,"name":"gnocchi","license":null,"url":"https:\/\/api.github.com\/repos\/0livd\/gnocchi","created_at":"2017-09-21T09:28:29Z","archive_url":"https:\/\/api.github.com\/repos\/0livd\/gnocchi\/{archive_format}{\/ref}","pushed_at":"2017-10-23T13:38:15Z","forks_count":0,"default_branch":"master","teams_url":"https:\/\/api.github.com\/repos\/0livd\/gnocchi\/teams","open_issues":0,"languages_url":"https:\/\/api.github.com\/repos\/0livd\/gnocchi\/languages","git_commits_url":"https:\/\/api.github.com\/repos\/0livd\/gnocchi\/git\/commits{\/sha}","subscribers_url":"https:\/\/api.github.com\/repos\/0livd\/gnocchi\/subscribers","stargazers_url":"https:\/\/api.github.com\/repos\/0livd\/gnocchi\/stargazers"},"sha":"12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3","ref":"update_ap2","user":{"following_url":"https:\/\/api.github.com\/users\/0livd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/0livd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/0livd\/orgs","url":"https:\/\/api.github.com\/users\/0livd","events_url":"https:\/\/api.github.com\/users\/0livd\/events{\/privacy}","html_url":"https:\/\/github.com\/0livd","subscriptions_url":"https:\/\/api.github.com\/users\/0livd\/subscriptions","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/24255883?v=4","repos_url":"https:\/\/api.github.com\/users\/0livd\/repos","received_events_url":"https:\/\/api.github.com\/users\/0livd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/0livd\/starred{\/owner}{\/repo}","site_admin":false,"login":"0livd","type":"User","id":24255883,"followers_url":"https:\/\/api.github.com\/users\/0livd\/followers"},"label":"0livd:update_ap2"},"pastamaker_weight":-1,"commits":1,"author_association":"CONTRIBUTOR","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/436\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/436","pastamaker_travis_url":"https:\/\/travis-ci.org\/gnocchixyz\/gnocchi\/builds\/291549388?utm_source=github_status&utm_medium=notification","updated_at":"2017-10-27T16:34:49Z","pastamaker_approved":false,"base":{"repo":{"issues_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues{\/number}","deployments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/deployments","has_wiki":false,"forks_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/forks","mirror_url":null,"issue_events_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/events{\/number}","subscription_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/subscription","merges_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/merges","collaborators_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/collaborators{\/collaborator}","updated_at":"2018-01-22T23:19:57Z","private":false,"pulls_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls{\/number}","issue_comment_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments{\/number}","trees_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/trees{\/sha}","full_name":"gnocchixyz\/gnocchi","owner":{"following_url":"https:\/\/api.github.com\/users\/gnocchixyz\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/gnocchixyz\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/gnocchixyz\/orgs","url":"https:\/\/api.github.com\/users\/gnocchixyz","events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/events{\/privacy}","html_url":"https:\/\/github.com\/gnocchixyz","subscriptions_url":"https:\/\/api.github.com\/users\/gnocchixyz\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/26142905?v=4","repos_url":"https:\/\/api.github.com\/users\/gnocchixyz\/repos","received_events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/gnocchixyz\/starred{\/owner}{\/repo}","site_admin":false,"login":"gnocchixyz","type":"Organization","id":26142905,"followers_url":"https:\/\/api.github.com\/users\/gnocchixyz\/followers"},"statuses_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/statuses\/{sha}","id":91715647,"keys_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/keys{\/key_id}","size":4694,"tags_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/tags","archived":false,"downloads_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/downloads","assignees_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/assignees{\/user}","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contents\/{+path}","has_pages":false,"git_refs_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/refs{\/sha}","has_projects":false,"clone_url":"https:\/\/github.com\/gnocchixyz\/gnocchi.git","watchers_count":114,"git_tags_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/tags{\/sha}","milestones_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/milestones{\/number}","stargazers_count":114,"comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/comments{\/number}","homepage":null,"branches_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/branches{\/branch}","fork":false,"commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/commits{\/sha}","releases_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/releases{\/id}","description":"Timeseries database","has_downloads":true,"labels_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/labels{\/name}","events_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/events","contributors_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/contributors","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi","compare_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/compare\/{base}...{head}","language":"Python","git_url":"git:\/\/github.com\/gnocchixyz\/gnocchi.git","svn_url":"https:\/\/github.com\/gnocchixyz\/gnocchi","notifications_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/notifications{?since,all,participating}","has_issues":true,"ssh_url":"git@github.com:gnocchixyz\/gnocchi.git","blobs_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/blobs{\/sha}","forks":30,"hooks_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/hooks","open_issues_count":48,"watchers":114,"name":"gnocchi","license":{"spdx_id":"Apache-2.0","url":"https:\/\/api.github.com\/licenses\/apache-2.0","name":"Apache License 2.0","key":"apache-2.0"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi","created_at":"2017-05-18T16:32:52Z","archive_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/{archive_format}{\/ref}","pushed_at":"2018-02-02T09:19:47Z","forks_count":30,"default_branch":"master","teams_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/teams","open_issues":48,"languages_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/languages","git_commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/git\/commits{\/sha}","subscribers_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/subscribers","stargazers_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/stargazers"},"sha":"fb8774406dc35059848040c58593ba2fa43c7b43","ref":"master","user":{"following_url":"https:\/\/api.github.com\/users\/gnocchixyz\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/gnocchixyz\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/gnocchixyz\/orgs","url":"https:\/\/api.github.com\/users\/gnocchixyz","events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/events{\/privacy}","html_url":"https:\/\/github.com\/gnocchixyz","subscriptions_url":"https:\/\/api.github.com\/users\/gnocchixyz\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/26142905?v=4","repos_url":"https:\/\/api.github.com\/users\/gnocchixyz\/repos","received_events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/gnocchixyz\/starred{\/owner}{\/repo}","site_admin":false,"login":"gnocchixyz","type":"Organization","id":26142905,"followers_url":"https:\/\/api.github.com\/users\/gnocchixyz\/followers"},"label":"gnocchixyz:master"},"rebaseable":false,"milestone":null,"pastamaker_travis_detail":{"commit_id":85499371,"repository_id":13523406,"jobs":[{"build_id":291549388,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/291549389\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"1362.1","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":85499371,"finished_at":"2017-10-23T13:48:26Z","started_at":"2017-10-23T13:46:18Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"python","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=pep8"},"id":291549389},{"build_id":291549388,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/291549390\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"1362.2","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":85499371,"finished_at":"2017-10-23T13:50:03Z","started_at":"2017-10-23T13:46:39Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"python","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=docs"},"id":291549390},{"build_id":291549388,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/291549391\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"1362.3","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":85499371,"finished_at":"2017-10-23T13:50:52Z","started_at":"2017-10-23T13:46:21Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"python","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=docs-gnocchi.xyz"},"id":291549391},{"build_id":291549388,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/291549392\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"1362.4","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":85499371,"finished_at":"2017-10-23T13:50:03Z","started_at":"2017-10-23T13:46:13Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"python","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-mysql-ceph-upgrade-from-3.1"},"id":291549392},{"build_id":291549388,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/291549393\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"1362.5","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":85499371,"finished_at":"2017-10-23T13:50:14Z","started_at":"2017-10-23T13:46:16Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"python","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-postgresql-file-upgrade-from-3.1"},"id":291549393},{"build_id":291549388,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/291549394\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"1362.6","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":85499371,"finished_at":"2017-10-23T13:59:52Z","started_at":"2017-10-23T13:56:01Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"python","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-mysql-ceph-upgrade-from-4.0"},"id":291549394},{"build_id":291549388,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/291549395\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"1362.7","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":85499371,"finished_at":"2017-10-23T14:02:40Z","started_at":"2017-10-23T13:57:50Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"python","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-postgresql-file-upgrade-from-4.0"},"id":291549395},{"build_id":291549388,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/291549396\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"1362.8","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":85499371,"finished_at":"2017-10-23T14:23:05Z","started_at":"2017-10-23T13:57:41Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"python","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-mysql"},"id":291549396},{"build_id":291549388,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/291549397\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"1362.9","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":85499371,"finished_at":"2017-10-23T14:23:18Z","started_at":"2017-10-23T13:57:52Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"python","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-mysql"},"id":291549397},{"build_id":291549388,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/291549398\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"1362.10","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":85499371,"finished_at":"2017-10-23T14:24:32Z","started_at":"2017-10-23T13:58:44Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"python","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py27-postgresql"},"id":291549398},{"build_id":291549388,"repository_id":13523406,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/291549399\/log","repository_slug":"gnocchixyz\/gnocchi","tags":null,"number":"1362.11","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":85499371,"finished_at":"2017-10-23T14:35:29Z","started_at":"2017-10-23T14:09:07Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"language":"python","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux","env":"TARGET=py35-postgresql"},"id":291549399}],"event_type":"pull_request","finished_at":"2017-10-23T14:35:29Z","number":"1362","id":291549388,"state":"passed","pull_request_title":"WIP: Allow to rename archive policies","pull_request":true,"duration":7772,"started_at":"2017-10-23T13:46:13Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then case $TARGET in docs*) git config --get-all remote.origin.fetch; git config --unset-all remote.origin.fetch; git config --add remote.origin.fetch +refs\/heads\/*:refs\/remotes\/origin\/*; git config --get-all remote.origin.fetch; git fetch --unshallow --tags; ;; esac ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","env":["TARGET=pep8","TARGET=docs","TARGET=docs-gnocchi.xyz","TARGET=py27-mysql-ceph-upgrade-from-3.1","TARGET=py35-postgresql-file-upgrade-from-3.1","TARGET=py27-mysql-ceph-upgrade-from-4.0","TARGET=py35-postgresql-file-upgrade-from-4.0","TARGET=py27-mysql","TARGET=py35-mysql","TARGET=py27-postgresql","TARGET=py35-postgresql"],"language":"python","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"skip_join":true,"on_failure":"always","on_success":"change"},"email":false},"install":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest; fi"],"services":["docker"],"dist":"trusty",".result":"configured","deploy":{"true":{"all_branches":true,"tags":true},"password":{"secure":"c+Ccx3SHCWepiy0PUxDJ7XO9r3aNYnHjkzxF5c\/kjV8QaCJayAJEgXJnBKhvjroqwgn7JPUgpD6QdSWdB4FqjbZYQ3I3oHOO1YL0vYYa8wHG5HuMsMp4J8qvzgs3QNQDECPI1mXsPevn3VMfGszUN+6BQrHB3FbZsTtOmE+Kmgok5NCT+obsfEhVea\/UOD0XFUkVW9VJhPjQ2ytvYvFIc46\/73GQf2Er\/5DCa\/4GGDEBSD++bDJgp3kQj438xslCAFeZWDwGsa+cTc43PI0Y0+E144ySVY7QyVbZ1B66a1BGWVrXJuM+gW\/eIBCMN1FJXmD7CDdPa22azKI8dfMF7qaH3Oiv3cVovPWpubOvhTUHUFwG8+W7Fx+zUKktCWiLer\/fZvEd3W8tcgby2kNOdcUfKfDB2ImZJ+P694\/OJ4jJ8T5TQerruNoP2OstzcBMon77Ry0XawXR15SZd4JhbqhSi+h7XV6EYmct1UN4zoysA7fx\/cWHcBxdnm2G6R0gzmOiiGUd74ptU8lZ3IlEP6EZckK\/OZOdy1I8EQeUe7aiTooXZDAn07iPkDZliYRr2e36ij\/xjtWCe1AjCksn\/xdKfHOKJv5UVob495DU2GuNObe01ewXzexcnldjfp9Sb8SVEFuhHx6IvH5OC+vAq+BVYu2jwvMcVfXi3VSOkB4="},"distributions":"sdist bdist_wheel","user":"jd","provider":"pypi"}},"job_ids":[291549389,291549390,291549391,291549392,291549393,291549394,291549395,291549396,291549397,291549398,291549399],"pull_request_number":436,"resume_state":"success"},"requested_teams":[],"locked":false,"merged_by":null,"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/436","mergeable_state":"dirty","created_at":"2017-10-20T09:07:17Z","merged":false,"review_comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/436\/comments","review_comments":6,"assignees":[],"review_comment_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/comments{\/number}","pastamaker_comments":[{"body":"Tests FAILURE for HEAD d152f5cbb94233a9c614e6af1cc5bb1b1c2344f7\n\n- [TARGET=pep8](https:\/\/api.travis-ci.org\/jobs\/290361991\/log): PASSED\n- [TARGET=docs](https:\/\/api.travis-ci.org\/jobs\/290361992\/log): PASSED\n- [TARGET=docs-gnocchi.xyz](https:\/\/api.travis-ci.org\/jobs\/290361993\/log): PASSED\n- [TARGET=py27-mysql-ceph-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/290361994\/log): PASSED\n- [TARGET=py35-postgresql-file-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/290361995\/log): PASSED\n- [TARGET=py27-mysql-ceph-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/290361996\/log): PASSED\n- [TARGET=py35-postgresql-file-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/290361997\/log): PASSED\n- [TARGET=py27-mysql](https:\/\/api.travis-ci.org\/jobs\/290361998\/log): FAILED\n- [TARGET=py35-mysql](https:\/\/api.travis-ci.org\/jobs\/290361999\/log): FAILED\n- [TARGET=py27-postgresql](https:\/\/api.travis-ci.org\/jobs\/290362000\/log): FAILED\n- [TARGET=py35-postgresql](https:\/\/api.travis-ci.org\/jobs\/290362001\/log): FAILED","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/338159529","created_at":"2017-10-20T09:45:39Z","author_association":"NONE","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/436#issuecomment-338159529","updated_at":"2017-10-20T09:45:39Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/orgs","url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D","events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/events{\/privacy}","html_url":"https:\/\/github.com\/apps\/pastamaker","subscriptions_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/subscriptions","avatar_url":"https:\/\/avatars3.githubusercontent.com\/in\/2908?v=4","repos_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/repos","received_events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/starred{\/owner}{\/repo}","site_admin":false,"login":"pastamaker[bot]","type":"Bot","id":29290835,"followers_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/followers"},"id":338159529,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/436"},{"body":"Tests FAILURE for HEAD 984854677503a6dcdab2d0295102c87192180333\n\n- [TARGET=pep8](https:\/\/api.travis-ci.org\/jobs\/290378971\/log): PASSED\n- [TARGET=docs](https:\/\/api.travis-ci.org\/jobs\/290378972\/log): PASSED\n- [TARGET=docs-gnocchi.xyz](https:\/\/api.travis-ci.org\/jobs\/290378973\/log): PASSED\n- [TARGET=py27-mysql-ceph-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/290378974\/log): PASSED\n- [TARGET=py35-postgresql-file-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/290378975\/log): PASSED\n- [TARGET=py27-mysql-ceph-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/290378976\/log): FAILED\n- [TARGET=py35-postgresql-file-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/290378977\/log): PASSED\n- [TARGET=py27-mysql](https:\/\/api.travis-ci.org\/jobs\/290378978\/log): PASSED\n- [TARGET=py35-mysql](https:\/\/api.travis-ci.org\/jobs\/290378979\/log): PASSED\n- [TARGET=py27-postgresql](https:\/\/api.travis-ci.org\/jobs\/290378980\/log): FAILED\n- [TARGET=py35-postgresql](https:\/\/api.travis-ci.org\/jobs\/290378981\/log): FAILED","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/338174394","created_at":"2017-10-20T10:54:40Z","author_association":"NONE","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/436#issuecomment-338174394","updated_at":"2017-10-20T10:54:40Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/orgs","url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D","events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/events{\/privacy}","html_url":"https:\/\/github.com\/apps\/pastamaker","subscriptions_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/subscriptions","avatar_url":"https:\/\/avatars3.githubusercontent.com\/in\/2908?v=4","repos_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/repos","received_events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/starred{\/owner}{\/repo}","site_admin":false,"login":"pastamaker[bot]","type":"Bot","id":29290835,"followers_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/followers"},"id":338174394,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/436"},{"original_position":134,"diff_hunk":"@@ -0,0 +1,144 @@\n+# Copyright 2017 The Gnocchi Developers\n+#\n+#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n+#    not use this file except in compliance with the License. You may obtain\n+#    a copy of the License at\n+#\n+#         http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n+#\n+#    Unless required by applicable law or agreed to in writing, software\n+#    distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+#    License for the specific language governing permissions and limitations\n+#    under the License.\n+#\n+\n+\"\"\"Use an id as primary key for archive policy\n+\n+Revision ID: 71cfe62bcf98\n+Revises: 1e1a63d3d186\n+Create Date: 2017-09-24 19:46:22.660503\n+\n+\"\"\"\n+\n+from alembic import op\n+import sqlalchemy as sa\n+import sqlalchemy_utils\n+import uuid\n+\n+\n+# revision identifiers, used by Alembic.\n+revision = '71cfe62bcf98'\n+down_revision = '1e1a63d3d186'\n+branch_labels = None\n+depends_on = None\n+\n+archive_policy_helper = sa.Table(\n+    'archive_policy',\n+    sa.MetaData(),\n+    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(binary=True),\n+              primary_key=True),\n+    sa.Column('name', sa.String(length=255), nullable=False, unique=True),\n+)\n+\n+metric_helper = sa.Table(\n+    'metric',\n+    sa.MetaData(),\n+    sa.Column('archive_policy_id',\n+              sqlalchemy_utils.types.uuid.UUIDType(binary=True)),\n+    sa.Column('archive_policy_name', sa.String(length=255), nullable=False),\n+)\n+\n+apr_helper = sa.Table(\n+    'archive_policy_rule',\n+    sa.MetaData(),\n+    sa.Column('archive_policy_id',\n+              sqlalchemy_utils.types.uuid.UUIDType(binary=True)),\n+    sa.Column('archive_policy_name', sa.String(length=255), nullable=False),\n+)\n+\n+\n+def upgrade():\n+    connection = op.get_bind()\n+    op.add_column('archive_policy',\n+                  sa.Column('id',\n+                            sqlalchemy_utils.types.uuid.UUIDType(\n+                                binary=True),\n+                            nullable=True))\n+    op.add_column('metric',\n+                  sa.Column('archive_policy_id',\n+                            sqlalchemy_utils.types.uuid.UUIDType(\n+                                binary=True),\n+                            nullable=True))\n+    op.add_column('archive_policy_rule',\n+                  sa.Column('archive_policy_id',\n+                            sqlalchemy_utils.types.uuid.UUIDType(\n+                                binary=True),\n+                            nullable=True))\n+\n+    # Migrate data\n+    for archive_policy in connection.execute(\n+            archive_policy_helper.select()):\n+        ap_id = uuid.uuid4()\n+        connection.execute(\n+            archive_policy_helper.update().where(\n+                archive_policy_helper.c.name == archive_policy.name\n+            ).values(\n+                id=ap_id\n+            )\n+        )\n+        for metric in connection.execute(metric_helper.select().where(\n+                metric_helper.c.archive_policy_name == archive_policy.name)):\n+            connection.execute(\n+                metric_helper.update().where(\n+                    metric_helper.c.archive_policy_name ==\n+                    metric.archive_policy_name\n+                ).values(\n+                    archive_policy_id=ap_id\n+                )\n+            )\n+        for apr in connection.execute(apr_helper.select().where(\n+                apr_helper.c.archive_policy_name == archive_policy.name)):\n+            connection.execute(\n+                apr_helper.update().where(\n+                    apr_helper.c.archive_policy_name == apr.archive_policy_name\n+                ).values(\n+                    archive_policy_id=ap_id\n+                )\n+            )\n+    op.alter_column('archive_policy', 'id', nullable=False,\n+                    type_=sqlalchemy_utils.types.uuid.UUIDType(binary=True))\n+    op.alter_column('metric', 'archive_policy_id', nullable=False,\n+                    type_=sqlalchemy_utils.types.uuid.UUIDType(binary=True))\n+    op.alter_column('archive_policy_rule', 'archive_policy_id', nullable=False,\n+                    type_=sqlalchemy_utils.types.uuid.UUIDType(binary=True))\n+\n+    op.drop_constraint('fk_metric_ap_name_ap_name', 'metric',\n+                       type_='foreignkey')\n+    op.drop_constraint('fk_apr_ap_name_ap_name', 'archive_policy_rule',\n+                       type_='foreignkey')\n+    if connection and connection.engine.name == \"mysql\":\n+        op.drop_constraint('PRIMARY', 'archive_policy', type_='primary')\n+        # FIXME(0livd) When recreating a primary key named PRIMARY\n+        # the following error is raised \"Incorrect index name 'PRIMARY'\"\n+        op.create_primary_key('archive_policy_pkey', 'archive_policy', ['id'])\n+    if connection and connection.engine.name == \"postgresql\":\n+        op.drop_constraint('archive_policy_pkey', 'archive_policy',\n+                           type_='primary')\n+        op.create_primary_key('archive_policy_pkey', 'archive_policy', ['id'])\n+    op.create_foreign_key(\n+        'fk_metric_ap_id_ap_id',\n+        'metric',\n+        'archive_policy',\n+        ['archive_policy_id'],\n+        ['id'])","pull_request_review_id":70933282,"created_at":"2017-10-20T18:45:20Z","author_association":"OWNER","body":"ondelete='RESTRICT' is missing","updated_at":"2017-10-23T13:38:16Z","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/436#discussion_r146039774","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/436","state":"COMMENT","commit_id":"12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/comments\/146039774","position":null,"_links":{"self":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/comments\/146039774"},"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/436#discussion_r146039774"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/436"}},"path":"gnocchi\/indexer\/alembic\/versions\/71cfe62bcf98_use_an_id_as_primary_key_for_archive_.py","original_commit_id":"984854677503a6dcdab2d0295102c87192180333","id":146039774,"user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"}},{"original_position":140,"diff_hunk":"@@ -0,0 +1,144 @@\n+# Copyright 2017 The Gnocchi Developers\n+#\n+#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n+#    not use this file except in compliance with the License. You may obtain\n+#    a copy of the License at\n+#\n+#         http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n+#\n+#    Unless required by applicable law or agreed to in writing, software\n+#    distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+#    License for the specific language governing permissions and limitations\n+#    under the License.\n+#\n+\n+\"\"\"Use an id as primary key for archive policy\n+\n+Revision ID: 71cfe62bcf98\n+Revises: 1e1a63d3d186\n+Create Date: 2017-09-24 19:46:22.660503\n+\n+\"\"\"\n+\n+from alembic import op\n+import sqlalchemy as sa\n+import sqlalchemy_utils\n+import uuid\n+\n+\n+# revision identifiers, used by Alembic.\n+revision = '71cfe62bcf98'\n+down_revision = '1e1a63d3d186'\n+branch_labels = None\n+depends_on = None\n+\n+archive_policy_helper = sa.Table(\n+    'archive_policy',\n+    sa.MetaData(),\n+    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(binary=True),\n+              primary_key=True),\n+    sa.Column('name', sa.String(length=255), nullable=False, unique=True),\n+)\n+\n+metric_helper = sa.Table(\n+    'metric',\n+    sa.MetaData(),\n+    sa.Column('archive_policy_id',\n+              sqlalchemy_utils.types.uuid.UUIDType(binary=True)),\n+    sa.Column('archive_policy_name', sa.String(length=255), nullable=False),\n+)\n+\n+apr_helper = sa.Table(\n+    'archive_policy_rule',\n+    sa.MetaData(),\n+    sa.Column('archive_policy_id',\n+              sqlalchemy_utils.types.uuid.UUIDType(binary=True)),\n+    sa.Column('archive_policy_name', sa.String(length=255), nullable=False),\n+)\n+\n+\n+def upgrade():\n+    connection = op.get_bind()\n+    op.add_column('archive_policy',\n+                  sa.Column('id',\n+                            sqlalchemy_utils.types.uuid.UUIDType(\n+                                binary=True),\n+                            nullable=True))\n+    op.add_column('metric',\n+                  sa.Column('archive_policy_id',\n+                            sqlalchemy_utils.types.uuid.UUIDType(\n+                                binary=True),\n+                            nullable=True))\n+    op.add_column('archive_policy_rule',\n+                  sa.Column('archive_policy_id',\n+                            sqlalchemy_utils.types.uuid.UUIDType(\n+                                binary=True),\n+                            nullable=True))\n+\n+    # Migrate data\n+    for archive_policy in connection.execute(\n+            archive_policy_helper.select()):\n+        ap_id = uuid.uuid4()\n+        connection.execute(\n+            archive_policy_helper.update().where(\n+                archive_policy_helper.c.name == archive_policy.name\n+            ).values(\n+                id=ap_id\n+            )\n+        )\n+        for metric in connection.execute(metric_helper.select().where(\n+                metric_helper.c.archive_policy_name == archive_policy.name)):\n+            connection.execute(\n+                metric_helper.update().where(\n+                    metric_helper.c.archive_policy_name ==\n+                    metric.archive_policy_name\n+                ).values(\n+                    archive_policy_id=ap_id\n+                )\n+            )\n+        for apr in connection.execute(apr_helper.select().where(\n+                apr_helper.c.archive_policy_name == archive_policy.name)):\n+            connection.execute(\n+                apr_helper.update().where(\n+                    apr_helper.c.archive_policy_name == apr.archive_policy_name\n+                ).values(\n+                    archive_policy_id=ap_id\n+                )\n+            )\n+    op.alter_column('archive_policy', 'id', nullable=False,\n+                    type_=sqlalchemy_utils.types.uuid.UUIDType(binary=True))\n+    op.alter_column('metric', 'archive_policy_id', nullable=False,\n+                    type_=sqlalchemy_utils.types.uuid.UUIDType(binary=True))\n+    op.alter_column('archive_policy_rule', 'archive_policy_id', nullable=False,\n+                    type_=sqlalchemy_utils.types.uuid.UUIDType(binary=True))\n+\n+    op.drop_constraint('fk_metric_ap_name_ap_name', 'metric',\n+                       type_='foreignkey')\n+    op.drop_constraint('fk_apr_ap_name_ap_name', 'archive_policy_rule',\n+                       type_='foreignkey')\n+    if connection and connection.engine.name == \"mysql\":\n+        op.drop_constraint('PRIMARY', 'archive_policy', type_='primary')\n+        # FIXME(0livd) When recreating a primary key named PRIMARY\n+        # the following error is raised \"Incorrect index name 'PRIMARY'\"\n+        op.create_primary_key('archive_policy_pkey', 'archive_policy', ['id'])\n+    if connection and connection.engine.name == \"postgresql\":\n+        op.drop_constraint('archive_policy_pkey', 'archive_policy',\n+                           type_='primary')\n+        op.create_primary_key('archive_policy_pkey', 'archive_policy', ['id'])\n+    op.create_foreign_key(\n+        'fk_metric_ap_id_ap_id',\n+        'metric',\n+        'archive_policy',\n+        ['archive_policy_id'],\n+        ['id'])\n+    op.create_foreign_key(\n+        'fk_apr_ap_id_ap_id',\n+        'archive_policy_rule',\n+        'archive_policy',\n+        ['archive_policy_id'],\n+        ['id'])","pull_request_review_id":70933282,"created_at":"2017-10-20T18:45:30Z","author_association":"OWNER","body":"Same here.","updated_at":"2017-10-23T13:38:16Z","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/436#discussion_r146039812","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/436","state":"COMMENT","commit_id":"12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/comments\/146039812","position":null,"_links":{"self":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/comments\/146039812"},"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/436#discussion_r146039812"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/436"}},"path":"gnocchi\/indexer\/alembic\/versions\/71cfe62bcf98_use_an_id_as_primary_key_for_archive_.py","original_commit_id":"984854677503a6dcdab2d0295102c87192180333","id":146039812,"user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"}},{"original_position":6,"diff_hunk":"@@ -150,7 +150,9 @@ def process_result_value(self, value, dialect):\n class ArchivePolicy(Base, GnocchiBase, archive_policy.ArchivePolicy):\n     __tablename__ = 'archive_policy'\n \n-    name = sqlalchemy.Column(sqlalchemy.String(255), primary_key=True)\n+    id = sqlalchemy.Column(sqlalchemy_utils.UUIDType(), primary_key=True)\n+    name = sqlalchemy.Column(sqlalchemy.String(255), unique=True,","pull_request_review_id":70933282,"created_at":"2017-10-20T18:49:18Z","author_association":"OWNER","body":"You need to create a index on name with __table_args__. ","updated_at":"2017-10-23T13:38:16Z","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/436#discussion_r146040655","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/436","state":"COMMENT","commit_id":"12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/comments\/146040655","position":null,"_links":{"self":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/comments\/146040655"},"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/436#discussion_r146040655"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/436"}},"path":"gnocchi\/indexer\/sqlalchemy_base.py","original_commit_id":"984854677503a6dcdab2d0295102c87192180333","id":146040655,"user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"}},{"original_position":141,"diff_hunk":"@@ -0,0 +1,144 @@\n+# Copyright 2017 The Gnocchi Developers\n+#\n+#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n+#    not use this file except in compliance with the License. You may obtain\n+#    a copy of the License at\n+#\n+#         http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n+#\n+#    Unless required by applicable law or agreed to in writing, software\n+#    distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+#    License for the specific language governing permissions and limitations\n+#    under the License.\n+#\n+\n+\"\"\"Use an id as primary key for archive policy\n+\n+Revision ID: 71cfe62bcf98\n+Revises: 1e1a63d3d186\n+Create Date: 2017-09-24 19:46:22.660503\n+\n+\"\"\"\n+\n+from alembic import op\n+import sqlalchemy as sa\n+import sqlalchemy_utils\n+import uuid\n+\n+\n+# revision identifiers, used by Alembic.\n+revision = '71cfe62bcf98'\n+down_revision = '1e1a63d3d186'\n+branch_labels = None\n+depends_on = None\n+\n+archive_policy_helper = sa.Table(\n+    'archive_policy',\n+    sa.MetaData(),\n+    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(binary=True),\n+              primary_key=True),\n+    sa.Column('name', sa.String(length=255), nullable=False, unique=True),\n+)\n+\n+metric_helper = sa.Table(\n+    'metric',\n+    sa.MetaData(),\n+    sa.Column('archive_policy_id',\n+              sqlalchemy_utils.types.uuid.UUIDType(binary=True)),\n+    sa.Column('archive_policy_name', sa.String(length=255), nullable=False),\n+)\n+\n+apr_helper = sa.Table(\n+    'archive_policy_rule',\n+    sa.MetaData(),\n+    sa.Column('archive_policy_id',\n+              sqlalchemy_utils.types.uuid.UUIDType(binary=True)),\n+    sa.Column('archive_policy_name', sa.String(length=255), nullable=False),\n+)\n+\n+\n+def upgrade():\n+    connection = op.get_bind()\n+    op.add_column('archive_policy',\n+                  sa.Column('id',\n+                            sqlalchemy_utils.types.uuid.UUIDType(\n+                                binary=True),\n+                            nullable=True))\n+    op.add_column('metric',\n+                  sa.Column('archive_policy_id',\n+                            sqlalchemy_utils.types.uuid.UUIDType(\n+                                binary=True),\n+                            nullable=True))\n+    op.add_column('archive_policy_rule',\n+                  sa.Column('archive_policy_id',\n+                            sqlalchemy_utils.types.uuid.UUIDType(\n+                                binary=True),\n+                            nullable=True))\n+\n+    # Migrate data\n+    for archive_policy in connection.execute(\n+            archive_policy_helper.select()):\n+        ap_id = uuid.uuid4()\n+        connection.execute(\n+            archive_policy_helper.update().where(\n+                archive_policy_helper.c.name == archive_policy.name\n+            ).values(\n+                id=ap_id\n+            )\n+        )\n+        for metric in connection.execute(metric_helper.select().where(\n+                metric_helper.c.archive_policy_name == archive_policy.name)):\n+            connection.execute(\n+                metric_helper.update().where(\n+                    metric_helper.c.archive_policy_name ==\n+                    metric.archive_policy_name\n+                ).values(\n+                    archive_policy_id=ap_id\n+                )\n+            )\n+        for apr in connection.execute(apr_helper.select().where(\n+                apr_helper.c.archive_policy_name == archive_policy.name)):\n+            connection.execute(\n+                apr_helper.update().where(\n+                    apr_helper.c.archive_policy_name == apr.archive_policy_name\n+                ).values(\n+                    archive_policy_id=ap_id\n+                )\n+            )\n+    op.alter_column('archive_policy', 'id', nullable=False,\n+                    type_=sqlalchemy_utils.types.uuid.UUIDType(binary=True))\n+    op.alter_column('metric', 'archive_policy_id', nullable=False,\n+                    type_=sqlalchemy_utils.types.uuid.UUIDType(binary=True))\n+    op.alter_column('archive_policy_rule', 'archive_policy_id', nullable=False,\n+                    type_=sqlalchemy_utils.types.uuid.UUIDType(binary=True))\n+\n+    op.drop_constraint('fk_metric_ap_name_ap_name', 'metric',\n+                       type_='foreignkey')\n+    op.drop_constraint('fk_apr_ap_name_ap_name', 'archive_policy_rule',\n+                       type_='foreignkey')\n+    if connection and connection.engine.name == \"mysql\":\n+        op.drop_constraint('PRIMARY', 'archive_policy', type_='primary')\n+        # FIXME(0livd) When recreating a primary key named PRIMARY\n+        # the following error is raised \"Incorrect index name 'PRIMARY'\"\n+        op.create_primary_key('archive_policy_pkey', 'archive_policy', ['id'])\n+    if connection and connection.engine.name == \"postgresql\":\n+        op.drop_constraint('archive_policy_pkey', 'archive_policy',\n+                           type_='primary')\n+        op.create_primary_key('archive_policy_pkey', 'archive_policy', ['id'])\n+    op.create_foreign_key(\n+        'fk_metric_ap_id_ap_id',\n+        'metric',\n+        'archive_policy',\n+        ['archive_policy_id'],\n+        ['id'])\n+    op.create_foreign_key(\n+        'fk_apr_ap_id_ap_id',\n+        'archive_policy_rule',\n+        'archive_policy',\n+        ['archive_policy_id'],\n+        ['id'])\n+    op.create_index('ix_ap_name', 'archive_policy', ['name'], unique=True)","pull_request_review_id":70933282,"created_at":"2017-10-20T18:51:11Z","author_association":"OWNER","body":"According the failing postgresql tests, unique=True seems doesn't work.","updated_at":"2017-10-23T13:38:16Z","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/436#discussion_r146041035","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/436","state":"COMMENT","commit_id":"12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/comments\/146041035","position":null,"_links":{"self":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/comments\/146041035"},"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/436#discussion_r146041035"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/436"}},"path":"gnocchi\/indexer\/alembic\/versions\/71cfe62bcf98_use_an_id_as_primary_key_for_archive_.py","original_commit_id":"984854677503a6dcdab2d0295102c87192180333","id":146041035,"user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"}},{"body":"","commit_id":"984854677503a6dcdab2d0295102c87192180333","submitted_at":"2017-10-20T18:51:16Z","created_at":"2017-10-20T18:51:16Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/436#pullrequestreview-70933282","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/436","state":"DISMISSED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/436#pullrequestreview-70933282"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/436"}},"user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"id":70933282},{"body":"Tests SUCCESS for HEAD 12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3\n\n- [TARGET=pep8](https:\/\/api.travis-ci.org\/jobs\/291549389\/log): PASSED\n- [TARGET=docs](https:\/\/api.travis-ci.org\/jobs\/291549390\/log): PASSED\n- [TARGET=docs-gnocchi.xyz](https:\/\/api.travis-ci.org\/jobs\/291549391\/log): PASSED\n- [TARGET=py27-mysql-ceph-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/291549392\/log): PASSED\n- [TARGET=py35-postgresql-file-upgrade-from-3.1](https:\/\/api.travis-ci.org\/jobs\/291549393\/log): PASSED\n- [TARGET=py27-mysql-ceph-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/291549394\/log): PASSED\n- [TARGET=py35-postgresql-file-upgrade-from-4.0](https:\/\/api.travis-ci.org\/jobs\/291549395\/log): PASSED\n- [TARGET=py27-mysql](https:\/\/api.travis-ci.org\/jobs\/291549396\/log): PASSED\n- [TARGET=py35-mysql](https:\/\/api.travis-ci.org\/jobs\/291549397\/log): PASSED\n- [TARGET=py27-postgresql](https:\/\/api.travis-ci.org\/jobs\/291549398\/log): PASSED\n- [TARGET=py35-postgresql](https:\/\/api.travis-ci.org\/jobs\/291549399\/log): PASSED","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/338679638","created_at":"2017-10-23T14:35:35Z","author_association":"NONE","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/436#issuecomment-338679638","updated_at":"2017-10-23T14:35:35Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/orgs","url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D","events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/events{\/privacy}","html_url":"https:\/\/github.com\/apps\/pastamaker","subscriptions_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/subscriptions","avatar_url":"https:\/\/avatars3.githubusercontent.com\/in\/2908?v=4","repos_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/repos","received_events_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/starred{\/owner}{\/repo}","site_admin":false,"login":"pastamaker[bot]","type":"Bot","id":29290835,"followers_url":"https:\/\/api.github.com\/users\/pastamaker%5Bbot%5D\/followers"},"id":338679638,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/436"},{"body":"@sileht Thx for the review, tests are passing now :)","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/comments\/339139871","created_at":"2017-10-24T21:35:59Z","author_association":"CONTRIBUTOR","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/436#issuecomment-339139871","updated_at":"2017-10-24T21:35:59Z","state":"COMMENT","user":{"following_url":"https:\/\/api.github.com\/users\/0livd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/0livd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/0livd\/orgs","url":"https:\/\/api.github.com\/users\/0livd","events_url":"https:\/\/api.github.com\/users\/0livd\/events{\/privacy}","html_url":"https:\/\/github.com\/0livd","subscriptions_url":"https:\/\/api.github.com\/users\/0livd\/subscriptions","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/24255883?v=4","repos_url":"https:\/\/api.github.com\/users\/0livd\/repos","received_events_url":"https:\/\/api.github.com\/users\/0livd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/0livd\/starred{\/owner}{\/repo}","site_admin":false,"login":"0livd","type":"User","id":24255883,"followers_url":"https:\/\/api.github.com\/users\/0livd\/followers"},"id":339139871,"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/issues\/436"},{"original_position":5,"diff_hunk":"@@ -61,14 +61,14 @@ tests:\n   GET: $LOCATION\n   status: 200\n   response_json_paths:\n-      $.archive_policy.name: test1\n+      $.archive_policy_name: test1","pull_request_review_id":71801879,"created_at":"2017-10-25T09:56:01Z","author_association":"OWNER","body":"This changes the API so that's not good. Is there any reason you can't fetch the archive policy details with the metric and return it like before?","updated_at":"2017-10-25T09:56:14Z","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/436#discussion_r146806859","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/436","state":"COMMENT","commit_id":"12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/comments\/146806859","position":5,"_links":{"self":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/comments\/146806859"},"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/436#discussion_r146806859"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/436"}},"path":"gnocchi\/tests\/functional\/gabbits\/base.yaml","original_commit_id":"12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3","id":146806859,"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"}},{"body":"This is a very good job, thanks @0livd !","commit_id":"12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3","submitted_at":"2017-10-25T09:56:14Z","created_at":"2017-10-25T09:56:14Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/436#pullrequestreview-71801879","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/436","state":"CHANGES_REQUESTED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/436#pullrequestreview-71801879"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/436"}},"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"id":71801879},{"original_position":5,"diff_hunk":"@@ -61,14 +61,14 @@ tests:\n   GET: $LOCATION\n   status: 200\n   response_json_paths:\n-      $.archive_policy.name: test1\n+      $.archive_policy_name: test1","in_reply_to_id":146806859,"pull_request_review_id":72561756,"created_at":"2017-10-27T16:34:49Z","author_association":"CONTRIBUTOR","body":"Some tests use ``archive_policy_name`` and others ``archive_policy.name`` but I removed the conditional block that chooses between both of them and arbitrarily chose to only keep archive_policy_name  https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/436\/files#diff-9efde1e460b5fbbfdced1a5cd0b95814L205 . I first tried to replace it with the following block but with the other modifications I made, it is now always hitting the ``else``. I didn't find any way to keep the behavior of the previous conditional block... if you have any clue on that.\r\n\r\n    if 'archive_policy' in unloaded:\r\n       d['archive_policy_name'] = self.archive_policy.name\r\n    else:\r\n        d['archive_policy'] = self.archive_policy\r\n\r\n\r\n","updated_at":"2017-10-27T16:34:49Z","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/436#discussion_r147458070","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/436","state":"COMMENT","commit_id":"12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3","url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/comments\/147458070","position":5,"_links":{"self":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/comments\/147458070"},"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/436#discussion_r147458070"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/436"}},"path":"gnocchi\/tests\/functional\/gabbits\/base.yaml","original_commit_id":"12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3","id":147458070,"user":{"following_url":"https:\/\/api.github.com\/users\/0livd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/0livd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/0livd\/orgs","url":"https:\/\/api.github.com\/users\/0livd","events_url":"https:\/\/api.github.com\/users\/0livd\/events{\/privacy}","html_url":"https:\/\/github.com\/0livd","subscriptions_url":"https:\/\/api.github.com\/users\/0livd\/subscriptions","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/24255883?v=4","repos_url":"https:\/\/api.github.com\/users\/0livd\/repos","received_events_url":"https:\/\/api.github.com\/users\/0livd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/0livd\/starred{\/owner}{\/repo}","site_admin":false,"login":"0livd","type":"User","id":24255883,"followers_url":"https:\/\/api.github.com\/users\/0livd\/followers"}},{"body":"","commit_id":"12cd0b7c5f03e940d0aba9baf6c792a6cfd791f3","submitted_at":"2017-10-27T16:34:49Z","created_at":"2017-10-27T16:34:49Z","author_association":"CONTRIBUTOR","html_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/436#pullrequestreview-72561756","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/436","state":"COMMENTED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/436#pullrequestreview-72561756"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/gnocchi\/pulls\/436"}},"user":{"following_url":"https:\/\/api.github.com\/users\/0livd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/0livd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/0livd\/orgs","url":"https:\/\/api.github.com\/users\/0livd","events_url":"https:\/\/api.github.com\/users\/0livd\/events{\/privacy}","html_url":"https:\/\/github.com\/0livd","subscriptions_url":"https:\/\/api.github.com\/users\/0livd\/subscriptions","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/24255883?v=4","repos_url":"https:\/\/api.github.com\/users\/0livd\/repos","received_events_url":"https:\/\/api.github.com\/users\/0livd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/0livd\/starred{\/owner}{\/repo}","site_admin":false,"login":"0livd","type":"User","id":24255883,"followers_url":"https:\/\/api.github.com\/users\/0livd\/followers"},"id":72561756}],"pastamaker_approvals":[[],[{"bio":"Free Software Hacker, runner, foodie and FPS player.","site_admin":false,"updated_at":"2018-02-01T21:33:04Z","gravatar_id":"","hireable":null,"id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers","following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","blog":"https:\/\/julien.danjou.info\/","followers":301,"location":"Paris, France","type":"User","email":"julien@danjou.info","public_repos":69,"events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","company":null,"gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","public_gists":19,"name":"Julien Danjou","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","created_at":"2008-03-09T19:52:38Z","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","following":23,"login":"jd"}],2,[0,1]],"patch_url":"https:\/\/github.com\/gnocchixyz\/gnocchi\/pull\/436.patch","changed_files":19,"user":{"following_url":"https:\/\/api.github.com\/users\/0livd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/0livd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/0livd\/orgs","url":"https:\/\/api.github.com\/users\/0livd","events_url":"https:\/\/api.github.com\/users\/0livd\/events{\/privacy}","html_url":"https:\/\/github.com\/0livd","subscriptions_url":"https:\/\/api.github.com\/users\/0livd\/subscriptions","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/24255883?v=4","repos_url":"https:\/\/api.github.com\/users\/0livd\/repos","received_events_url":"https:\/\/api.github.com\/users\/0livd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/0livd\/starred{\/owner}{\/repo}","site_admin":false,"login":"0livd","type":"User","id":24255883,"followers_url":"https:\/\/api.github.com\/users\/0livd\/followers"}}]},{"owner":"gnocchixyz","repo":"ci-tools","updated_at":"2018-03-06T16:57:38Z","branch":"master","pulls":[{"deletions":0,"commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/pulls\/19\/commits","merge_commit_sha":"06a4d81522c6d7e059e3f1de5ff5f6c3096669fd","labels":[],"number":19,"pastamaker_travis_state":"failure","assignee":null,"pastamaker_weight":-1,"mergeable":true,"closed_at":null,"additions":2,"statuses_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/statuses\/7f0974e8b93d1bc3f150679bc260df8f066d1d11","id":168007393,"requested_reviewers":[],"maintainer_can_modify":true,"title":"add rocksdb to the image","comments":1,"merged_at":null,"state":"open","_links":{"review_comment":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/pulls\/comments{\/number}"},"commits":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/pulls\/19\/commits"},"self":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/pulls\/19"},"comments":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/issues\/19\/comments"},"html":{"href":"https:\/\/github.com\/gnocchixyz\/ci-tools\/pull\/19"},"review_comments":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/pulls\/19\/comments"},"issue":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/issues\/19"},"statuses":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/statuses\/7f0974e8b93d1bc3f150679bc260df8f066d1d11"}},"pastamaker_reviews":[{"body":"","commit_id":"7f0974e8b93d1bc3f150679bc260df8f066d1d11","submitted_at":"2018-03-06T16:57:38Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/ci-tools\/pull\/19#pullrequestreview-101628524","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/pulls\/19","state":"COMMENTED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/ci-tools\/pull\/19#pullrequestreview-101628524"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/pulls\/19"}},"user":{"following_url":"https:\/\/api.github.com\/users\/chungg\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/chungg\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/chungg\/orgs","url":"https:\/\/api.github.com\/users\/chungg","events_url":"https:\/\/api.github.com\/users\/chungg\/events{\/privacy}","html_url":"https:\/\/github.com\/chungg","subscriptions_url":"https:\/\/api.github.com\/users\/chungg\/subscriptions","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/5091603?v=4","repos_url":"https:\/\/api.github.com\/users\/chungg\/repos","received_events_url":"https:\/\/api.github.com\/users\/chungg\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/chungg\/starred{\/owner}{\/repo}","site_admin":false,"login":"chungg","type":"User","id":5091603,"followers_url":"https:\/\/api.github.com\/users\/chungg\/followers"},"id":101628524}],"pastamaker_commits":[{"files":[{"status":"modified","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/ci-tools\/raw\/7f0974e8b93d1bc3f150679bc260df8f066d1d11\/dockerhub\/travis-ci-image.dockerfile","blob_url":"https:\/\/github.com\/gnocchixyz\/ci-tools\/blob\/7f0974e8b93d1bc3f150679bc260df8f066d1d11\/dockerhub\/travis-ci-image.dockerfile","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/contents\/dockerhub\/travis-ci-image.dockerfile?ref=7f0974e8b93d1bc3f150679bc260df8f066d1d11","filename":"dockerhub\/travis-ci-image.dockerfile","sha":"a8de78d11a4b9fcb3e2108a689ac2c2aa1ab1853","additions":2,"patch":"@@ -28,6 +28,8 @@ RUN apt-get update -y && apt-get install -qy \\\n         librados-dev \\\n         liberasurecode-dev \\\n         ceph \\\n+# For Rocksdb\n+        librocksdb-dev\n # For prometheus\n         libsnappy-dev \\\n         libprotobuf-dev \\","changes":2}],"committer":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"stats":{"deletions":0,"additions":2,"total":2},"author":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/commits\/7f0974e8b93d1bc3f150679bc260df8f066d1d11","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/commits\/7f0974e8b93d1bc3f150679bc260df8f066d1d11\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/ci-tools\/commit\/7f0974e8b93d1bc3f150679bc260df8f066d1d11","sha":"7f0974e8b93d1bc3f150679bc260df8f066d1d11","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/commits\/9f431c616f5f112a74dd4cfc12318986e73bdf55","sha":"9f431c616f5f112a74dd4cfc12318986e73bdf55","html_url":"https:\/\/github.com\/gnocchixyz\/ci-tools\/commit\/9f431c616f5f112a74dd4cfc12318986e73bdf55"}],"commit":{"committer":{"date":"2018-02-08T15:39:00Z","name":"Mehdi Abaakouk","email":"sileht@sileht.net"},"author":{"date":"2018-02-08T15:38:56Z","name":"Mehdi Abaakouk","email":"sileht@sileht.net"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/git\/commits\/7f0974e8b93d1bc3f150679bc260df8f066d1d11","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/git\/trees\/bf4c5280c01f7daa97730a2edce0a610998f3fbe","sha":"bf4c5280c01f7daa97730a2edce0a610998f3fbe"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"add rocksdb to the image"}}],"diff_url":"https:\/\/github.com\/gnocchixyz\/ci-tools\/pull\/19.diff","pastamaker_ci_statuses":{},"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/issues\/19","body":"","head":{"repo":{"issues_url":"https:\/\/api.github.com\/repos\/sileht\/ci-tools\/issues{\/number}","deployments_url":"https:\/\/api.github.com\/repos\/sileht\/ci-tools\/deployments","has_wiki":true,"forks_url":"https:\/\/api.github.com\/repos\/sileht\/ci-tools\/forks","mirror_url":null,"issue_events_url":"https:\/\/api.github.com\/repos\/sileht\/ci-tools\/issues\/events{\/number}","subscription_url":"https:\/\/api.github.com\/repos\/sileht\/ci-tools\/subscription","merges_url":"https:\/\/api.github.com\/repos\/sileht\/ci-tools\/merges","collaborators_url":"https:\/\/api.github.com\/repos\/sileht\/ci-tools\/collaborators{\/collaborator}","updated_at":"2017-06-09T15:07:55Z","private":false,"pulls_url":"https:\/\/api.github.com\/repos\/sileht\/ci-tools\/pulls{\/number}","issue_comment_url":"https:\/\/api.github.com\/repos\/sileht\/ci-tools\/issues\/comments{\/number}","trees_url":"https:\/\/api.github.com\/repos\/sileht\/ci-tools\/git\/trees{\/sha}","full_name":"sileht\/ci-tools","owner":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"statuses_url":"https:\/\/api.github.com\/repos\/sileht\/ci-tools\/statuses\/{sha}","id":93870679,"keys_url":"https:\/\/api.github.com\/repos\/sileht\/ci-tools\/keys{\/key_id}","size":18,"tags_url":"https:\/\/api.github.com\/repos\/sileht\/ci-tools\/tags","archived":false,"contributors_url":"https:\/\/api.github.com\/repos\/sileht\/ci-tools\/contributors","downloads_url":"https:\/\/api.github.com\/repos\/sileht\/ci-tools\/downloads","has_downloads":true,"assignees_url":"https:\/\/api.github.com\/repos\/sileht\/ci-tools\/assignees{\/user}","contents_url":"https:\/\/api.github.com\/repos\/sileht\/ci-tools\/contents\/{+path}","has_pages":false,"git_refs_url":"https:\/\/api.github.com\/repos\/sileht\/ci-tools\/git\/refs{\/sha}","has_projects":true,"clone_url":"https:\/\/github.com\/sileht\/ci-tools.git","watchers_count":0,"git_tags_url":"https:\/\/api.github.com\/repos\/sileht\/ci-tools\/git\/tags{\/sha}","milestones_url":"https:\/\/api.github.com\/repos\/sileht\/ci-tools\/milestones{\/number}","stargazers_count":0,"homepage":null,"branches_url":"https:\/\/api.github.com\/repos\/sileht\/ci-tools\/branches{\/branch}","fork":true,"commits_url":"https:\/\/api.github.com\/repos\/sileht\/ci-tools\/commits{\/sha}","releases_url":"https:\/\/api.github.com\/repos\/sileht\/ci-tools\/releases{\/id}","description":null,"archive_url":"https:\/\/api.github.com\/repos\/sileht\/ci-tools\/{archive_format}{\/ref}","labels_url":"https:\/\/api.github.com\/repos\/sileht\/ci-tools\/labels{\/name}","events_url":"https:\/\/api.github.com\/repos\/sileht\/ci-tools\/events","comments_url":"https:\/\/api.github.com\/repos\/sileht\/ci-tools\/comments{\/number}","html_url":"https:\/\/github.com\/sileht\/ci-tools","forks":0,"compare_url":"https:\/\/api.github.com\/repos\/sileht\/ci-tools\/compare\/{base}...{head}","language":"Python","git_url":"git:\/\/github.com\/sileht\/ci-tools.git","svn_url":"https:\/\/github.com\/sileht\/ci-tools","notifications_url":"https:\/\/api.github.com\/repos\/sileht\/ci-tools\/notifications{?since,all,participating}","has_issues":false,"ssh_url":"git@github.com:sileht\/ci-tools.git","blobs_url":"https:\/\/api.github.com\/repos\/sileht\/ci-tools\/git\/blobs{\/sha}","languages_url":"https:\/\/api.github.com\/repos\/sileht\/ci-tools\/languages","hooks_url":"https:\/\/api.github.com\/repos\/sileht\/ci-tools\/hooks","open_issues_count":0,"watchers":0,"name":"ci-tools","license":null,"url":"https:\/\/api.github.com\/repos\/sileht\/ci-tools","created_at":"2017-06-09T15:07:54Z","pushed_at":"2018-02-08T15:41:33Z","forks_count":0,"default_branch":"master","teams_url":"https:\/\/api.github.com\/repos\/sileht\/ci-tools\/teams","open_issues":0,"git_commits_url":"https:\/\/api.github.com\/repos\/sileht\/ci-tools\/git\/commits{\/sha}","subscribers_url":"https:\/\/api.github.com\/repos\/sileht\/ci-tools\/subscribers","stargazers_url":"https:\/\/api.github.com\/repos\/sileht\/ci-tools\/stargazers"},"sha":"7f0974e8b93d1bc3f150679bc260df8f066d1d11","ref":"sileht\/rocksdb","user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"label":"sileht:sileht\/rocksdb"},"pastamaker_travis_detail":{"commit_id":100800029,"repository_id":13796168,"jobs":[{"build_id":339037531,"repository_id":13796168,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/339037532\/log","repository_slug":"gnocchixyz\/ci-tools","tags":null,"number":"37.1","allow_failure":false,"queue":"builds.gce","state":"failed","commit_id":100800029,"finished_at":"2018-02-08T15:44:14Z","started_at":"2018-02-08T15:42:08Z","config":{"before_script":null,"sudo":"required","group":"stable","install":["pip install tox"],"language":"python","script":["tox","docker build --tag gnocchi-ci --file=dockerhub\/travis-ci-image.dockerfile .","docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchi-ci tox -epep8"],"python":3.5,"cache":{"directories":["~\/.cache\/pip"]},".result":"configured","services":["docker"],"dist":"trusty","os":"linux","env":"TOXENV=py27"},"id":339037532},{"build_id":339037531,"repository_id":13796168,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/339037533\/log","repository_slug":"gnocchixyz\/ci-tools","tags":null,"number":"37.2","allow_failure":false,"queue":"builds.gce","state":"failed","commit_id":100800029,"finished_at":"2018-02-08T15:43:17Z","started_at":"2018-02-08T15:42:06Z","config":{"before_script":null,"sudo":"required","group":"stable","install":["pip install tox"],"language":"python","script":["tox","docker build --tag gnocchi-ci --file=dockerhub\/travis-ci-image.dockerfile .","docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchi-ci tox -epep8"],"python":3.5,"cache":{"directories":["~\/.cache\/pip"]},".result":"configured","services":["docker"],"dist":"trusty","os":"linux","env":"TOXENV=py35"},"id":339037533},{"build_id":339037531,"repository_id":13796168,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/339037534\/log","repository_slug":"gnocchixyz\/ci-tools","tags":null,"number":"37.3","allow_failure":false,"queue":"builds.gce","state":"failed","commit_id":100800029,"finished_at":"2018-02-08T15:43:56Z","started_at":"2018-02-08T15:42:12Z","config":{"before_script":null,"sudo":"required","group":"stable","install":["pip install tox"],"language":"python","script":["tox","docker build --tag gnocchi-ci --file=dockerhub\/travis-ci-image.dockerfile .","docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchi-ci tox -epep8"],"python":3.5,"cache":{"directories":["~\/.cache\/pip"]},".result":"configured","services":["docker"],"dist":"trusty","os":"linux","env":"TOXENV=pep8"},"id":339037534}],"event_type":"pull_request","finished_at":"2018-02-08T15:44:14Z","number":"37","id":339037531,"state":"failed","pull_request_title":"add rocksdb to the image","pull_request":true,"duration":301,"started_at":"2018-02-08T15:42:06Z","config":{"before_script":null,"sudo":"required","group":"stable","install":["pip install tox"],"language":"python","script":["tox","docker build --tag gnocchi-ci --file=dockerhub\/travis-ci-image.dockerfile .","docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchi-ci tox -epep8"],"python":3.5,"cache":{"directories":["~\/.cache\/pip"]},"env":["TOXENV=py27","TOXENV=py35","TOXENV=pep8"],"services":["docker"],"dist":"trusty",".result":"configured"},"job_ids":[339037532,339037533,339037534],"pull_request_number":19,"resume_state":"failure"},"commits":1,"author_association":"OWNER","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/issues\/19\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/ci-tools\/pull\/19","pastamaker_travis_url":"https:\/\/travis-ci.org\/gnocchixyz\/ci-tools\/builds\/339037531?utm_source=github_status&utm_medium=notification","updated_at":"2018-03-06T16:57:38Z","pastamaker_approved":false,"base":{"repo":{"issues_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/issues{\/number}","deployments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/deployments","has_wiki":true,"forks_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/forks","mirror_url":null,"issue_events_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/issues\/events{\/number}","subscription_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/subscription","merges_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/merges","collaborators_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/collaborators{\/collaborator}","updated_at":"2018-02-05T16:32:45Z","private":false,"pulls_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/pulls{\/number}","issue_comment_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/issues\/comments{\/number}","trees_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/git\/trees{\/sha}","full_name":"gnocchixyz\/ci-tools","owner":{"following_url":"https:\/\/api.github.com\/users\/gnocchixyz\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/gnocchixyz\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/gnocchixyz\/orgs","url":"https:\/\/api.github.com\/users\/gnocchixyz","events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/events{\/privacy}","html_url":"https:\/\/github.com\/gnocchixyz","subscriptions_url":"https:\/\/api.github.com\/users\/gnocchixyz\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/26142905?v=4","repos_url":"https:\/\/api.github.com\/users\/gnocchixyz\/repos","received_events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/gnocchixyz\/starred{\/owner}{\/repo}","site_admin":false,"login":"gnocchixyz","type":"Organization","id":26142905,"followers_url":"https:\/\/api.github.com\/users\/gnocchixyz\/followers"},"statuses_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/statuses\/{sha}","id":93603590,"keys_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/keys{\/key_id}","size":18,"tags_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/tags","archived":false,"contributors_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/contributors","downloads_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/downloads","has_downloads":true,"assignees_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/assignees{\/user}","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/contents\/{+path}","has_pages":false,"git_refs_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/git\/refs{\/sha}","has_projects":false,"clone_url":"https:\/\/github.com\/gnocchixyz\/ci-tools.git","watchers_count":1,"git_tags_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/git\/tags{\/sha}","milestones_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/milestones{\/number}","stargazers_count":1,"homepage":null,"branches_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/branches{\/branch}","fork":false,"commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/commits{\/sha}","releases_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/releases{\/id}","description":null,"archive_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/{archive_format}{\/ref}","labels_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/labels{\/name}","events_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/events","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/comments{\/number}","html_url":"https:\/\/github.com\/gnocchixyz\/ci-tools","forks":3,"compare_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/compare\/{base}...{head}","language":"Python","git_url":"git:\/\/github.com\/gnocchixyz\/ci-tools.git","svn_url":"https:\/\/github.com\/gnocchixyz\/ci-tools","notifications_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/notifications{?since,all,participating}","has_issues":true,"ssh_url":"git@github.com:gnocchixyz\/ci-tools.git","blobs_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/git\/blobs{\/sha}","languages_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/languages","hooks_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/hooks","open_issues_count":1,"watchers":1,"name":"ci-tools","license":null,"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools","created_at":"2017-06-07T07:05:15Z","pushed_at":"2018-02-10T11:59:36Z","forks_count":3,"default_branch":"master","teams_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/teams","open_issues":1,"git_commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/git\/commits{\/sha}","subscribers_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/subscribers","stargazers_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/stargazers"},"sha":"9f431c616f5f112a74dd4cfc12318986e73bdf55","ref":"master","user":{"following_url":"https:\/\/api.github.com\/users\/gnocchixyz\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/gnocchixyz\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/gnocchixyz\/orgs","url":"https:\/\/api.github.com\/users\/gnocchixyz","events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/events{\/privacy}","html_url":"https:\/\/github.com\/gnocchixyz","subscriptions_url":"https:\/\/api.github.com\/users\/gnocchixyz\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/26142905?v=4","repos_url":"https:\/\/api.github.com\/users\/gnocchixyz\/repos","received_events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/gnocchixyz\/starred{\/owner}{\/repo}","site_admin":false,"login":"gnocchixyz","type":"Organization","id":26142905,"followers_url":"https:\/\/api.github.com\/users\/gnocchixyz\/followers"},"label":"gnocchixyz:master"},"rebaseable":true,"milestone":null,"requested_teams":[],"locked":false,"merged_by":null,"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/pulls\/19","mergeable_state":"behind","created_at":"2018-02-08T15:41:30Z","merged":false,"review_comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/pulls\/19\/comments","review_comments":1,"assignees":[],"review_comment_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/ci-tools\/pulls\/comments{\/number}","pastamaker_comments":[],"pastamaker_approvals":[[],[],1,[0]],"patch_url":"https:\/\/github.com\/gnocchixyz\/ci-tools\/pull\/19.patch","changed_files":1,"user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"}}]},{"owner":"jd","repo":"pifpaf","updated_at":"2018-02-08T15:31:01Z","branch":"master","pulls":[{"deletions":0,"commits_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/pulls\/98\/commits","merge_commit_sha":"5d5c8c66a766b112b139ef62589633a061171b74","labels":[],"number":98,"pastamaker_travis_state":"failure","assignee":null,"pastamaker_weight":-1,"mergeable":true,"closed_at":null,"additions":9,"statuses_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/statuses\/f4fc234333659efc524ed6d5e8cfef3f531779a9","id":168001040,"requested_reviewers":[],"maintainer_can_modify":true,"title":"WIP: gnocchi: support for rocksdb","comments":1,"merged_at":null,"state":"open","_links":{"review_comment":{"href":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/pulls\/comments{\/number}"},"commits":{"href":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/pulls\/98\/commits"},"self":{"href":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/pulls\/98"},"comments":{"href":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/issues\/98\/comments"},"html":{"href":"https:\/\/github.com\/jd\/pifpaf\/pull\/98"},"review_comments":{"href":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/pulls\/98\/comments"},"issue":{"href":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/issues\/98"},"statuses":{"href":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/statuses\/f4fc234333659efc524ed6d5e8cfef3f531779a9"}},"pastamaker_reviews":[],"pastamaker_commits":[{"files":[{"status":"modified","deletions":0,"raw_url":"https:\/\/github.com\/jd\/pifpaf\/raw\/f4fc234333659efc524ed6d5e8cfef3f531779a9\/pifpaf\/drivers\/gnocchi.py","blob_url":"https:\/\/github.com\/jd\/pifpaf\/blob\/f4fc234333659efc524ed6d5e8cfef3f531779a9\/pifpaf\/drivers\/gnocchi.py","contents_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/contents\/pifpaf\/drivers\/gnocchi.py?ref=f4fc234333659efc524ed6d5e8cfef3f531779a9","filename":"pifpaf\/drivers\/gnocchi.py","sha":"6269cb076629dd89bfd5b13415b141e07d32298d","additions":9,"patch":"@@ -145,6 +145,15 @@ def _setUp(self):\n                     storage_parsed.path or self.tempdir\n                 ),\n             }\n+        elif storage_driver == \"rocksdb\":\n+            storage_config = {\n+                \"rocksdb_basepath\": (\n+                    storage_parsed.path or os.path.join(\n+                        self.tempdir, \"storage.db\")\n+                ),\n+                \"file_basepath\": self.tempdir,\n+            }\n+\n         else:\n             raise RuntimeError(\"Storage driver %s is not supported\" %\n                                storage_driver)","changes":9}],"committer":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"stats":{"deletions":0,"additions":9,"total":9},"author":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/commits\/f4fc234333659efc524ed6d5e8cfef3f531779a9","comments_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/commits\/f4fc234333659efc524ed6d5e8cfef3f531779a9\/comments","html_url":"https:\/\/github.com\/jd\/pifpaf\/commit\/f4fc234333659efc524ed6d5e8cfef3f531779a9","sha":"f4fc234333659efc524ed6d5e8cfef3f531779a9","parents":[{"url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/commits\/5cf00c01a400de025fa4940c3b2dce06a46e7535","sha":"5cf00c01a400de025fa4940c3b2dce06a46e7535","html_url":"https:\/\/github.com\/jd\/pifpaf\/commit\/5cf00c01a400de025fa4940c3b2dce06a46e7535"}],"commit":{"committer":{"date":"2018-02-08T15:19:18Z","name":"Mehdi Abaakouk","email":"sileht@sileht.net"},"author":{"date":"2018-02-08T15:19:09Z","name":"Mehdi Abaakouk","email":"sileht@sileht.net"},"url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/git\/commits\/f4fc234333659efc524ed6d5e8cfef3f531779a9","tree":{"url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/git\/trees\/5801c7c9ccc3404c6e82431ff1ee2cb8943c60b5","sha":"5801c7c9ccc3404c6e82431ff1ee2cb8943c60b5"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"WIP: gnocchi: support for rocksdb"}}],"diff_url":"https:\/\/github.com\/jd\/pifpaf\/pull\/98.diff","pastamaker_ci_statuses":{},"issue_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/issues\/98","body":"","head":{"repo":{"issues_url":"https:\/\/api.github.com\/repos\/sileht\/pifpaf\/issues{\/number}","deployments_url":"https:\/\/api.github.com\/repos\/sileht\/pifpaf\/deployments","has_wiki":true,"forks_url":"https:\/\/api.github.com\/repos\/sileht\/pifpaf\/forks","mirror_url":null,"issue_events_url":"https:\/\/api.github.com\/repos\/sileht\/pifpaf\/issues\/events{\/number}","subscription_url":"https:\/\/api.github.com\/repos\/sileht\/pifpaf\/subscription","merges_url":"https:\/\/api.github.com\/repos\/sileht\/pifpaf\/merges","collaborators_url":"https:\/\/api.github.com\/repos\/sileht\/pifpaf\/collaborators{\/collaborator}","updated_at":"2016-03-29T12:37:50Z","private":false,"pulls_url":"https:\/\/api.github.com\/repos\/sileht\/pifpaf\/pulls{\/number}","issue_comment_url":"https:\/\/api.github.com\/repos\/sileht\/pifpaf\/issues\/comments{\/number}","trees_url":"https:\/\/api.github.com\/repos\/sileht\/pifpaf\/git\/trees{\/sha}","full_name":"sileht\/pifpaf","owner":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"statuses_url":"https:\/\/api.github.com\/repos\/sileht\/pifpaf\/statuses\/{sha}","id":54974508,"keys_url":"https:\/\/api.github.com\/repos\/sileht\/pifpaf\/keys{\/key_id}","size":465,"tags_url":"https:\/\/api.github.com\/repos\/sileht\/pifpaf\/tags","archived":false,"contributors_url":"https:\/\/api.github.com\/repos\/sileht\/pifpaf\/contributors","downloads_url":"https:\/\/api.github.com\/repos\/sileht\/pifpaf\/downloads","has_downloads":true,"assignees_url":"https:\/\/api.github.com\/repos\/sileht\/pifpaf\/assignees{\/user}","contents_url":"https:\/\/api.github.com\/repos\/sileht\/pifpaf\/contents\/{+path}","has_pages":false,"git_refs_url":"https:\/\/api.github.com\/repos\/sileht\/pifpaf\/git\/refs{\/sha}","has_projects":true,"clone_url":"https:\/\/github.com\/sileht\/pifpaf.git","watchers_count":0,"git_tags_url":"https:\/\/api.github.com\/repos\/sileht\/pifpaf\/git\/tags{\/sha}","milestones_url":"https:\/\/api.github.com\/repos\/sileht\/pifpaf\/milestones{\/number}","stargazers_count":0,"homepage":null,"branches_url":"https:\/\/api.github.com\/repos\/sileht\/pifpaf\/branches{\/branch}","fork":true,"commits_url":"https:\/\/api.github.com\/repos\/sileht\/pifpaf\/commits{\/sha}","releases_url":"https:\/\/api.github.com\/repos\/sileht\/pifpaf\/releases{\/id}","description":"Python fixtures and daemon managing tools for functional testing","archive_url":"https:\/\/api.github.com\/repos\/sileht\/pifpaf\/{archive_format}{\/ref}","labels_url":"https:\/\/api.github.com\/repos\/sileht\/pifpaf\/labels{\/name}","events_url":"https:\/\/api.github.com\/repos\/sileht\/pifpaf\/events","comments_url":"https:\/\/api.github.com\/repos\/sileht\/pifpaf\/comments{\/number}","html_url":"https:\/\/github.com\/sileht\/pifpaf","forks":0,"compare_url":"https:\/\/api.github.com\/repos\/sileht\/pifpaf\/compare\/{base}...{head}","language":"Python","git_url":"git:\/\/github.com\/sileht\/pifpaf.git","svn_url":"https:\/\/github.com\/sileht\/pifpaf","notifications_url":"https:\/\/api.github.com\/repos\/sileht\/pifpaf\/notifications{?since,all,participating}","has_issues":false,"ssh_url":"git@github.com:sileht\/pifpaf.git","blobs_url":"https:\/\/api.github.com\/repos\/sileht\/pifpaf\/git\/blobs{\/sha}","languages_url":"https:\/\/api.github.com\/repos\/sileht\/pifpaf\/languages","hooks_url":"https:\/\/api.github.com\/repos\/sileht\/pifpaf\/hooks","open_issues_count":0,"watchers":0,"name":"pifpaf","license":{"spdx_id":"Apache-2.0","url":"https:\/\/api.github.com\/licenses\/apache-2.0","name":"Apache License 2.0","key":"apache-2.0"},"url":"https:\/\/api.github.com\/repos\/sileht\/pifpaf","created_at":"2016-03-29T12:37:48Z","pushed_at":"2018-03-15T20:10:12Z","forks_count":0,"default_branch":"master","teams_url":"https:\/\/api.github.com\/repos\/sileht\/pifpaf\/teams","open_issues":0,"git_commits_url":"https:\/\/api.github.com\/repos\/sileht\/pifpaf\/git\/commits{\/sha}","subscribers_url":"https:\/\/api.github.com\/repos\/sileht\/pifpaf\/subscribers","stargazers_url":"https:\/\/api.github.com\/repos\/sileht\/pifpaf\/stargazers"},"sha":"f4fc234333659efc524ed6d5e8cfef3f531779a9","ref":"sileht\/rocksdb","user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"label":"sileht:sileht\/rocksdb"},"pastamaker_travis_detail":{"commit_id":100796827,"repository_id":8028639,"jobs":[{"build_id":339026639,"repository_id":8028639,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/339026640\/log","repository_slug":"jd\/pifpaf","tags":null,"number":"648.1","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":100796827,"finished_at":"2018-02-08T15:30:08Z","started_at":"2018-02-08T15:20:18Z","config":{"cache":["pip"],"dist":"trusty","install":["pip install tox-travis .[test,ceph]","mkdir tmpxattr"],"language":"python","script":"TMPDIR_FOR_XATTR=$(pwd)\/tmpxattr tox -v -- $PIFPAF_TESTS","python":2.7,"sudo":"required","before_install":["find ~\/.cache\/pip -name '*.dev*' -delete","wget -q -O- 'https:\/\/download.ceph.com\/keys\/release.asc' | sudo apt-key add -","echo deb https:\/\/download.ceph.com\/debian-jewel\/ trusty main | sudo tee \/etc\/apt\/sources.list.d\/ceph.list","sudo apt-get -qq update","sudo apt-get purge -y mysql-server-5.6 mysql-server-core-5.6 mysql-client-core-5.6 mysql-client-5.6 postgresql* libpq*","sudo rm -rf \/var\/lib\/mysql","sudo apt-get install -y mongodb-server mysql-server-5.5 redis-server zookeeper mongodb couchdb couchdb-bin nodejs npm ceph librados-dev python-dev gcc liberasurecode-dev liberasurecode1 postgresql libpq-dev","sudo npm install s3rver -g","wget https:\/\/dl.influxdata.com\/influxdb\/releases\/influxdb_0.13.0_amd64.deb","sudo dpkg -i influxdb_0.13.0_amd64.deb","sudo chmod 777 \/var\/log\/zookeeper","wget http:\/\/www.apache.org\/dist\/kafka\/1.0.0\/kafka_2.12-1.0.0.tgz -O \/opt\/kafka.tar.gz","tar -xzf \/opt\/kafka.tar.gz -C \/opt","ln -s \/opt\/kafka_2.12-1.0.0 \/opt\/kafka"],".result":"configured","group":"stable","addons":{},"os":"linux"},"id":339026640},{"build_id":339026639,"repository_id":8028639,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/339026641\/log","repository_slug":"jd\/pifpaf","tags":null,"number":"648.2","allow_failure":false,"queue":"builds.gce","state":"failed","commit_id":100796827,"finished_at":"2018-03-16T11:10:52Z","started_at":"2018-03-16T10:59:55Z","config":{"cache":["pip"],"dist":"trusty","install":["pip install tox-travis .[test,ceph]","mkdir tmpxattr"],"language":"python","script":"TMPDIR_FOR_XATTR=$(pwd)\/tmpxattr tox -v -- $PIFPAF_TESTS","python":3.5,"sudo":"required","before_install":["find ~\/.cache\/pip -name '*.dev*' -delete","wget -q -O- 'https:\/\/download.ceph.com\/keys\/release.asc' | sudo apt-key add -","echo deb https:\/\/download.ceph.com\/debian-jewel\/ trusty main | sudo tee \/etc\/apt\/sources.list.d\/ceph.list","sudo apt-get -qq update","sudo apt-get purge -y mysql-server-5.6 mysql-server-core-5.6 mysql-client-core-5.6 mysql-client-5.6 postgresql* libpq*","sudo rm -rf \/var\/lib\/mysql","sudo apt-get install -y mongodb-server mysql-server-5.5 redis-server zookeeper mongodb couchdb couchdb-bin nodejs npm ceph librados-dev python-dev gcc liberasurecode-dev liberasurecode1 postgresql libpq-dev","sudo npm install s3rver -g","wget https:\/\/dl.influxdata.com\/influxdb\/releases\/influxdb_0.13.0_amd64.deb","sudo dpkg -i influxdb_0.13.0_amd64.deb","sudo chmod 777 \/var\/log\/zookeeper","wget http:\/\/www.apache.org\/dist\/kafka\/1.0.0\/kafka_2.12-1.0.0.tgz -O \/opt\/kafka.tar.gz","tar -xzf \/opt\/kafka.tar.gz -C \/opt","ln -s \/opt\/kafka_2.12-1.0.0 \/opt\/kafka"],".result":"configured","group":"stable","addons":{},"os":"linux"},"id":339026641},{"build_id":339026639,"repository_id":8028639,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/339026642\/log","repository_slug":"jd\/pifpaf","tags":null,"number":"648.3","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":100796827,"finished_at":"2018-02-08T15:30:53Z","started_at":"2018-02-08T15:20:16Z","config":{"cache":["pip"],"dist":"trusty","install":["pip install tox-travis .[test,ceph]","mkdir tmpxattr"],"language":"python","script":"TMPDIR_FOR_XATTR=$(pwd)\/tmpxattr tox -v -- $PIFPAF_TESTS","python":3.6,"sudo":"required","before_install":["find ~\/.cache\/pip -name '*.dev*' -delete","wget -q -O- 'https:\/\/download.ceph.com\/keys\/release.asc' | sudo apt-key add -","echo deb https:\/\/download.ceph.com\/debian-jewel\/ trusty main | sudo tee \/etc\/apt\/sources.list.d\/ceph.list","sudo apt-get -qq update","sudo apt-get purge -y mysql-server-5.6 mysql-server-core-5.6 mysql-client-core-5.6 mysql-client-5.6 postgresql* libpq*","sudo rm -rf \/var\/lib\/mysql","sudo apt-get install -y mongodb-server mysql-server-5.5 redis-server zookeeper mongodb couchdb couchdb-bin nodejs npm ceph librados-dev python-dev gcc liberasurecode-dev liberasurecode1 postgresql libpq-dev","sudo npm install s3rver -g","wget https:\/\/dl.influxdata.com\/influxdb\/releases\/influxdb_0.13.0_amd64.deb","sudo dpkg -i influxdb_0.13.0_amd64.deb","sudo chmod 777 \/var\/log\/zookeeper","wget http:\/\/www.apache.org\/dist\/kafka\/1.0.0\/kafka_2.12-1.0.0.tgz -O \/opt\/kafka.tar.gz","tar -xzf \/opt\/kafka.tar.gz -C \/opt","ln -s \/opt\/kafka_2.12-1.0.0 \/opt\/kafka"],".result":"configured","group":"stable","addons":{},"os":"linux"},"id":339026642}],"event_type":"pull_request","finished_at":"2018-03-16T11:10:52Z","number":"648","id":339026639,"state":"failed","pull_request_title":"WIP: gnocchi: support for rocksdb","pull_request":true,"duration":1884,"started_at":"2018-03-16T10:59:55Z","config":{"cache":["pip"],"dist":"trusty","install":["pip install tox-travis .[test,ceph]","mkdir tmpxattr"],"language":"python","script":"TMPDIR_FOR_XATTR=$(pwd)\/tmpxattr tox -v -- $PIFPAF_TESTS","python":[2.7,3.5,3.6],"sudo":"required","before_install":["find ~\/.cache\/pip -name '*.dev*' -delete","wget -q -O- 'https:\/\/download.ceph.com\/keys\/release.asc' | sudo apt-key add -","echo deb https:\/\/download.ceph.com\/debian-jewel\/ trusty main | sudo tee \/etc\/apt\/sources.list.d\/ceph.list","sudo apt-get -qq update","sudo apt-get purge -y mysql-server-5.6 mysql-server-core-5.6 mysql-client-core-5.6 mysql-client-5.6 postgresql* libpq*","sudo rm -rf \/var\/lib\/mysql","sudo apt-get install -y mongodb-server mysql-server-5.5 redis-server zookeeper mongodb couchdb couchdb-bin nodejs npm ceph librados-dev python-dev gcc liberasurecode-dev liberasurecode1 postgresql libpq-dev","sudo npm install s3rver -g","wget https:\/\/dl.influxdata.com\/influxdb\/releases\/influxdb_0.13.0_amd64.deb","sudo dpkg -i influxdb_0.13.0_amd64.deb","sudo chmod 777 \/var\/log\/zookeeper","wget http:\/\/www.apache.org\/dist\/kafka\/1.0.0\/kafka_2.12-1.0.0.tgz -O \/opt\/kafka.tar.gz","tar -xzf \/opt\/kafka.tar.gz -C \/opt","ln -s \/opt\/kafka_2.12-1.0.0 \/opt\/kafka"],".result":"configured","group":"stable","deploy":{"true":{"tags":true},"password":{"secure":"OwLNIwY6Oa0\/e297mako9MaPM9jwIYxkJnCNUTwsgPM4r33ojaGk8pusE3X0PqpJSp6Lzqybfm2nJsARskzagt80vmO6SRjv56t7q+rBDo4HrZRwWw\/GOv9t1OrbfNayLWzVkCo9OwEHRT1RLssoPJn6M2+\/mOaWGO7xVpD4q4y6KlZzOT7iPzcclWOEIRahHlZ18+Uca\/xGjKNeojqOuL7B\/KTThXwgu09bna8kPOIwMTIQYlJxRszV58xXVf\/dfZSXHShAnbREY+fR\/M+h3NxvEU5uyU617VtiqAnQeKr3vnnOaH4j4u2RbON3E\/c3hPLsj5\/6wISNENKAOHdvVwfFktbwoMq8SLg0Qi1Jk1GMtOaFPZZ2tW9G5Oc3oC+ZMbZ\/7MioGY7xjtlfSr3Rmv5mnfBPxJ\/6\/u93pQf3RRb1C4hteodV12LG5uvo5gQ+OR3yZMHvnyXrbWcaPcnuyNAsBtsHpT\/qC7Nu7\/YX5StOFbdy4jl1C40GsUXD7gHhqj0XkL28WnQYXNxjBtmcG3pd8\/3h9HxprPi9Akw\/thiFi39JRns0MWeXDIINphGpI6+c1B1NMtU9f7fBSCgEJg25Zum8tUdLURa1ZJVHdpqa76FmERanrLCzI1arFgkq8Nfx2pQkr6+0jP3pvW\/2s6BbU7zazxWUBSwIDcRrfQE="},"distributions":"sdist bdist_wheel","user":"jd","provider":"pypi"}},"job_ids":[339026640,339026641,339026642],"pull_request_number":98,"resume_state":"failure"},"commits":1,"author_association":"COLLABORATOR","comments_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/issues\/98\/comments","html_url":"https:\/\/github.com\/jd\/pifpaf\/pull\/98","pastamaker_travis_url":"https:\/\/travis-ci.org\/jd\/pifpaf\/builds\/339026639?utm_source=github_status&utm_medium=notification","updated_at":"2018-02-08T15:31:01Z","pastamaker_approved":false,"base":{"repo":{"issues_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/issues{\/number}","deployments_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/deployments","has_wiki":false,"forks_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/forks","mirror_url":null,"issue_events_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/issues\/events{\/number}","subscription_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/subscription","merges_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/merges","collaborators_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/collaborators{\/collaborator}","updated_at":"2018-03-15T20:59:28Z","private":false,"pulls_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/pulls{\/number}","issue_comment_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/issues\/comments{\/number}","trees_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/git\/trees{\/sha}","full_name":"jd\/pifpaf","owner":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"statuses_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/statuses\/{sha}","id":54391698,"keys_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/keys{\/key_id}","size":538,"tags_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/tags","archived":false,"contributors_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/contributors","downloads_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/downloads","has_downloads":true,"assignees_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/assignees{\/user}","contents_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/contents\/{+path}","has_pages":false,"git_refs_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/git\/refs{\/sha}","has_projects":false,"clone_url":"https:\/\/github.com\/jd\/pifpaf.git","watchers_count":95,"git_tags_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/git\/tags{\/sha}","milestones_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/milestones{\/number}","stargazers_count":95,"homepage":null,"branches_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/branches{\/branch}","fork":false,"commits_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/commits{\/sha}","releases_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/releases{\/id}","description":"Python fixtures and daemon managing tools for functional testing","archive_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/{archive_format}{\/ref}","labels_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/labels{\/name}","events_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/events","comments_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/comments{\/number}","html_url":"https:\/\/github.com\/jd\/pifpaf","forks":19,"compare_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/compare\/{base}...{head}","language":"Python","git_url":"git:\/\/github.com\/jd\/pifpaf.git","svn_url":"https:\/\/github.com\/jd\/pifpaf","notifications_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/notifications{?since,all,participating}","has_issues":true,"ssh_url":"git@github.com:jd\/pifpaf.git","blobs_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/git\/blobs{\/sha}","languages_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/languages","hooks_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/hooks","open_issues_count":6,"watchers":95,"name":"pifpaf","license":{"spdx_id":"Apache-2.0","url":"https:\/\/api.github.com\/licenses\/apache-2.0","name":"Apache License 2.0","key":"apache-2.0"},"url":"https:\/\/api.github.com\/repos\/jd\/pifpaf","created_at":"2016-03-21T13:36:42Z","pushed_at":"2018-03-16T07:58:44Z","forks_count":19,"default_branch":"master","teams_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/teams","open_issues":6,"git_commits_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/git\/commits{\/sha}","subscribers_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/subscribers","stargazers_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/stargazers"},"sha":"5cf00c01a400de025fa4940c3b2dce06a46e7535","ref":"master","user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"label":"jd:master"},"rebaseable":true,"milestone":null,"requested_teams":[],"locked":false,"merged_by":null,"url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/pulls\/98","mergeable_state":"behind","created_at":"2018-02-08T15:19:37Z","merged":false,"review_comments_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/pulls\/98\/comments","review_comments":0,"assignees":[],"review_comment_url":"https:\/\/api.github.com\/repos\/jd\/pifpaf\/pulls\/comments{\/number}","pastamaker_comments":[],"pastamaker_approvals":[[],[],1,[0]],"patch_url":"https:\/\/github.com\/jd\/pifpaf\/pull\/98.patch","changed_files":1,"user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"}}]},{"owner":"gnocchixyz","repo":"python-gnocchiclient","updated_at":"2018-03-21T15:03:11Z","branch":"master","pulls":[{"deletions":2,"merge_commit_sha":"8267bbeb1dbf910576cd2377b0a20125f9f2355e","additions":33,"labels":[],"number":78,"pastamaker_travis_state":"success","assignee":null,"commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/pulls\/78\/commits","mergeable":true,"closed_at":null,"requested_reviewers":[],"statuses_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/statuses\/35f2912169bec1f170cd9844583c4e48052735d5","id":169640088,"maintainer_can_modify":true,"title":"Fix regression with exotic timestamp","comments":12,"merged_at":null,"state":"open","_links":{"review_comment":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/pulls\/comments{\/number}"},"commits":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/pulls\/78\/commits"},"self":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/pulls\/78"},"comments":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/issues\/78\/comments"},"html":{"href":"https:\/\/github.com\/gnocchixyz\/python-gnocchiclient\/pull\/78"},"review_comments":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/pulls\/78\/comments"},"issue":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/issues\/78"},"statuses":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/statuses\/35f2912169bec1f170cd9844583c4e48052735d5"}},"pastamaker_reviews":[{"body":"i still think we just pass in time as-is and not assume anything based on system. *shrugs* ","commit_id":"29cf9038789d2e6d0790351c8aaa901f83f9fef5","submitted_at":"2018-02-16T15:15:51Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/python-gnocchiclient\/pull\/78#pullrequestreview-97210296","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/pulls\/78","state":"DISMISSED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/python-gnocchiclient\/pull\/78#pullrequestreview-97210296"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/pulls\/78"}},"user":{"following_url":"https:\/\/api.github.com\/users\/chungg\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/chungg\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/chungg\/orgs","url":"https:\/\/api.github.com\/users\/chungg","events_url":"https:\/\/api.github.com\/users\/chungg\/events{\/privacy}","html_url":"https:\/\/github.com\/chungg","subscriptions_url":"https:\/\/api.github.com\/users\/chungg\/subscriptions","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/5091603?v=4","repos_url":"https:\/\/api.github.com\/users\/chungg\/repos","received_events_url":"https:\/\/api.github.com\/users\/chungg\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/chungg\/starred{\/owner}{\/repo}","site_admin":false,"login":"chungg","type":"User","id":5091603,"followers_url":"https:\/\/api.github.com\/users\/chungg\/followers"},"id":97210296},{"body":"You mean \"exotic\" not \"exhautic\" :)","commit_id":"7ba17d2cc8fdcfc2eccab59421d541c3833bcfa2","submitted_at":"2018-02-21T09:49:41Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/python-gnocchiclient\/pull\/78#pullrequestreview-98128397","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/pulls\/78","state":"APPROVED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/python-gnocchiclient\/pull\/78#pullrequestreview-98128397"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/pulls\/78"}},"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"id":98128397},{"body":"EXOTIC","commit_id":"7ba17d2cc8fdcfc2eccab59421d541c3833bcfa2","submitted_at":"2018-03-01T09:14:23Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/python-gnocchiclient\/pull\/78#pullrequestreview-100358235","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/pulls\/78","state":"DISMISSED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/python-gnocchiclient\/pull\/78#pullrequestreview-100358235"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/pulls\/78"}},"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"id":100358235},{"body":"","commit_id":"72b941d132f9a03f2920d126e1b7381933888283","submitted_at":"2018-03-21T03:42:44Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/python-gnocchiclient\/pull\/78#pullrequestreview-105600461","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/pulls\/78","state":"COMMENTED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/python-gnocchiclient\/pull\/78#pullrequestreview-105600461"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/pulls\/78"}},"user":{"following_url":"https:\/\/api.github.com\/users\/chungg\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/chungg\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/chungg\/orgs","url":"https:\/\/api.github.com\/users\/chungg","events_url":"https:\/\/api.github.com\/users\/chungg\/events{\/privacy}","html_url":"https:\/\/github.com\/chungg","subscriptions_url":"https:\/\/api.github.com\/users\/chungg\/subscriptions","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/5091603?v=4","repos_url":"https:\/\/api.github.com\/users\/chungg\/repos","received_events_url":"https:\/\/api.github.com\/users\/chungg\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/chungg\/starred{\/owner}{\/repo}","site_admin":false,"login":"chungg","type":"User","id":5091603,"followers_url":"https:\/\/api.github.com\/users\/chungg\/followers"},"id":105600461}],"pastamaker_commits":[{"files":[{"status":"modified","deletions":1,"raw_url":"https:\/\/github.com\/gnocchixyz\/python-gnocchiclient\/raw\/96e43bf154cac2ab4f3513093a76172843698c47\/gnocchiclient\/tests\/functional\/test_osc.py","blob_url":"https:\/\/github.com\/gnocchixyz\/python-gnocchiclient\/blob\/96e43bf154cac2ab4f3513093a76172843698c47\/gnocchiclient\/tests\/functional\/test_osc.py","changes":2,"filename":"gnocchiclient\/tests\/functional\/test_osc.py","sha":"d3835c7e55e9113e76de06c0ad5e109d6971b708","additions":1,"patch":"@@ -22,4 +22,4 @@ class OpenstackClentPluginTest(base.ClientTestBase):\n     def test_osc_client(self):\n         result = self.openstack(\"metric status\")\n         status = json.loads(result)\n-        self.assertEqual(2, len(status))\n+        self.assertGreaterEqual(3, len(status))","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/contents\/gnocchiclient\/tests\/functional\/test_osc.py?ref=96e43bf154cac2ab4f3513093a76172843698c47"},{"status":"modified","deletions":1,"raw_url":"https:\/\/github.com\/gnocchixyz\/python-gnocchiclient\/raw\/96e43bf154cac2ab4f3513093a76172843698c47\/gnocchiclient\/tests\/functional\/test_others.py","blob_url":"https:\/\/github.com\/gnocchixyz\/python-gnocchiclient\/blob\/96e43bf154cac2ab4f3513093a76172843698c47\/gnocchiclient\/tests\/functional\/test_others.py","changes":2,"filename":"gnocchiclient\/tests\/functional\/test_others.py","sha":"ac348896cd019261a9b361f049236074c318fbca","additions":1,"patch":"@@ -18,7 +18,7 @@ class MetricClientTest(base.ClientTestBase):\n     def test_status_scenario(self):\n         result = self.gnocchi(\"status\")\n         status = json.loads(result)\n-        self.assertEqual(2, len(status))\n+        self.assertGreaterEqual(3, len(status))\n \n     def test_build_scenario(self):\n         result = self.gnocchi(\"server version\")","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/contents\/gnocchiclient\/tests\/functional\/test_others.py?ref=96e43bf154cac2ab4f3513093a76172843698c47"}],"committer":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"stats":{"deletions":2,"additions":2,"total":4},"author":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/commits\/96e43bf154cac2ab4f3513093a76172843698c47","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/commits\/96e43bf154cac2ab4f3513093a76172843698c47\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/python-gnocchiclient\/commit\/96e43bf154cac2ab4f3513093a76172843698c47","sha":"96e43bf154cac2ab4f3513093a76172843698c47","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/commits\/c1513146d7d319ef81192d6e1f15bf8696717c8a","sha":"c1513146d7d319ef81192d6e1f15bf8696717c8a","html_url":"https:\/\/github.com\/gnocchixyz\/python-gnocchiclient\/commit\/c1513146d7d319ef81192d6e1f15bf8696717c8a"}],"commit":{"committer":{"date":"2018-02-21T06:55:54Z","name":"Mehdi Abaakouk","email":"sileht@sileht.net"},"author":{"date":"2018-02-21T06:55:04Z","name":"Mehdi Abaakouk","email":"sileht@sileht.net"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/git\/commits\/96e43bf154cac2ab4f3513093a76172843698c47","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/git\/trees\/15b484863523b3e5076a4d7beb94c42a4c4bcc84","sha":"15b484863523b3e5076a4d7beb94c42a4c4bcc84"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"tests: adapt status tests output\n\ngnocchi status now returns 3 items. This change the tests\nto ensure it works whatever the server side status return."}},{"files":[{"status":"modified","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/python-gnocchiclient\/raw\/72b941d132f9a03f2920d126e1b7381933888283\/gnocchiclient\/tests\/functional\/test_metric.py","blob_url":"https:\/\/github.com\/gnocchixyz\/python-gnocchiclient\/blob\/72b941d132f9a03f2920d126e1b7381933888283\/gnocchiclient\/tests\/functional\/test_metric.py","changes":25,"filename":"gnocchiclient\/tests\/functional\/test_metric.py","sha":"fb841021524c42bf2b9a3ef813d8d4e25ea647a5","additions":25,"patch":"@@ -77,6 +77,31 @@ def test_metric_listing(self):\n                               u\" --limit 2\")\n         self.assertEqual(2, len(json.loads(result)))\n \n+    def test_metric_measures_exhautic_format(self):\n+        ap_name = str(uuid.uuid4())\n+        # PREPARE AN ARCHIVE POLICY\n+        self.gnocchi(\"archive-policy\", params=\"create \" + ap_name +\n+                     \" --back-window 0 -d granularity:1s,points:86400\")\n+        # CREATE METRIC\n+        metric_name = str(uuid.uuid4())\n+        result = self.gnocchi(\n+            u'metric', params=u\"create\"\n+            u\" --archive-policy-name \" + ap_name + \" \" + metric_name)\n+        metric = json.loads(result)\n+\n+        # MEASURES ADD\n+        self.gnocchi('measures',\n+                     params=(\"add %s \"\n+                             \"--measure 'now@42' \")\n+                     % metric[\"id\"], has_output=False)\n+\n+        # MEASURES SHOW\n+        result = self.gnocchi('measures', params=\"show --refresh \" +\n+                              metric[\"id\"])\n+        measures = json.loads(result)\n+        self.assertEqual(1, len(measures))\n+        self.assertEqual(42, measures[0]['value'])\n+\n     def test_metric_measures_show_tz(self):\n         ap_name = str(uuid.uuid4())\n         # PREPARE AN ARCHIVE POLICY","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/contents\/gnocchiclient\/tests\/functional\/test_metric.py?ref=72b941d132f9a03f2920d126e1b7381933888283"},{"status":"modified","deletions":2,"raw_url":"https:\/\/github.com\/gnocchixyz\/python-gnocchiclient\/raw\/72b941d132f9a03f2920d126e1b7381933888283\/gnocchiclient\/v1\/metric_cli.py","blob_url":"https:\/\/github.com\/gnocchixyz\/python-gnocchiclient\/blob\/72b941d132f9a03f2920d126e1b7381933888283\/gnocchiclient\/v1\/metric_cli.py","changes":10,"filename":"gnocchiclient\/v1\/metric_cli.py","sha":"112c9b378894c7d2473c0639348430f0fd2a5784","additions":8,"patch":"@@ -11,6 +11,7 @@\n #    License for the specific language governing permissions and limitations\n #    under the License.\n \n+import iso8601\n import json\n import logging\n import sys\n@@ -239,8 +240,13 @@ class CliMeasuresAdd(CliMeasuresAddBase):\n \n     def measure(self, measure):\n         timestamp, __, value = measure.rpartition(\"@\")\n-        return {'timestamp': utils.parse_date(timestamp).isoformat(),\n-                'value': float(value)}\n+        try:\n+            timestamp = utils.parse_date(timestamp).isoformat()\n+        except iso8601.iso8601.ParseError:\n+            # NOTE(sileht): return string as-is and let the server decide\n+            # if it's valid. (like +2hour, now, -5day)\n+            pass\n+        return {'timestamp': timestamp, 'value': float(value)}\n \n     def get_parser(self, prog_name):\n         parser = super(CliMeasuresAdd, self).get_parser(prog_name)","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/contents\/gnocchiclient\/v1\/metric_cli.py?ref=72b941d132f9a03f2920d126e1b7381933888283"}],"committer":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"stats":{"deletions":2,"additions":33,"total":35},"author":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/commits\/72b941d132f9a03f2920d126e1b7381933888283","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/commits\/72b941d132f9a03f2920d126e1b7381933888283\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/python-gnocchiclient\/commit\/72b941d132f9a03f2920d126e1b7381933888283","sha":"72b941d132f9a03f2920d126e1b7381933888283","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/commits\/96e43bf154cac2ab4f3513093a76172843698c47","sha":"96e43bf154cac2ab4f3513093a76172843698c47","html_url":"https:\/\/github.com\/gnocchixyz\/python-gnocchiclient\/commit\/96e43bf154cac2ab4f3513093a76172843698c47"}],"commit":{"committer":{"date":"2018-03-13T08:28:32Z","name":"Mehdi Abaakouk","email":"sileht@sileht.net"},"author":{"date":"2018-02-16T14:32:44Z","name":"Mehdi Abaakouk","email":"sileht@sileht.net"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/git\/commits\/72b941d132f9a03f2920d126e1b7381933888283","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/git\/trees\/875c1b318c4cfd935155ad130d322f097afa7962","sha":"875c1b318c4cfd935155ad130d322f097afa7962"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"Fix regression with exoic timestamp\n\nWe recently uses local TZ, when timestamps doesn't have a TZ.\nBut Gnocchi client was passing the string as-is before allowing\nall kind of timestamps that the server support (like +2hour, now, ...).\n\nThis change restores this feature."}},{"files":[{"status":"modified","deletions":1,"raw_url":"https:\/\/github.com\/gnocchixyz\/python-gnocchiclient\/raw\/35f2912169bec1f170cd9844583c4e48052735d5\/doc\/source\/shell.rst","blob_url":"https:\/\/github.com\/gnocchixyz\/python-gnocchiclient\/blob\/35f2912169bec1f170cd9844583c4e48052735d5\/doc\/source\/shell.rst","changes":6,"filename":"doc\/source\/shell.rst","sha":"c544dc85f91738653b59e5622754bec7b4dbc378","additions":5,"patch":"@@ -72,4 +72,8 @@ client time zone.\n Commands descriptions\n +++++++++++++++++++++\n \n-.. include:: gnocchi.rst\n+.. autodoc-gnocchi:: gnocchiclient.shell.GnocchiShell\n+   :application: gnocchi\n+\n+.. autodoc-gnocchi:: openstack.metric.v1\n+   :application: gnocchi","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/contents\/doc\/source\/shell.rst?ref=35f2912169bec1f170cd9844583c4e48052735d5"},{"status":"modified","deletions":49,"raw_url":"https:\/\/github.com\/gnocchixyz\/python-gnocchiclient\/raw\/35f2912169bec1f170cd9844583c4e48052735d5\/gnocchiclient\/gendoc.py","blob_url":"https:\/\/github.com\/gnocchixyz\/python-gnocchiclient\/blob\/35f2912169bec1f170cd9844583c4e48052735d5\/gnocchiclient\/gendoc.py","changes":65,"filename":"gnocchiclient\/gendoc.py","sha":"224faa8d97322ca537c1956f0d889f845775284d","additions":16,"patch":"@@ -14,60 +14,27 @@\n \n from __future__ import absolute_import\n \n-import sys\n+import fnmatch\n \n-from os_doc_tools import commands\n+from cliff import sphinxext\n \n from gnocchiclient import shell\n \n-# HACK(jd) Not sure why but Sphinx setup this multiple times, so we just avoid\n-# doing several times the requests by using this global variable :(\n-_RUN = False\n \n-\n-def get_clients():\n-    return {'gnocchi': {\n-        'name': 'A time series storage and resources index service (Gnocchi)',\n-    }}\n-\n-\n-def discover_subcommands(os_command, subcommands, extra_params):\n-    return shell.GnocchiCommandManager.SHELL_COMMANDS.keys()\n+class GnocchiAutoDocDirective(sphinxext.AutoprogramCliffDirective):\n+    def _load_commands(self):\n+        command_pattern = self.options.get('command')\n+        full_cmd_list = shell.GnocchiCommandManager.SHELL_COMMANDS.keys()\n+        if command_pattern:\n+            commands = [x for x in full_cmd_list\n+                        if fnmatch.fnmatch(x, command_pattern)]\n+        else:\n+            commands = full_cmd_list\n+        return dict((name, shell.GnocchiCommandManager.SHELL_COMMANDS[name])\n+                    for name in commands)\n \n \n def setup(app):\n-    global _RUN\n-    if _RUN:\n-        return\n-\n-    output_dir = \"doc\/source\"\n-    os_command = 'gnocchi'\n-    print(\"Documenting '%s'\" % os_command)\n-\n-    api_name = \"Gnocchi API\"\n-    title = \"Gnocchi command-line client\"\n-\n-    out_filename = os_command + \".rst\"\n-    out_file = commands.generate_heading(os_command, api_name, title,\n-                                         output_dir, out_filename,\n-                                         False)\n-    if not out_file:\n-        sys.exit(-1)\n-\n-    commands.generate_command(os_command, out_file)\n-    commands.generate_subcommands(\n-        os_command, out_file,\n-        list(sorted(shell.GnocchiCommandManager.SHELL_COMMANDS.keys())),\n-        None, \"\", \"\")\n-\n-    print(\"Finished.\\n\")\n-    out_file.close()\n-\n-    with open(\"doc\/source\/gnocchi.rst\", \"r\") as f:\n-        data = f.read().splitlines(True)\n-        for index, line in enumerate(data):\n-            if \"This chapter documents\" in line:\n-                break\n-    with open(\"doc\/source\/gnocchi.rst\", \"w\") as f:\n-        f.writelines(data[index + 1:])\n-    _RUN = True\n+    app.add_directive('autodoc-gnocchi', GnocchiAutoDocDirective)\n+    app.add_config_value('autoprogram_cliff_application', 'gnocchi', True)\n+    app.add_config_value('autoprogram_cliff_ignored', ['--help'], True)","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/contents\/gnocchiclient\/gendoc.py?ref=35f2912169bec1f170cd9844583c4e48052735d5"},{"status":"modified","deletions":1,"raw_url":"https:\/\/github.com\/gnocchixyz\/python-gnocchiclient\/raw\/35f2912169bec1f170cd9844583c4e48052735d5\/requirements.txt","blob_url":"https:\/\/github.com\/gnocchixyz\/python-gnocchiclient\/blob\/35f2912169bec1f170cd9844583c4e48052735d5\/requirements.txt","changes":2,"filename":"requirements.txt","sha":"f4d64ccc5da1b32a938686ed9d8963f7a89f93d8","additions":1,"patch":"@@ -3,7 +3,7 @@\n # process, which may cause wedges in the gate later.\n \n pbr>=1.4\n-cliff>1.16.0 # Apache-2.0\n+cliff>=2.10 # Apache-2.0\n ujson\n keystoneauth1>=2.0.0\n six","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/contents\/requirements.txt?ref=35f2912169bec1f170cd9844583c4e48052735d5"},{"status":"modified","deletions":1,"raw_url":"https:\/\/github.com\/gnocchixyz\/python-gnocchiclient\/raw\/35f2912169bec1f170cd9844583c4e48052735d5\/setup.cfg","blob_url":"https:\/\/github.com\/gnocchixyz\/python-gnocchiclient\/blob\/35f2912169bec1f170cd9844583c4e48052735d5\/setup.cfg","changes":1,"filename":"setup.cfg","sha":"b7b2cdf7d2fd60d6eb6ad9f6c636c0599ab67d30","additions":0,"patch":"@@ -89,7 +89,6 @@ test =\n doc =\n   sphinx!=1.2.0,!=1.3b1,>=1.1.2\n   sphinx_rtd_theme\n-  openstack-doc-tools>=1.0.1\n \n openstack =\n   osc-lib>=0.3.0 # Apache-2.0","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/contents\/setup.cfg?ref=35f2912169bec1f170cd9844583c4e48052735d5"}],"committer":{"following_url":"https:\/\/api.github.com\/users\/web-flow\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/web-flow\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/web-flow\/orgs","url":"https:\/\/api.github.com\/users\/web-flow","events_url":"https:\/\/api.github.com\/users\/web-flow\/events{\/privacy}","html_url":"https:\/\/github.com\/web-flow","subscriptions_url":"https:\/\/api.github.com\/users\/web-flow\/subscriptions","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/19864447?v=4","repos_url":"https:\/\/api.github.com\/users\/web-flow\/repos","received_events_url":"https:\/\/api.github.com\/users\/web-flow\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/web-flow\/starred{\/owner}{\/repo}","site_admin":false,"login":"web-flow","type":"User","id":19864447,"followers_url":"https:\/\/api.github.com\/users\/web-flow\/followers"},"stats":{"deletions":52,"additions":22,"total":74},"author":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/commits\/35f2912169bec1f170cd9844583c4e48052735d5","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/commits\/35f2912169bec1f170cd9844583c4e48052735d5\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/python-gnocchiclient\/commit\/35f2912169bec1f170cd9844583c4e48052735d5","sha":"35f2912169bec1f170cd9844583c4e48052735d5","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/commits\/72b941d132f9a03f2920d126e1b7381933888283","sha":"72b941d132f9a03f2920d126e1b7381933888283","html_url":"https:\/\/github.com\/gnocchixyz\/python-gnocchiclient\/commit\/72b941d132f9a03f2920d126e1b7381933888283"},{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/commits\/b69f9c54139b0ddf7c1bed8ea16efc7cccfc3c79","sha":"b69f9c54139b0ddf7c1bed8ea16efc7cccfc3c79","html_url":"https:\/\/github.com\/gnocchixyz\/python-gnocchiclient\/commit\/b69f9c54139b0ddf7c1bed8ea16efc7cccfc3c79"}],"commit":{"committer":{"date":"2018-03-21T15:03:10Z","name":"GitHub","email":"noreply@github.com"},"author":{"date":"2018-03-21T15:03:10Z","name":"Julien Danjou","email":"julien@danjou.info"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/git\/commits\/35f2912169bec1f170cd9844583c4e48052735d5","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/git\/trees\/d442aa2cb648aa6658fd1aa4d95a1426aee35d8e","sha":"d442aa2cb648aa6658fd1aa4d95a1426aee35d8e"},"comment_count":0,"verification":{"reason":"valid","verified":true,"payload":"tree d442aa2cb648aa6658fd1aa4d95a1426aee35d8e\nparent 72b941d132f9a03f2920d126e1b7381933888283\nparent b69f9c54139b0ddf7c1bed8ea16efc7cccfc3c79\nauthor Julien Danjou <julien@danjou.info> 1521644590 +0100\ncommitter GitHub <noreply@github.com> 1521644590 +0100\n\nMerge branch 'master' into master","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJasnQuCRBK7hj4Ov3rIwAAdHIIAGeG65EkcBD64Nfs9IqZX\/CR\nyOkCnt2X5FduPfRz92NPQDql5aHfEPiY+WTJQvtK5wN2jOlJCSNd94h4CIhKtmFI\n7N2ZC4Ua0vUu5\/sJFLFYXwwep9Z4e+sLHn7bT51Vx6c\/Js7hVsU5UIXSpe+EdSAf\nN6fgXvq4fKaIMYKqQyW75agxbxMAn1UQnIvS6svAbVyNV2qF8G+erIOH3o2ahXTF\nNaBh908ixoAi2YJQNa\/e7U8o9fPX5LcbZ4DK5wyNF\/hQPNn8Mp2BFAhxImSK1G5B\nNXef9cvYg5UvICmnb2jA+\/CKVF8YDSPmsfEidVnLNFG5gxkO2aXaFibMZdIr2G4=\n=Vkl+\n-----END PGP SIGNATURE-----\n"},"message":"Merge branch 'master' into master"}}],"diff_url":"https:\/\/github.com\/gnocchixyz\/python-gnocchiclient\/pull\/78.diff","pastamaker_ci_statuses":{},"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/issues\/78","body":"We recently uses local TZ, when timestamps doesn't have a TZ.\nBut Gnocchi client was passing the string as-is before allowing\nall kind of timestamps that the server support (like +2hour, now, ...).\n\nThis change restores this feature.","head":{"repo":{"issues_url":"https:\/\/api.github.com\/repos\/sileht\/python-gnocchiclient\/issues{\/number}","deployments_url":"https:\/\/api.github.com\/repos\/sileht\/python-gnocchiclient\/deployments","has_wiki":false,"forks_url":"https:\/\/api.github.com\/repos\/sileht\/python-gnocchiclient\/forks","mirror_url":null,"issue_events_url":"https:\/\/api.github.com\/repos\/sileht\/python-gnocchiclient\/issues\/events{\/number}","subscription_url":"https:\/\/api.github.com\/repos\/sileht\/python-gnocchiclient\/subscription","merges_url":"https:\/\/api.github.com\/repos\/sileht\/python-gnocchiclient\/merges","collaborators_url":"https:\/\/api.github.com\/repos\/sileht\/python-gnocchiclient\/collaborators{\/collaborator}","updated_at":"2018-03-21T15:03:12Z","private":false,"pulls_url":"https:\/\/api.github.com\/repos\/sileht\/python-gnocchiclient\/pulls{\/number}","owner":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"trees_url":"https:\/\/api.github.com\/repos\/sileht\/python-gnocchiclient\/git\/trees{\/sha}","full_name":"sileht\/python-gnocchiclient","issue_comment_url":"https:\/\/api.github.com\/repos\/sileht\/python-gnocchiclient\/issues\/comments{\/number}","statuses_url":"https:\/\/api.github.com\/repos\/sileht\/python-gnocchiclient\/statuses\/{sha}","id":92725665,"keys_url":"https:\/\/api.github.com\/repos\/sileht\/python-gnocchiclient\/keys{\/key_id}","size":451,"tags_url":"https:\/\/api.github.com\/repos\/sileht\/python-gnocchiclient\/tags","archived":false,"contributors_url":"https:\/\/api.github.com\/repos\/sileht\/python-gnocchiclient\/contributors","downloads_url":"https:\/\/api.github.com\/repos\/sileht\/python-gnocchiclient\/downloads","assignees_url":"https:\/\/api.github.com\/repos\/sileht\/python-gnocchiclient\/assignees{\/user}","contents_url":"https:\/\/api.github.com\/repos\/sileht\/python-gnocchiclient\/contents\/{+path}","has_pages":false,"git_refs_url":"https:\/\/api.github.com\/repos\/sileht\/python-gnocchiclient\/git\/refs{\/sha}","has_projects":true,"clone_url":"https:\/\/github.com\/sileht\/python-gnocchiclient.git","watchers_count":0,"git_tags_url":"https:\/\/api.github.com\/repos\/sileht\/python-gnocchiclient\/git\/tags{\/sha}","milestones_url":"https:\/\/api.github.com\/repos\/sileht\/python-gnocchiclient\/milestones{\/number}","stargazers_count":0,"homepage":"http:\/\/gnocchi.xyz\/gnocchiclient","branches_url":"https:\/\/api.github.com\/repos\/sileht\/python-gnocchiclient\/branches{\/branch}","fork":true,"commits_url":"https:\/\/api.github.com\/repos\/sileht\/python-gnocchiclient\/commits{\/sha}","releases_url":"https:\/\/api.github.com\/repos\/sileht\/python-gnocchiclient\/releases{\/id}","description":"Python client from Gnocchi","has_downloads":true,"labels_url":"https:\/\/api.github.com\/repos\/sileht\/python-gnocchiclient\/labels{\/name}","events_url":"https:\/\/api.github.com\/repos\/sileht\/python-gnocchiclient\/events","comments_url":"https:\/\/api.github.com\/repos\/sileht\/python-gnocchiclient\/comments{\/number}","html_url":"https:\/\/github.com\/sileht\/python-gnocchiclient","compare_url":"https:\/\/api.github.com\/repos\/sileht\/python-gnocchiclient\/compare\/{base}...{head}","language":"Python","git_url":"git:\/\/github.com\/sileht\/python-gnocchiclient.git","svn_url":"https:\/\/github.com\/sileht\/python-gnocchiclient","notifications_url":"https:\/\/api.github.com\/repos\/sileht\/python-gnocchiclient\/notifications{?since,all,participating}","has_issues":false,"ssh_url":"git@github.com:sileht\/python-gnocchiclient.git","blobs_url":"https:\/\/api.github.com\/repos\/sileht\/python-gnocchiclient\/git\/blobs{\/sha}","forks":0,"hooks_url":"https:\/\/api.github.com\/repos\/sileht\/python-gnocchiclient\/hooks","open_issues_count":0,"watchers":0,"name":"python-gnocchiclient","license":{"spdx_id":"Apache-2.0","url":"https:\/\/api.github.com\/licenses\/apache-2.0","name":"Apache License 2.0","key":"apache-2.0"},"url":"https:\/\/api.github.com\/repos\/sileht\/python-gnocchiclient","created_at":"2017-05-29T09:32:51Z","archive_url":"https:\/\/api.github.com\/repos\/sileht\/python-gnocchiclient\/{archive_format}{\/ref}","pushed_at":"2018-03-21T15:03:11Z","forks_count":0,"default_branch":"master","teams_url":"https:\/\/api.github.com\/repos\/sileht\/python-gnocchiclient\/teams","open_issues":0,"languages_url":"https:\/\/api.github.com\/repos\/sileht\/python-gnocchiclient\/languages","git_commits_url":"https:\/\/api.github.com\/repos\/sileht\/python-gnocchiclient\/git\/commits{\/sha}","subscribers_url":"https:\/\/api.github.com\/repos\/sileht\/python-gnocchiclient\/subscribers","stargazers_url":"https:\/\/api.github.com\/repos\/sileht\/python-gnocchiclient\/stargazers"},"sha":"35f2912169bec1f170cd9844583c4e48052735d5","ref":"master","user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"label":"sileht:master"},"pastamaker_weight":-1,"commits":3,"author_association":"OWNER","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/issues\/78\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/python-gnocchiclient\/pull\/78","pastamaker_travis_url":"https:\/\/travis-ci.org\/gnocchixyz\/python-gnocchiclient\/builds\/356393707?utm_source=github_status&utm_medium=notification","updated_at":"2018-03-21T15:03:11Z","pastamaker_approved":false,"base":{"repo":{"issues_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/issues{\/number}","deployments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/deployments","has_wiki":false,"forks_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/forks","mirror_url":null,"issue_events_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/issues\/events{\/number}","subscription_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/subscription","merges_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/merges","collaborators_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/collaborators{\/collaborator}","updated_at":"2018-03-21T15:04:34Z","private":false,"pulls_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/pulls{\/number}","owner":{"following_url":"https:\/\/api.github.com\/users\/gnocchixyz\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/gnocchixyz\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/gnocchixyz\/orgs","url":"https:\/\/api.github.com\/users\/gnocchixyz","events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/events{\/privacy}","html_url":"https:\/\/github.com\/gnocchixyz","subscriptions_url":"https:\/\/api.github.com\/users\/gnocchixyz\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/26142905?v=4","repos_url":"https:\/\/api.github.com\/users\/gnocchixyz\/repos","received_events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/gnocchixyz\/starred{\/owner}{\/repo}","site_admin":false,"login":"gnocchixyz","type":"Organization","id":26142905,"followers_url":"https:\/\/api.github.com\/users\/gnocchixyz\/followers"},"trees_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/git\/trees{\/sha}","full_name":"gnocchixyz\/python-gnocchiclient","issue_comment_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/issues\/comments{\/number}","statuses_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/statuses\/{sha}","id":89215652,"keys_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/keys{\/key_id}","size":455,"tags_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/tags","archived":false,"contributors_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/contributors","downloads_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/downloads","assignees_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/assignees{\/user}","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/contents\/{+path}","has_pages":false,"git_refs_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/git\/refs{\/sha}","has_projects":false,"clone_url":"https:\/\/github.com\/gnocchixyz\/python-gnocchiclient.git","watchers_count":7,"git_tags_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/git\/tags{\/sha}","milestones_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/milestones{\/number}","stargazers_count":7,"homepage":"http:\/\/gnocchi.xyz\/gnocchiclient","branches_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/branches{\/branch}","fork":false,"commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/commits{\/sha}","releases_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/releases{\/id}","description":"Python client from Gnocchi","has_downloads":true,"labels_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/labels{\/name}","events_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/events","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/comments{\/number}","html_url":"https:\/\/github.com\/gnocchixyz\/python-gnocchiclient","compare_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/compare\/{base}...{head}","language":"Python","git_url":"git:\/\/github.com\/gnocchixyz\/python-gnocchiclient.git","svn_url":"https:\/\/github.com\/gnocchixyz\/python-gnocchiclient","notifications_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/notifications{?since,all,participating}","has_issues":true,"ssh_url":"git@github.com:gnocchixyz\/python-gnocchiclient.git","blobs_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/git\/blobs{\/sha}","forks":14,"hooks_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/hooks","open_issues_count":8,"watchers":7,"name":"python-gnocchiclient","license":{"spdx_id":"Apache-2.0","url":"https:\/\/api.github.com\/licenses\/apache-2.0","name":"Apache License 2.0","key":"apache-2.0"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient","created_at":"2017-04-24T08:29:00Z","archive_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/{archive_format}{\/ref}","pushed_at":"2018-03-21T15:03:12Z","forks_count":14,"default_branch":"master","teams_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/teams","open_issues":8,"languages_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/languages","git_commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/git\/commits{\/sha}","subscribers_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/subscribers","stargazers_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/stargazers"},"sha":"b69f9c54139b0ddf7c1bed8ea16efc7cccfc3c79","ref":"master","user":{"following_url":"https:\/\/api.github.com\/users\/gnocchixyz\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/gnocchixyz\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/gnocchixyz\/orgs","url":"https:\/\/api.github.com\/users\/gnocchixyz","events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/events{\/privacy}","html_url":"https:\/\/github.com\/gnocchixyz","subscriptions_url":"https:\/\/api.github.com\/users\/gnocchixyz\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/26142905?v=4","repos_url":"https:\/\/api.github.com\/users\/gnocchixyz\/repos","received_events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/gnocchixyz\/starred{\/owner}{\/repo}","site_admin":false,"login":"gnocchixyz","type":"Organization","id":26142905,"followers_url":"https:\/\/api.github.com\/users\/gnocchixyz\/followers"},"label":"gnocchixyz:master"},"rebaseable":true,"milestone":null,"pastamaker_travis_detail":{"commit_id":106182913,"repository_id":13157747,"jobs":[{"build_id":356393707,"repository_id":13157747,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/356393708\/log","repository_slug":"gnocchixyz\/python-gnocchiclient","tags":null,"number":"222.1","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":106182913,"finished_at":"2018-03-21T15:29:19Z","started_at":"2018-03-21T15:27:35Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","env":"TARGET=pep8","language":"python","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux"},"id":356393708},{"build_id":356393707,"repository_id":13157747,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/356393709\/log","repository_slug":"gnocchixyz\/python-gnocchiclient","tags":null,"number":"222.2","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":106182913,"finished_at":"2018-03-21T15:35:06Z","started_at":"2018-03-21T15:29:48Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","env":"TARGET=py27","language":"python","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux"},"id":356393709},{"build_id":356393707,"repository_id":13157747,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/356393710\/log","repository_slug":"gnocchixyz\/python-gnocchiclient","tags":null,"number":"222.3","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":106182913,"finished_at":"2018-03-21T15:41:33Z","started_at":"2018-03-21T15:35:36Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","env":"TARGET=py35","language":"python","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux"},"id":356393710},{"build_id":356393707,"repository_id":13157747,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/356393711\/log","repository_slug":"gnocchixyz\/python-gnocchiclient","tags":null,"number":"222.4","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":106182913,"finished_at":"2018-03-21T15:44:35Z","started_at":"2018-03-21T15:42:06Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","env":"TARGET=docs-gnocchi.xyz","language":"python","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","addons":{},"os":"linux"},"id":356393711}],"event_type":"pull_request","finished_at":"2018-03-21T15:44:35Z","number":"222","id":356393707,"state":"passed","pull_request_title":"Fix regression with exotic timestamp","pull_request":true,"duration":928,"started_at":"2018-03-21T15:27:35Z","config":{"before_script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker pull gnocchixyz\/ci-tools:latest ; fi"],"cache":{"directories":["~\/.cache\/pip"]},"group":"stable","env":["TARGET=pep8","TARGET=py27","TARGET=py35","TARGET=docs-gnocchi.xyz"],"language":"python","script":["if \\[ \"$TRAVIS_PULL_REQUEST\" != \"false\" -o  -n \"$TRAVIS_TAG\" \\]; then docker run -v ~\/.cache\/pip:\/home\/tester\/.cache\/pip -v $(pwd):\/home\/tester\/src gnocchixyz\/ci-tools:latest tox -e ${TARGET} ; fi"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"on_failure":"always","on_success":"change"},"email":false},".result":"configured","services":["docker"],"dist":"trusty","os":"linux","deploy":{"true":{"all_branches":true,"tags":true},"password":{"secure":"eQzA9F55MW2v2eQysmV38tyuj0cqYaQh6iTWLf5ZBBqiSu8OwmJeouRCDpHOM93XDerLwzlNfmq2NwaP3lxbhc1kU9fxkyI9CbX4fQzHkrl30Eee9fq82qfnH+cBt9zZBGgk+HEClHxZINiQKF1NTzWA7PDkGRnLDfBrMqUum1FqYoli1XNoCOwgYRcI0UdaE96qqSqE4rlp4vuAR8sfDSh6SxLBUtEHzZM2ScreRZV11DwRSB5a9nc+PGAU6FdmSU6uil2kojmKU84q\/+BbSpRG4Ch10MDWIN3UIuPfP4t8zhgC3grfTzq7Q+9l6VYFeQHdAsoHb050d9YabnZNxUqDt\/ZIABKcpu\/YiZzIXGbpGh4fw4mVupbOoFpVFg1Zg\/nQAv99HYDtp5QwqYbA5T3LZXDi2v6+oPWCrBh5ll9bk7DhWsPhBFj5jjBIDY4sgXuRTLaGbik+CLxnmqR\/KwOFtLM9cJQjCdfpi1K9VIqNI+NpIgQN5++FhqkL2vWTeiypraK5p1MiuHN0+UA2bdnKpadzE6VuIqjIbfZIKHRZDMkejQ9ruZgIMUTscafyMf9mY9NHXtqD6PA1rK\/S4+3n5KIFRDFVVsBUPpao4jIFzaLfSPYciC4PrhyVNzfoIRnlStzuiUPjU0S89UwRAQiapf0NMNmXK2CMWvR9xIg="},"distributions":"sdist bdist_wheel","user":"jd","provider":"pypi"}},"job_ids":[356393708,356393709,356393710,356393711],"pull_request_number":78,"resume_state":"success"},"requested_teams":[],"locked":false,"merged_by":null,"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/pulls\/78","mergeable_state":"blocked","created_at":"2018-02-16T14:40:16Z","merged":false,"review_comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/pulls\/78\/comments","review_comments":1,"assignees":[],"review_comment_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/python-gnocchiclient\/pulls\/comments{\/number}","pastamaker_comments":[],"pastamaker_approvals":[[],[],2,[0,1]],"patch_url":"https:\/\/github.com\/gnocchixyz\/python-gnocchiclient\/pull\/78.patch","changed_files":2,"user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"}}]},{"owner":"jd","repo":"daiquiri","updated_at":"2017-07-10T11:56:02Z","branch":"master","pulls":[{"deletions":11,"merge_commit_sha":"a0232b8a54955bda5332510981453033ed92e2af","additions":146,"number":9,"pastamaker_travis_state":"success","assignee":null,"commits_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9\/commits","mergeable":false,"closed_at":null,"pastamaker_commits":[{"files":[{"status":"modified","deletions":2,"raw_url":"https:\/\/github.com\/jd\/daiquiri\/raw\/a41a51da7fb6148816c8f1e24d38aeb149470bde\/daiquiri\/__init__.py","blob_url":"https:\/\/github.com\/jd\/daiquiri\/blob\/a41a51da7fb6148816c8f1e24d38aeb149470bde\/daiquiri\/__init__.py","contents_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/contents\/daiquiri\/__init__.py?ref=a41a51da7fb6148816c8f1e24d38aeb149470bde","filename":"daiquiri\/__init__.py","sha":"89520356098885f358d632e471a7e303a60c32f5","additions":9,"patch":"@@ -17,6 +17,7 @@\n import weakref\n \n from daiquiri import output\n+from daiquiri import formatter\n \n \n class KeywordArgumentAdapter(logging.LoggerAdapter):\n@@ -71,15 +72,16 @@ def getLogger(name=None, **kwargs):\n \n \n def setup(level=logging.WARNING, outputs=[output.STDERR], program_name=None,\n-          capture_warnings=True):\n+          capture_warnings=True, palette=None):\n     \"\"\"Setup Python logging.\n \n     This will setup basic handlers for Python logging.\n \n     :param level: Root log level.\n     :param outputs: Iterable of outputs to log to.\n     :param program_name: The name of the program. Auto-detected if not set.\n-    :param capture_warnings: Capture warnings from the `warnings' module\n+    :param capture_warnings: Capture warnings from the `warnings' module.\n+    :param palette: Object instance that represents TTY color palette.\n     \"\"\"\n     root_logger = logging.getLogger(None)\n \n@@ -89,6 +91,11 @@ def setup(level=logging.WARNING, outputs=[output.STDERR], program_name=None,\n \n     # Add configured handlers\n     for o in outputs:\n+        # modify the color palette if it's defined via setup\n+        if palette is not None:\n+            o_palette = getattr(o.handler.formatter, 'palette', None)\n+            if o_palette:\n+                setattr(o.handler.formatter, 'palette', palette)\n         o.add_to_logger(root_logger)\n \n     root_logger.setLevel(level)","changes":11},{"status":"modified","deletions":9,"raw_url":"https:\/\/github.com\/jd\/daiquiri\/raw\/a41a51da7fb6148816c8f1e24d38aeb149470bde\/daiquiri\/formatter.py","blob_url":"https:\/\/github.com\/jd\/daiquiri\/blob\/a41a51da7fb6148816c8f1e24d38aeb149470bde\/daiquiri\/formatter.py","contents_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/contents\/daiquiri\/formatter.py?ref=a41a51da7fb6148816c8f1e24d38aeb149470bde","filename":"daiquiri\/formatter.py","sha":"6d7842493160ae22afc712ea917ca4a3e5e4b876","additions":122,"patch":"@@ -11,6 +11,14 @@\n #    under the License.\n import logging\n \n+import six\n+\n+\n+if six.PY3:\n+    from itertools import zip_longest as zipl\n+else:\n+    from itertools import izip_longest as zipl\n+\n try:\n     from pythonjsonlogger import jsonlogger\n except ImportError:\n@@ -23,19 +31,124 @@\n )\n \n \n-class ColorFormatter(logging.Formatter):\n-    # TODO(jd) Allow configuration\n-    LEVEL_COLORS = {\n-        logging.DEBUG: '\\033[00;32m',  # GREEN\n-        logging.INFO: '\\033[00;36m',  # CYAN\n-        logging.WARN: '\\033[01;33m',  # BOLD YELLOW\n-        logging.ERROR: '\\033[01;31m',  # BOLD RED\n-        logging.CRITICAL: '\\033[01;31m',  # BOLD RED\n-    }\n+class Palette(object):\n+    \"\"\"Object that represents TTY colors.\"\"\"\n+\n+    PREFIX = '\\033['\n+    BASE_WHITE = 15\n+    BASE_MOD = '00;%dm'\n+    CHART_WHITE = 231\n+    CHART_MOD = '38;5;%dm'\n+\n+    def __init__(self, *args, base=False, name=None):\n+        \"\"\"Create a new color palette from console values.\n+\n+        :param args: a color value for each of the default logging levels.\n+        :param base: (bool) use TTY defined colors instead of 256-color palette.\n+        \"\"\"\n+        self.name = name\n+        self.base = base\n+        self.colors = list(args)\n+        self._level_colors = None\n+\n+    def __str__(self):\n+        colors = [c[1] if not isinstance(c, int) else c for c in self.colors]\n+        return '<Palette %s(%s)>' % (self.name if self.name else '',\n+                                     ', '.join(map(str, colors)))\n+\n+    @property\n+    def level_colors(self):\n+        # deferred processing, read only\n+        if self._level_colors is None:\n+            self._level_colors = self._process_colors()\n+        return self._level_colors\n+\n+    def _process_colors(self):\n+        ret = {}\n+        # account for custom logging levels, with potential additional colors\n+        logging_levels = tuple(sorted(logging._levelToName.keys(), reverse=False))\n+\n+        # use `white` for all levels that extend beyond the palette's values\n+        white = self.BASE_WHITE if self.base else self.CHART_WHITE\n+\n+        # create a tuple pair for each level and the palette's colors\n+        colors = zipl(logging_levels, [white] + self.colors, fillvalue=white)\n+\n+        # apply text formatting\n+        for level, color in colors:\n+            if isinstance(color, tuple):\n+                # text-decoration modifier\n+                fmt, c_num = color\n+            elif isinstance(color, int):\n+                # no formatting\n+                fmt, c_num = normal(color)\n+            else:\n+                raise ValueError(color)\n+\n+            if self.base:\n+                c = self.BASE_MOD % c_num\n+            else:\n+                c = self.CHART_MOD % c_num\n+            ret[level] = '%s%s' % (self.PREFIX, fmt % c)\n+        return ret\n+\n+\n+def bold(n):\n+    \"\"\"Bold color in Palette.\n \n+    :param n: (int)\n+    \"\"\"\n+    return '1;%s', n\n+\n+\n+def normal(n):\n+    \"\"\"Normal, no decorations, color in Palette.\n+\n+    :param n: (int)\n+    \"\"\"\n+    return '0;%s', n\n+\n+\n+def underline(n):\n+    \"\"\"Underline color in Palette.\n+\n+    :param n: (int)\n+    \"\"\"\n+    return '4;%s', n\n+\n+\n+class SwatchMeta(type):\n+    def __new__(cls, name, bases, dct):\n+        for k, v in dct.items():\n+            if isinstance(v, Palette):\n+                v.name = k\n+        return super(SwatchMeta, cls).__new__(cls, name, bases, dct)\n+\n+\n+class Swatches(six.with_metaclass(SwatchMeta, object)):\n+    \"\"\" Collection of default colors. \"\"\"\n+    Default = Palette(32, 36, bold(33), bold(31), bold(31), base=True)\n+\n+    Bright = Palette(226, 220, 214, 202, bold(196))\n+    Blue = Palette(39, 32, 25, 24, bold(23))\n+    Cool = Palette(33, 45, 172, 203, bold(125))\n+    Purple = Palette(183, 141, 171, 90, bold(57))\n+    Warm = Palette(184, 154, 202, 208, bold(160))\n+\n+\n+class ColorFormatter(logging.Formatter):\n+    LEVEL_COLORS = None\n     COLOR_STOP = '\\033[0m'\n \n+    def __init__(self, fmt=None, datefmt=None, style='%', palette=Swatches.Default):\n+        super(ColorFormatter, self).__init__(fmt, datefmt, style)\n+        self.palette = palette\n+\n     def format(self, record):\n+        if self.LEVEL_COLORS is None:\n+            palette = getattr(self, 'palette', Swatches.Default)\n+            self.LEVEL_COLORS = dict(palette.level_colors)\n+\n         if getattr(record, \"_stream_is_a_tty\", False):\n             record.color = self.LEVEL_COLORS[record.levelno]\n             record.color_stop = self.COLOR_STOP","changes":131}],"committer":{"following_url":"https:\/\/api.github.com\/users\/blakev\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/blakev\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/blakev\/orgs","url":"https:\/\/api.github.com\/users\/blakev","gists_url":"https:\/\/api.github.com\/users\/blakev\/gists{\/gist_id}","html_url":"https:\/\/github.com\/blakev","subscriptions_url":"https:\/\/api.github.com\/users\/blakev\/subscriptions","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/4885156?v=4","repos_url":"https:\/\/api.github.com\/users\/blakev\/repos","received_events_url":"https:\/\/api.github.com\/users\/blakev\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/blakev\/starred{\/owner}{\/repo}","site_admin":false,"login":"blakev","type":"User","id":4885156,"followers_url":"https:\/\/api.github.com\/users\/blakev\/followers"},"stats":{"deletions":11,"additions":131,"total":142},"author":{"following_url":"https:\/\/api.github.com\/users\/blakev\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/blakev\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/blakev\/orgs","url":"https:\/\/api.github.com\/users\/blakev","gists_url":"https:\/\/api.github.com\/users\/blakev\/gists{\/gist_id}","html_url":"https:\/\/github.com\/blakev","subscriptions_url":"https:\/\/api.github.com\/users\/blakev\/subscriptions","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/4885156?v=4","repos_url":"https:\/\/api.github.com\/users\/blakev\/repos","received_events_url":"https:\/\/api.github.com\/users\/blakev\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/blakev\/starred{\/owner}{\/repo}","site_admin":false,"login":"blakev","type":"User","id":4885156,"followers_url":"https:\/\/api.github.com\/users\/blakev\/followers"},"url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/commits\/a41a51da7fb6148816c8f1e24d38aeb149470bde","comments_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/commits\/a41a51da7fb6148816c8f1e24d38aeb149470bde\/comments","html_url":"https:\/\/github.com\/jd\/daiquiri\/commit\/a41a51da7fb6148816c8f1e24d38aeb149470bde","sha":"a41a51da7fb6148816c8f1e24d38aeb149470bde","parents":[{"url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/commits\/120897394f140c67c0897bfd1a17a8be767d4835","sha":"120897394f140c67c0897bfd1a17a8be767d4835","html_url":"https:\/\/github.com\/jd\/daiquiri\/commit\/120897394f140c67c0897bfd1a17a8be767d4835"}],"commit":{"committer":{"date":"2017-07-05T19:52:41Z","name":"Blake VandeMerwe","email":"blakev@email.com"},"author":{"date":"2017-07-05T19:52:41Z","name":"Blake VandeMerwe","email":"blakev@email.com"},"url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/git\/commits\/a41a51da7fb6148816c8f1e24d38aeb149470bde","tree":{"url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/git\/trees\/85c36002c849b8e97af24bb5ca1fde89aab39f9c","sha":"85c36002c849b8e97af24bb5ca1fde89aab39f9c"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"Add support for TTY color palettes."}},{"files":[{"status":"modified","deletions":7,"raw_url":"https:\/\/github.com\/jd\/daiquiri\/raw\/7219481a9988c4066a4c7890fd98a960ce01822f\/daiquiri\/__init__.py","blob_url":"https:\/\/github.com\/jd\/daiquiri\/blob\/7219481a9988c4066a4c7890fd98a960ce01822f\/daiquiri\/__init__.py","contents_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/contents\/daiquiri\/__init__.py?ref=7219481a9988c4066a4c7890fd98a960ce01822f","filename":"daiquiri\/__init__.py","sha":"6a315dd7c1223bb51ca4e77538a1f8521e89fb8d","additions":16,"patch":"@@ -72,7 +72,7 @@ def getLogger(name=None, **kwargs):\n \n \n def setup(level=logging.WARNING, outputs=[output.STDERR], program_name=None,\n-          capture_warnings=True, palette=None):\n+          capture_warnings=True):\n     \"\"\"Setup Python logging.\n \n     This will setup basic handlers for Python logging.\n@@ -81,7 +81,6 @@ def setup(level=logging.WARNING, outputs=[output.STDERR], program_name=None,\n     :param outputs: Iterable of outputs to log to.\n     :param program_name: The name of the program. Auto-detected if not set.\n     :param capture_warnings: Capture warnings from the `warnings' module.\n-    :param palette: Object instance that represents TTY color palette.\n     \"\"\"\n     root_logger = logging.getLogger(None)\n \n@@ -91,11 +90,6 @@ def setup(level=logging.WARNING, outputs=[output.STDERR], program_name=None,\n \n     # Add configured handlers\n     for o in outputs:\n-        # modify the color palette if it's defined via setup\n-        if palette is not None:\n-            o_palette = getattr(o.handler.formatter, 'palette', None)\n-            if o_palette:\n-                setattr(o.handler.formatter, 'palette', palette)\n         o.add_to_logger(root_logger)\n \n     root_logger.setLevel(level)\n@@ -112,6 +106,21 @@ def logging_excepthook(exc_type, value, tb):\n         logging.captureWarnings(True)\n \n \n+def setup_colors(palette=formatter.Swatches.Default):\n+    \"\"\"Overwrite the color palette used in all ColorFormatter instances.\n+\n+    :param palette: color palette to use\n+    :type palette: formatter.Palette\n+    :return: None\n+    \"\"\"\n+    root_logger = logging.getLogger(None)\n+\n+    for handler in root_logger.handlers:\n+        if isinstance(handler.formatter, formatter.ColorFormatter) \\\n+                and hasattr(handler.formatter, 'palette'):\n+            handler.formatter.palette = palette\n+\n+\n def parse_and_set_default_log_levels(default_log_levels, separator='='):\n     \"\"\"Set default log levels for some loggers.\n ","changes":23},{"status":"modified","deletions":47,"raw_url":"https:\/\/github.com\/jd\/daiquiri\/raw\/7219481a9988c4066a4c7890fd98a960ce01822f\/daiquiri\/formatter.py","blob_url":"https:\/\/github.com\/jd\/daiquiri\/blob\/7219481a9988c4066a4c7890fd98a960ce01822f\/daiquiri\/formatter.py","contents_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/contents\/daiquiri\/formatter.py?ref=7219481a9988c4066a4c7890fd98a960ce01822f","filename":"daiquiri\/formatter.py","sha":"b3519eecf83cf319c0875f3c657895c3298ea739","additions":56,"patch":"@@ -12,12 +12,7 @@\n import logging\n \n import six\n-\n-\n-if six.PY3:\n-    from itertools import zip_longest as zipl\n-else:\n-    from itertools import izip_longest as zipl\n+from six.moves import zip_longest\n \n try:\n     from pythonjsonlogger import jsonlogger\n@@ -34,15 +29,19 @@\n class Palette(object):\n     \"\"\"Object that represents TTY colors.\"\"\"\n \n-    PREFIX = '\\033['\n-    BASE_WHITE = 15\n-    BASE_MOD = '00;%dm'\n-    CHART_WHITE = 231\n-    CHART_MOD = '38;5;%dm'\n+    PREFIX = '\\033['        # TTY prefix for a color code\n+    BASE_WHITE = 15         # default colors index 15 is white\n+    BASE_MOD = '00;%dm'     # default colors format is `00;00m`\n+    CHART_WHITE = 231       # 256-table colors index 231 is white\n+    CHART_MOD = '38;5;%dm'  # 256-table colors format is `38;5;00m` for foreground\n \n     def __init__(self, *args, base=False, name=None):\n         \"\"\"Create a new color palette from console values.\n \n+        Each argument (in `args`) corresponds to a logging level, ordered by\n+        severity. A standard, default, palette will have five arguments that\n+        represent levels: debug, info, warning, error, and critical.\n+\n         :param args: a color value for each of the default logging levels.\n         :param base: (bool) use TTY defined colors instead of 256-color palette.\n         \"\"\"\n@@ -52,18 +51,31 @@ def __init__(self, *args, base=False, name=None):\n         self._level_colors = None\n \n     def __str__(self):\n-        colors = [c[1] if not isinstance(c, int) else c for c in self.colors]\n+        colors = (c[1] if not isinstance(c, int) else c for c in self.colors)\n         return '<Palette %s(%s)>' % (self.name if self.name else '',\n                                      ', '.join(map(str, colors)))\n \n     @property\n     def level_colors(self):\n+        \"\"\"Mapping of log levels to color prefixes.\n+\n+        :rtype: dict\n+        \"\"\"\n         # deferred processing, read only\n         if self._level_colors is None:\n             self._level_colors = self._process_colors()\n         return self._level_colors\n \n     def _process_colors(self):\n+        \"\"\"Process mapping of log levels.\n+\n+        :rtype: dict\n+        \"\"\"\n+\n+        def _normal(n):\n+            # method that mirrors the format of bold\/underline\n+            return '0;%s', n\n+\n         ret = {}\n         # account for custom logging levels, with potential additional colors\n         logging_levels = tuple(sorted(logging._levelToName.keys(), reverse=False))\n@@ -72,7 +84,7 @@ def _process_colors(self):\n         white = self.BASE_WHITE if self.base else self.CHART_WHITE\n \n         # create a tuple pair for each level and the palette's colors\n-        colors = zipl(logging_levels, [white] + self.colors, fillvalue=white)\n+        colors = zip_longest(logging_levels, [white] + self.colors, fillvalue=white)\n \n         # apply text formatting\n         for level, color in colors:\n@@ -81,7 +93,7 @@ def _process_colors(self):\n                 fmt, c_num = color\n             elif isinstance(color, int):\n                 # no formatting\n-                fmt, c_num = normal(color)\n+                fmt, c_num = _normal(color)\n             else:\n                 raise ValueError(color)\n \n@@ -92,32 +104,31 @@ def _process_colors(self):\n             ret[level] = '%s%s' % (self.PREFIX, fmt % c)\n         return ret\n \n+    @staticmethod\n+    def bold(n):\n+        \"\"\"Bold color in Palette.\n \n-def bold(n):\n-    \"\"\"Bold color in Palette.\n-\n-    :param n: (int)\n-    \"\"\"\n-    return '1;%s', n\n-\n+        :param n: (int)\n+        :rtype: tuple\n+        \"\"\"\n+        return '1;%s', n\n \n-def normal(n):\n-    \"\"\"Normal, no decorations, color in Palette.\n+    @staticmethod\n+    def underline(n):\n+        \"\"\"Underline color in Palette.\n \n-    :param n: (int)\n-    \"\"\"\n-    return '0;%s', n\n+        :param n: (int)\n+        :rtype: tuple\n+        \"\"\"\n+        return '4;%s', n\n \n \n-def underline(n):\n-    \"\"\"Underline color in Palette.\n+class SwatchMeta(type):\n+    \"\"\"Swatches type.\n \n-    :param n: (int)\n+    Used for attaching the palette name, defined in the Swatches\n+    object, to the Palette instance.\n     \"\"\"\n-    return '4;%s', n\n-\n-\n-class SwatchMeta(type):\n     def __new__(cls, name, bases, dct):\n         for k, v in dct.items():\n             if isinstance(v, Palette):\n@@ -127,30 +138,28 @@ def __new__(cls, name, bases, dct):\n \n class Swatches(six.with_metaclass(SwatchMeta, object)):\n     \"\"\" Collection of default colors. \"\"\"\n-    Default = Palette(32, 36, bold(33), bold(31), bold(31), base=True)\n \n-    Bright = Palette(226, 220, 214, 202, bold(196))\n-    Blue = Palette(39, 32, 25, 24, bold(23))\n-    Cool = Palette(33, 45, 172, 203, bold(125))\n-    Purple = Palette(183, 141, 171, 90, bold(57))\n-    Warm = Palette(184, 154, 202, 208, bold(160))\n+    # colors from the user defined tty color palette\n+    Default = Palette(32, 36, Palette.bold(33), Palette.bold(31), Palette.bold(31), base=True)\n+\n+    # colors from the 256-color table\n+    Blue = Palette(39, 32, 25, 24, Palette.bold(23))\n+    Bright = Palette(226, 220, 214, 202, Palette.bold(196))\n+    Cool = Palette(33, 45, 172, 203, Palette.bold(125))\n+    Purple = Palette(183, 141, 171, 90, Palette.bold(57))\n+    Warm = Palette(184, 154, 202, 208, Palette.bold(160))\n \n \n class ColorFormatter(logging.Formatter):\n-    LEVEL_COLORS = None\n     COLOR_STOP = '\\033[0m'\n \n-    def __init__(self, fmt=None, datefmt=None, style='%', palette=Swatches.Default):\n-        super(ColorFormatter, self).__init__(fmt, datefmt, style)\n+    def __init__(self, fmt=None, datefmt=None, palette=Swatches.Default):\n+        super(ColorFormatter, self).__init__(fmt, datefmt)\n         self.palette = palette\n \n     def format(self, record):\n-        if self.LEVEL_COLORS is None:\n-            palette = getattr(self, 'palette', Swatches.Default)\n-            self.LEVEL_COLORS = dict(palette.level_colors)\n-\n         if getattr(record, \"_stream_is_a_tty\", False):\n-            record.color = self.LEVEL_COLORS[record.levelno]\n+            record.color = self.palette.level_colors[record.levelno]\n             record.color_stop = self.COLOR_STOP\n         else:\n             record.color = \"\"","changes":103}],"committer":{"following_url":"https:\/\/api.github.com\/users\/blakev\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/blakev\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/blakev\/orgs","url":"https:\/\/api.github.com\/users\/blakev","gists_url":"https:\/\/api.github.com\/users\/blakev\/gists{\/gist_id}","html_url":"https:\/\/github.com\/blakev","subscriptions_url":"https:\/\/api.github.com\/users\/blakev\/subscriptions","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/4885156?v=4","repos_url":"https:\/\/api.github.com\/users\/blakev\/repos","received_events_url":"https:\/\/api.github.com\/users\/blakev\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/blakev\/starred{\/owner}{\/repo}","site_admin":false,"login":"blakev","type":"User","id":4885156,"followers_url":"https:\/\/api.github.com\/users\/blakev\/followers"},"stats":{"deletions":54,"additions":72,"total":126},"author":{"following_url":"https:\/\/api.github.com\/users\/blakev\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/blakev\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/blakev\/orgs","url":"https:\/\/api.github.com\/users\/blakev","gists_url":"https:\/\/api.github.com\/users\/blakev\/gists{\/gist_id}","html_url":"https:\/\/github.com\/blakev","subscriptions_url":"https:\/\/api.github.com\/users\/blakev\/subscriptions","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/4885156?v=4","repos_url":"https:\/\/api.github.com\/users\/blakev\/repos","received_events_url":"https:\/\/api.github.com\/users\/blakev\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/blakev\/starred{\/owner}{\/repo}","site_admin":false,"login":"blakev","type":"User","id":4885156,"followers_url":"https:\/\/api.github.com\/users\/blakev\/followers"},"url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/commits\/7219481a9988c4066a4c7890fd98a960ce01822f","comments_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/commits\/7219481a9988c4066a4c7890fd98a960ce01822f\/comments","html_url":"https:\/\/github.com\/jd\/daiquiri\/commit\/7219481a9988c4066a4c7890fd98a960ce01822f","sha":"7219481a9988c4066a4c7890fd98a960ce01822f","parents":[{"url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/commits\/a41a51da7fb6148816c8f1e24d38aeb149470bde","sha":"a41a51da7fb6148816c8f1e24d38aeb149470bde","html_url":"https:\/\/github.com\/jd\/daiquiri\/commit\/a41a51da7fb6148816c8f1e24d38aeb149470bde"}],"commit":{"committer":{"date":"2017-07-06T17:47:37Z","name":"Blake VandeMerwe","email":"blakev@email.com"},"author":{"date":"2017-07-06T17:47:37Z","name":"Blake VandeMerwe","email":"blakev@email.com"},"url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/git\/commits\/7219481a9988c4066a4c7890fd98a960ce01822f","tree":{"url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/git\/trees\/e503f126b7c7d3bf05216382da4de93afb75bec8","sha":"e503f126b7c7d3bf05216382da4de93afb75bec8"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"Fixes\n\nRemoved `palette` from `setup` in favour of `setup_colors`.\nSimplified palette instantiation in `ColorFormatter` instance.\nAdd comments and docstrings for clarity."}},{"files":[{"status":"modified","deletions":1,"raw_url":"https:\/\/github.com\/jd\/daiquiri\/raw\/d04992f2cdec62e606bb4b6e6159454fe1ee8aa5\/daiquiri\/__init__.py","blob_url":"https:\/\/github.com\/jd\/daiquiri\/blob\/d04992f2cdec62e606bb4b6e6159454fe1ee8aa5\/daiquiri\/__init__.py","contents_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/contents\/daiquiri\/__init__.py?ref=d04992f2cdec62e606bb4b6e6159454fe1ee8aa5","filename":"daiquiri\/__init__.py","sha":"c70541162b876b1d087ca114f3ce500b9a69283f","additions":1,"patch":"@@ -16,8 +16,8 @@\n import traceback\n import weakref\n \n-from daiquiri import output\n from daiquiri import formatter\n+from daiquiri import output\n \n \n class KeywordArgumentAdapter(logging.LoggerAdapter):","changes":2},{"status":"modified","deletions":27,"raw_url":"https:\/\/github.com\/jd\/daiquiri\/raw\/d04992f2cdec62e606bb4b6e6159454fe1ee8aa5\/daiquiri\/formatter.py","blob_url":"https:\/\/github.com\/jd\/daiquiri\/blob\/d04992f2cdec62e606bb4b6e6159454fe1ee8aa5\/daiquiri\/formatter.py","contents_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/contents\/daiquiri\/formatter.py?ref=d04992f2cdec62e606bb4b6e6159454fe1ee8aa5","filename":"daiquiri\/formatter.py","sha":"97e9948eb2e9472f42cafb79d9e85dc4c4c54131","additions":25,"patch":"@@ -33,21 +33,32 @@ class Palette(object):\n     BASE_WHITE = 15         # default colors index 15 is white\n     BASE_MOD = '00;%dm'     # default colors format is `00;00m`\n     CHART_WHITE = 231       # 256-table colors index 231 is white\n-    CHART_MOD = '38;5;%dm'  # 256-table colors format is `38;5;00m` for foreground\n-\n-    def __init__(self, *args, base=False, name=None):\n+    CHART_MOD = '38;5;%dm'  # 256-table foreground `38;5;00m`\n+\n+    LOG_LEVELS = (\n+        logging.DEBUG,\n+        logging.INFO,\n+        logging.WARN,\n+        logging.ERROR,\n+        logging.CRITICAL,\n+    )\n+\n+    def __init__(self, debug, info, warn, error, critical,\n+                 base=False, name=None):\n         \"\"\"Create a new color palette from console values.\n \n-        Each argument (in `args`) corresponds to a logging level, ordered by\n-        severity. A standard, default, palette will have five arguments that\n-        represent levels: debug, info, warning, error, and critical.\n+        Each argument (in `args`) corresponds to a logging level's color.\n \n-        :param args: a color value for each of the default logging levels.\n-        :param base: (bool) use TTY defined colors instead of 256-color palette.\n+        :param debug: color for debug level\n+        :param info: color for info level\n+        :param warn: color for warning level\n+        :param error: color for error level\n+        :param critical: color for critical level\n+        :param base: (bool) use TTY defined colors instead of 256-color palette\n         \"\"\"\n         self.name = name\n         self.base = base\n-        self.colors = list(args)\n+        self.colors = (debug, info, warn, error, critical)\n         self._level_colors = None\n \n     def __str__(self):\n@@ -71,29 +82,15 @@ def _process_colors(self):\n \n         :rtype: dict\n         \"\"\"\n-\n-        def _normal(n):\n-            # method that mirrors the format of bold\/underline\n-            return '0;%s', n\n-\n         ret = {}\n-        # account for custom logging levels, with potential additional colors\n-        logging_levels = tuple(sorted(logging._levelToName.keys(), reverse=False))\n-\n-        # use `white` for all levels that extend beyond the palette's values\n-        white = self.BASE_WHITE if self.base else self.CHART_WHITE\n-\n-        # create a tuple pair for each level and the palette's colors\n-        colors = zip_longest(logging_levels, [white] + self.colors, fillvalue=white)\n-\n         # apply text formatting\n-        for level, color in colors:\n+        for level, color in zip(self.LOG_LEVELS, self.colors):\n             if isinstance(color, tuple):\n                 # text-decoration modifier\n                 fmt, c_num = color\n             elif isinstance(color, int):\n                 # no formatting\n-                fmt, c_num = _normal(color)\n+                fmt, c_num = '0;%s', color\n             else:\n                 raise ValueError(color)\n \n@@ -137,10 +134,11 @@ def __new__(cls, name, bases, dct):\n \n \n class Swatches(six.with_metaclass(SwatchMeta, object)):\n-    \"\"\" Collection of default colors. \"\"\"\n+    \"\"\"Collection of default colors. \"\"\"\n \n     # colors from the user defined tty color palette\n-    Default = Palette(32, 36, Palette.bold(33), Palette.bold(31), Palette.bold(31), base=True)\n+    Default = Palette(32, 36, Palette.bold(33), Palette.bold(31),\n+                      Palette.bold(31), base=True)\n \n     # colors from the 256-color table\n     Blue = Palette(39, 32, 25, 24, Palette.bold(23))","changes":52}],"committer":{"following_url":"https:\/\/api.github.com\/users\/blakev\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/blakev\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/blakev\/orgs","url":"https:\/\/api.github.com\/users\/blakev","gists_url":"https:\/\/api.github.com\/users\/blakev\/gists{\/gist_id}","html_url":"https:\/\/github.com\/blakev","subscriptions_url":"https:\/\/api.github.com\/users\/blakev\/subscriptions","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/4885156?v=4","repos_url":"https:\/\/api.github.com\/users\/blakev\/repos","received_events_url":"https:\/\/api.github.com\/users\/blakev\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/blakev\/starred{\/owner}{\/repo}","site_admin":false,"login":"blakev","type":"User","id":4885156,"followers_url":"https:\/\/api.github.com\/users\/blakev\/followers"},"stats":{"deletions":28,"additions":26,"total":54},"author":{"following_url":"https:\/\/api.github.com\/users\/blakev\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/blakev\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/blakev\/orgs","url":"https:\/\/api.github.com\/users\/blakev","gists_url":"https:\/\/api.github.com\/users\/blakev\/gists{\/gist_id}","html_url":"https:\/\/github.com\/blakev","subscriptions_url":"https:\/\/api.github.com\/users\/blakev\/subscriptions","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/4885156?v=4","repos_url":"https:\/\/api.github.com\/users\/blakev\/repos","received_events_url":"https:\/\/api.github.com\/users\/blakev\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/blakev\/starred{\/owner}{\/repo}","site_admin":false,"login":"blakev","type":"User","id":4885156,"followers_url":"https:\/\/api.github.com\/users\/blakev\/followers"},"url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/commits\/d04992f2cdec62e606bb4b6e6159454fe1ee8aa5","comments_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/commits\/d04992f2cdec62e606bb4b6e6159454fe1ee8aa5\/comments","html_url":"https:\/\/github.com\/jd\/daiquiri\/commit\/d04992f2cdec62e606bb4b6e6159454fe1ee8aa5","sha":"d04992f2cdec62e606bb4b6e6159454fe1ee8aa5","parents":[{"url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/commits\/7219481a9988c4066a4c7890fd98a960ce01822f","sha":"7219481a9988c4066a4c7890fd98a960ce01822f","html_url":"https:\/\/github.com\/jd\/daiquiri\/commit\/7219481a9988c4066a4c7890fd98a960ce01822f"}],"commit":{"committer":{"date":"2017-07-06T18:04:36Z","name":"Blake VandeMerwe","email":"blakev@email.com"},"author":{"date":"2017-07-06T18:04:36Z","name":"Blake VandeMerwe","email":"blakev@email.com"},"url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/git\/commits\/d04992f2cdec62e606bb4b6e6159454fe1ee8aa5","tree":{"url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/git\/trees\/67cb01e9c736cef2ac2d02a1f3723b6a2c0b4c4f","sha":"67cb01e9c736cef2ac2d02a1f3723b6a2c0b4c4f"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"Pep8 and Python2 fixes\n\nRemoved custom logging level logic from Palette in favour of the default five levels."}},{"files":[{"status":"modified","deletions":1,"raw_url":"https:\/\/github.com\/jd\/daiquiri\/raw\/7b594a61039cca30b160601fc63ed4016b798a44\/daiquiri\/formatter.py","blob_url":"https:\/\/github.com\/jd\/daiquiri\/blob\/7b594a61039cca30b160601fc63ed4016b798a44\/daiquiri\/formatter.py","contents_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/contents\/daiquiri\/formatter.py?ref=7b594a61039cca30b160601fc63ed4016b798a44","filename":"daiquiri\/formatter.py","sha":"716b9ba263757909bcbf9b71ad1f1551749bd0b2","additions":0,"patch":"@@ -12,7 +12,6 @@\n import logging\n \n import six\n-from six.moves import zip_longest\n \n try:\n     from pythonjsonlogger import jsonlogger","changes":1}],"committer":{"following_url":"https:\/\/api.github.com\/users\/blakev\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/blakev\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/blakev\/orgs","url":"https:\/\/api.github.com\/users\/blakev","gists_url":"https:\/\/api.github.com\/users\/blakev\/gists{\/gist_id}","html_url":"https:\/\/github.com\/blakev","subscriptions_url":"https:\/\/api.github.com\/users\/blakev\/subscriptions","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/4885156?v=4","repos_url":"https:\/\/api.github.com\/users\/blakev\/repos","received_events_url":"https:\/\/api.github.com\/users\/blakev\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/blakev\/starred{\/owner}{\/repo}","site_admin":false,"login":"blakev","type":"User","id":4885156,"followers_url":"https:\/\/api.github.com\/users\/blakev\/followers"},"stats":{"deletions":1,"additions":0,"total":1},"author":{"following_url":"https:\/\/api.github.com\/users\/blakev\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/blakev\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/blakev\/orgs","url":"https:\/\/api.github.com\/users\/blakev","gists_url":"https:\/\/api.github.com\/users\/blakev\/gists{\/gist_id}","html_url":"https:\/\/github.com\/blakev","subscriptions_url":"https:\/\/api.github.com\/users\/blakev\/subscriptions","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/4885156?v=4","repos_url":"https:\/\/api.github.com\/users\/blakev\/repos","received_events_url":"https:\/\/api.github.com\/users\/blakev\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/blakev\/starred{\/owner}{\/repo}","site_admin":false,"login":"blakev","type":"User","id":4885156,"followers_url":"https:\/\/api.github.com\/users\/blakev\/followers"},"url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/commits\/7b594a61039cca30b160601fc63ed4016b798a44","comments_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/commits\/7b594a61039cca30b160601fc63ed4016b798a44\/comments","html_url":"https:\/\/github.com\/jd\/daiquiri\/commit\/7b594a61039cca30b160601fc63ed4016b798a44","sha":"7b594a61039cca30b160601fc63ed4016b798a44","parents":[{"url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/commits\/d04992f2cdec62e606bb4b6e6159454fe1ee8aa5","sha":"d04992f2cdec62e606bb4b6e6159454fe1ee8aa5","html_url":"https:\/\/github.com\/jd\/daiquiri\/commit\/d04992f2cdec62e606bb4b6e6159454fe1ee8aa5"}],"commit":{"committer":{"date":"2017-07-06T18:07:27Z","name":"Blake VandeMerwe","email":"blakev@email.com"},"author":{"date":"2017-07-06T18:07:27Z","name":"Blake VandeMerwe","email":"blakev@email.com"},"url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/git\/commits\/7b594a61039cca30b160601fc63ed4016b798a44","tree":{"url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/git\/trees\/ceb8efc08f2c05d8ab5593a57cd2de511c540be9","sha":"ceb8efc08f2c05d8ab5593a57cd2de511c540be9"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"Removed unused import"}}],"statuses_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/statuses\/7b594a61039cca30b160601fc63ed4016b798a44","id":129041855,"requested_reviewers":[],"maintainer_can_modify":true,"title":"Add support for TTY color palettes.","comments":0,"merged_at":null,"state":"open","_links":{"review_comment":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments{\/number}"},"commits":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9\/commits"},"self":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9"},"review_comments":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9\/comments"},"html":{"href":"https:\/\/github.com\/jd\/daiquiri\/pull\/9"},"comments":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/issues\/9\/comments"},"issue":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/issues\/9"},"statuses":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/statuses\/7b594a61039cca30b160601fc63ed4016b798a44"}},"pastamaker_reviews":[{"body":"I +1 the feature idea.\r\nBut the implementation seems a bit overengineered TBH.","commit_id":"a41a51da7fb6148816c8f1e24d38aeb149470bde","submitted_at":"2017-07-06T09:02:48Z","created_at":"2017-07-06T09:02:48Z","author_association":"OWNER","html_url":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#pullrequestreview-48250290","pull_request_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9","state":"CHANGES_REQUESTED","_links":{"html":{"href":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#pullrequestreview-48250290"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9"}},"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"id":48250290},{"body":"","commit_id":"7219481a9988c4066a4c7890fd98a960ce01822f","submitted_at":"2017-07-06T17:50:55Z","created_at":"2017-07-06T17:50:55Z","author_association":"CONTRIBUTOR","html_url":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#pullrequestreview-48412325","pull_request_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9","state":"COMMENTED","_links":{"html":{"href":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#pullrequestreview-48412325"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9"}},"user":{"following_url":"https:\/\/api.github.com\/users\/blakev\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/blakev\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/blakev\/orgs","url":"https:\/\/api.github.com\/users\/blakev","gists_url":"https:\/\/api.github.com\/users\/blakev\/gists{\/gist_id}","html_url":"https:\/\/github.com\/blakev","subscriptions_url":"https:\/\/api.github.com\/users\/blakev\/subscriptions","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/4885156?v=4","repos_url":"https:\/\/api.github.com\/users\/blakev\/repos","received_events_url":"https:\/\/api.github.com\/users\/blakev\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/blakev\/starred{\/owner}{\/repo}","site_admin":false,"login":"blakev","type":"User","id":4885156,"followers_url":"https:\/\/api.github.com\/users\/blakev\/followers"},"id":48412325},{"body":"I agree it's overkill for the task at hand.","commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","submitted_at":"2017-07-07T17:33:11Z","created_at":"2017-07-07T17:33:11Z","author_association":"NONE","html_url":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#pullrequestreview-48667948","pull_request_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9","state":"CHANGES_REQUESTED","_links":{"html":{"href":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#pullrequestreview-48667948"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9"}},"user":{"following_url":"https:\/\/api.github.com\/users\/amirouche\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/amirouche\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/amirouche\/orgs","url":"https:\/\/api.github.com\/users\/amirouche","gists_url":"https:\/\/api.github.com\/users\/amirouche\/gists{\/gist_id}","html_url":"https:\/\/github.com\/amirouche","subscriptions_url":"https:\/\/api.github.com\/users\/amirouche\/subscriptions","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/7444897?v=4","repos_url":"https:\/\/api.github.com\/users\/amirouche\/repos","received_events_url":"https:\/\/api.github.com\/users\/amirouche\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/amirouche\/starred{\/owner}{\/repo}","site_admin":false,"login":"amirouche","type":"User","id":7444897,"followers_url":"https:\/\/api.github.com\/users\/amirouche\/followers"},"id":48667948},{"body":"","commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","submitted_at":"2017-07-07T17:35:09Z","created_at":"2017-07-07T17:35:09Z","author_association":"CONTRIBUTOR","html_url":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#pullrequestreview-48669702","pull_request_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9","state":"COMMENTED","_links":{"html":{"href":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#pullrequestreview-48669702"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9"}},"user":{"following_url":"https:\/\/api.github.com\/users\/blakev\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/blakev\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/blakev\/orgs","url":"https:\/\/api.github.com\/users\/blakev","gists_url":"https:\/\/api.github.com\/users\/blakev\/gists{\/gist_id}","html_url":"https:\/\/github.com\/blakev","subscriptions_url":"https:\/\/api.github.com\/users\/blakev\/subscriptions","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/4885156?v=4","repos_url":"https:\/\/api.github.com\/users\/blakev\/repos","received_events_url":"https:\/\/api.github.com\/users\/blakev\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/blakev\/starred{\/owner}{\/repo}","site_admin":false,"login":"blakev","type":"User","id":4885156,"followers_url":"https:\/\/api.github.com\/users\/blakev\/followers"},"id":48669702},{"body":"","commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","submitted_at":"2017-07-07T17:35:39Z","created_at":"2017-07-07T17:35:39Z","author_association":"CONTRIBUTOR","html_url":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#pullrequestreview-48669830","pull_request_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9","state":"COMMENTED","_links":{"html":{"href":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#pullrequestreview-48669830"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9"}},"user":{"following_url":"https:\/\/api.github.com\/users\/blakev\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/blakev\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/blakev\/orgs","url":"https:\/\/api.github.com\/users\/blakev","gists_url":"https:\/\/api.github.com\/users\/blakev\/gists{\/gist_id}","html_url":"https:\/\/github.com\/blakev","subscriptions_url":"https:\/\/api.github.com\/users\/blakev\/subscriptions","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/4885156?v=4","repos_url":"https:\/\/api.github.com\/users\/blakev\/repos","received_events_url":"https:\/\/api.github.com\/users\/blakev\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/blakev\/starred{\/owner}{\/repo}","site_admin":false,"login":"blakev","type":"User","id":4885156,"followers_url":"https:\/\/api.github.com\/users\/blakev\/followers"},"id":48669830},{"body":"Need a little bit of simplification and squashing of all commits, but good idea.","commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","submitted_at":"2017-07-10T11:56:01Z","created_at":"2017-07-10T11:56:01Z","author_association":"OWNER","html_url":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#pullrequestreview-48877180","pull_request_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9","state":"CHANGES_REQUESTED","_links":{"html":{"href":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#pullrequestreview-48877180"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9"}},"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"id":48877180}],"diff_url":"https:\/\/github.com\/jd\/daiquiri\/pull\/9.diff","pastamaker_ci_statuses":{"continuous-integration\/travis-ci\/pr":{"url":"https:\/\/travis-ci.org\/jd\/daiquiri\/builds\/250868825?utm_source=github_status&utm_medium=notification","state":"success"},"pastamaker\/reviewers":{"url":null,"state":"failure"}},"issue_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/issues\/9","body":"http:\/\/imgur.com\/jM3rgQW\r\n\r\n```python\r\nimport logging\r\n\r\nimport daiquiri\r\nfrom daiquiri.formatter import Swatches\r\n\r\ndaiquiri.setup(level=logging.DEBUG, palette=Swatches.Blue)\r\n\r\nlog = daiquiri.getLogger()\r\nlog.debug('hello')\r\nlog.info('hi')\r\nlog.warn('oh no')\r\nlog.error('gasp')\r\nlog.critical('crap..')\r\n```","head":{"repo":{"issues_url":"https:\/\/api.github.com\/repos\/blakev\/daiquiri\/issues{\/number}","deployments_url":"https:\/\/api.github.com\/repos\/blakev\/daiquiri\/deployments","has_wiki":true,"forks_url":"https:\/\/api.github.com\/repos\/blakev\/daiquiri\/forks","mirror_url":null,"subscription_url":"https:\/\/api.github.com\/repos\/blakev\/daiquiri\/subscription","notifications_url":"https:\/\/api.github.com\/repos\/blakev\/daiquiri\/notifications{?since,all,participating}","collaborators_url":"https:\/\/api.github.com\/repos\/blakev\/daiquiri\/collaborators{\/collaborator}","updated_at":"2017-07-05T16:47:39Z","private":false,"pulls_url":"https:\/\/api.github.com\/repos\/blakev\/daiquiri\/pulls{\/number}","issue_comment_url":"https:\/\/api.github.com\/repos\/blakev\/daiquiri\/issues\/comments{\/number}","labels_url":"https:\/\/api.github.com\/repos\/blakev\/daiquiri\/labels{\/name}","full_name":"blakev\/daiquiri","owner":{"following_url":"https:\/\/api.github.com\/users\/blakev\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/blakev\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/blakev\/orgs","url":"https:\/\/api.github.com\/users\/blakev","gists_url":"https:\/\/api.github.com\/users\/blakev\/gists{\/gist_id}","html_url":"https:\/\/github.com\/blakev","subscriptions_url":"https:\/\/api.github.com\/users\/blakev\/subscriptions","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/4885156?v=4","repos_url":"https:\/\/api.github.com\/users\/blakev\/repos","received_events_url":"https:\/\/api.github.com\/users\/blakev\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/blakev\/starred{\/owner}{\/repo}","site_admin":false,"login":"blakev","type":"User","id":4885156,"followers_url":"https:\/\/api.github.com\/users\/blakev\/followers"},"statuses_url":"https:\/\/api.github.com\/repos\/blakev\/daiquiri\/statuses\/{sha}","id":96341105,"keys_url":"https:\/\/api.github.com\/repos\/blakev\/daiquiri\/keys{\/key_id}","size":53,"tags_url":"https:\/\/api.github.com\/repos\/blakev\/daiquiri\/tags","archived":false,"contributors_url":"https:\/\/api.github.com\/repos\/blakev\/daiquiri\/contributors","downloads_url":"https:\/\/api.github.com\/repos\/blakev\/daiquiri\/downloads","assignees_url":"https:\/\/api.github.com\/repos\/blakev\/daiquiri\/assignees{\/user}","contents_url":"https:\/\/api.github.com\/repos\/blakev\/daiquiri\/contents\/{+path}","description":"Python library to easily setup basic logging functionality","git_refs_url":"https:\/\/api.github.com\/repos\/blakev\/daiquiri\/git\/refs{\/sha}","has_projects":true,"clone_url":"https:\/\/github.com\/blakev\/daiquiri.git","watchers_count":0,"git_tags_url":"https:\/\/api.github.com\/repos\/blakev\/daiquiri\/git\/tags{\/sha}","milestones_url":"https:\/\/api.github.com\/repos\/blakev\/daiquiri\/milestones{\/number}","license":null,"stargazers_count":0,"homepage":null,"fork":true,"commits_url":"https:\/\/api.github.com\/repos\/blakev\/daiquiri\/commits{\/sha}","releases_url":"https:\/\/api.github.com\/repos\/blakev\/daiquiri\/releases{\/id}","issue_events_url":"https:\/\/api.github.com\/repos\/blakev\/daiquiri\/issues\/events{\/number}","has_downloads":true,"has_pages":false,"events_url":"https:\/\/api.github.com\/repos\/blakev\/daiquiri\/events","comments_url":"https:\/\/api.github.com\/repos\/blakev\/daiquiri\/comments{\/number}","html_url":"https:\/\/github.com\/blakev\/daiquiri","compare_url":"https:\/\/api.github.com\/repos\/blakev\/daiquiri\/compare\/{base}...{head}","open_issues":0,"git_commits_url":"https:\/\/api.github.com\/repos\/blakev\/daiquiri\/git\/commits{\/sha}","git_url":"git:\/\/github.com\/blakev\/daiquiri.git","svn_url":"https:\/\/github.com\/blakev\/daiquiri","merges_url":"https:\/\/api.github.com\/repos\/blakev\/daiquiri\/merges","has_issues":false,"ssh_url":"git@github.com:blakev\/daiquiri.git","blobs_url":"https:\/\/api.github.com\/repos\/blakev\/daiquiri\/git\/blobs{\/sha}","forks":0,"hooks_url":"https:\/\/api.github.com\/repos\/blakev\/daiquiri\/hooks","open_issues_count":0,"watchers":0,"name":"daiquiri","language":"Python","url":"https:\/\/api.github.com\/repos\/blakev\/daiquiri","created_at":"2017-07-05T16:47:38Z","archive_url":"https:\/\/api.github.com\/repos\/blakev\/daiquiri\/{archive_format}{\/ref}","pushed_at":"2017-07-07T17:55:39Z","forks_count":0,"default_branch":"master","teams_url":"https:\/\/api.github.com\/repos\/blakev\/daiquiri\/teams","trees_url":"https:\/\/api.github.com\/repos\/blakev\/daiquiri\/git\/trees{\/sha}","languages_url":"https:\/\/api.github.com\/repos\/blakev\/daiquiri\/languages","branches_url":"https:\/\/api.github.com\/repos\/blakev\/daiquiri\/branches{\/branch}","subscribers_url":"https:\/\/api.github.com\/repos\/blakev\/daiquiri\/subscribers","stargazers_url":"https:\/\/api.github.com\/repos\/blakev\/daiquiri\/stargazers"},"sha":"7b594a61039cca30b160601fc63ed4016b798a44","ref":"feature\/color-palettes","user":{"following_url":"https:\/\/api.github.com\/users\/blakev\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/blakev\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/blakev\/orgs","url":"https:\/\/api.github.com\/users\/blakev","gists_url":"https:\/\/api.github.com\/users\/blakev\/gists{\/gist_id}","html_url":"https:\/\/github.com\/blakev","subscriptions_url":"https:\/\/api.github.com\/users\/blakev\/subscriptions","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/4885156?v=4","repos_url":"https:\/\/api.github.com\/users\/blakev\/repos","received_events_url":"https:\/\/api.github.com\/users\/blakev\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/blakev\/starred{\/owner}{\/repo}","site_admin":false,"login":"blakev","type":"User","id":4885156,"followers_url":"https:\/\/api.github.com\/users\/blakev\/followers"},"label":"blakev:feature\/color-palettes"},"pastamaker_weight":-1,"commits":4,"author_association":"CONTRIBUTOR","comments_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/issues\/9\/comments","html_url":"https:\/\/github.com\/jd\/daiquiri\/pull\/9","pastamaker_travis_url":"https:\/\/travis-ci.org\/jd\/daiquiri\/builds\/250868825?utm_source=github_status&utm_medium=notification","updated_at":"2017-07-10T11:56:02Z","pastamaker_approved":false,"base":{"repo":{"issues_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/issues{\/number}","deployments_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/deployments","has_wiki":true,"forks_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/forks","mirror_url":null,"subscription_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/subscription","notifications_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/notifications{?since,all,participating}","collaborators_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/collaborators{\/collaborator}","updated_at":"2018-01-31T06:42:10Z","private":false,"pulls_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls{\/number}","issue_comment_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/issues\/comments{\/number}","labels_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/labels{\/name}","full_name":"jd\/daiquiri","owner":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"statuses_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/statuses\/{sha}","id":91614604,"keys_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/keys{\/key_id}","size":65,"tags_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/tags","archived":false,"contributors_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/contributors","downloads_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/downloads","assignees_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/assignees{\/user}","contents_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/contents\/{+path}","description":"Python library to easily setup basic logging functionality","git_refs_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/git\/refs{\/sha}","has_projects":true,"clone_url":"https:\/\/github.com\/jd\/daiquiri.git","watchers_count":190,"git_tags_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/git\/tags{\/sha}","milestones_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/milestones{\/number}","license":{"spdx_id":"Apache-2.0","url":"https:\/\/api.github.com\/licenses\/apache-2.0","name":"Apache License 2.0","key":"apache-2.0"},"stargazers_count":190,"homepage":null,"fork":false,"commits_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/commits{\/sha}","releases_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/releases{\/id}","issue_events_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/issues\/events{\/number}","has_downloads":true,"has_pages":false,"events_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/events","comments_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/comments{\/number}","html_url":"https:\/\/github.com\/jd\/daiquiri","compare_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/compare\/{base}...{head}","open_issues":3,"git_commits_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/git\/commits{\/sha}","git_url":"git:\/\/github.com\/jd\/daiquiri.git","svn_url":"https:\/\/github.com\/jd\/daiquiri","merges_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/merges","has_issues":true,"ssh_url":"git@github.com:jd\/daiquiri.git","blobs_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/git\/blobs{\/sha}","forks":15,"hooks_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/hooks","open_issues_count":3,"watchers":190,"name":"daiquiri","language":"Python","url":"https:\/\/api.github.com\/repos\/jd\/daiquiri","created_at":"2017-05-17T19:52:24Z","archive_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/{archive_format}{\/ref}","pushed_at":"2017-09-17T09:30:22Z","forks_count":15,"default_branch":"master","teams_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/teams","trees_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/git\/trees{\/sha}","languages_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/languages","branches_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/branches{\/branch}","subscribers_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/subscribers","stargazers_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/stargazers"},"sha":"120897394f140c67c0897bfd1a17a8be767d4835","ref":"master","user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"label":"jd:master"},"rebaseable":false,"milestone":null,"pastamaker_travis_detail":{"commit_id":72873029,"repository_id":13509844,"jobs":[{"build_id":250868825,"repository_id":13509844,"stage_id":null,"tags":null,"repository_slug":"jd\/daiquiri","log_url":"https:\/\/api.travis-ci.org\/jobs\/250868831\/log","number":"46.1","allow_failure":false,"queue":"builds.docker","state":"passed","commit_id":72873029,"finished_at":"2017-07-06T18:09:30Z","started_at":"2017-07-06T18:07:56Z","config":{"group":"stable","install":["pip install tox-travis .[test]"],"language":"python","script":"tox","python":2.7,"before_install":["pip install -U pip"],".result":"configured","dist":"precise","os":"linux"},"id":250868831},{"build_id":250868825,"repository_id":13509844,"stage_id":null,"tags":null,"repository_slug":"jd\/daiquiri","log_url":"https:\/\/api.travis-ci.org\/jobs\/250868832\/log","number":"46.2","allow_failure":false,"queue":"builds.docker","state":"passed","commit_id":72873029,"finished_at":"2017-07-06T18:09:29Z","started_at":"2017-07-06T18:07:59Z","config":{"group":"stable","install":["pip install tox-travis .[test]"],"language":"python","script":"tox","python":3.5,"before_install":["pip install -U pip"],".result":"configured","dist":"precise","os":"linux"},"id":250868832},{"build_id":250868825,"repository_id":13509844,"stage_id":null,"tags":null,"repository_slug":"jd\/daiquiri","log_url":"https:\/\/api.travis-ci.org\/jobs\/250868835\/log","number":"46.3","allow_failure":false,"queue":"builds.docker","state":"passed","commit_id":72873029,"finished_at":"2017-07-06T18:10:37Z","started_at":"2017-07-06T18:07:57Z","config":{"group":"stable","install":["pip install tox-travis .[test]"],"language":"python","script":"tox","python":3.6,"before_install":["pip install -U pip"],".result":"configured","dist":"precise","os":"linux"},"id":250868835}],"event_type":"pull_request","finished_at":"2017-07-06T18:10:37Z","number":"46","job_ids":[250868831,250868832,250868835],"state":"passed","pull_request_title":"Add support for TTY color palettes.","pull_request":true,"duration":344,"started_at":"2017-07-06T18:07:59Z","config":{"group":"stable","install":["pip install tox-travis .[test]"],"language":"python","script":"tox","python":[2.7,3.5,3.6],"before_install":["pip install -U pip"],".result":"configured","dist":"precise"},"id":250868825,"pull_request_number":9,"resume_state":"success"},"requested_teams":[],"locked":false,"merged_by":null,"url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9","mergeable_state":"dirty","created_at":"2017-07-05T19:54:30Z","merged":false,"review_comments_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9\/comments","review_comments":22,"assignees":[],"review_comment_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments{\/number}","pastamaker_comments":[{"original_position":11,"diff_hunk":"@@ -11,6 +11,14 @@\n #    under the License.\n import logging\n \n+import six\n+\n+\n+if six.PY3:\n+    from itertools import zip_longest as zipl\n+else:\n+    from itertools import izip_longest as zipl\n+","pull_request_review_id":48250290,"commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","created_at":"2017-07-06T07:10:13Z","author_association":"OWNER","body":"six.moves.zip_longest","updated_at":"2017-07-06T18:07:33Z","html_url":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r125825545","pull_request_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9","state":"COMMENT","_links":{"self":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/125825545"},"html":{"href":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r125825545"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9"}},"url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/125825545","position":null,"path":"daiquiri\/formatter.py","original_commit_id":"a41a51da7fb6148816c8f1e24d38aeb149470bde","id":125825545,"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"}},{"original_position":13,"diff_hunk":"@@ -71,15 +72,16 @@ def getLogger(name=None, **kwargs):\n \n \n def setup(level=logging.WARNING, outputs=[output.STDERR], program_name=None,\n-          capture_warnings=True):\n+          capture_warnings=True, palette=None):","pull_request_review_id":48250290,"commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","created_at":"2017-07-06T07:11:06Z","author_association":"OWNER","body":"palette is related to some outputs, so it should be an option of an `Output` object, not setup.","updated_at":"2017-07-06T18:07:33Z","html_url":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r125825673","pull_request_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9","state":"COMMENT","_links":{"self":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/125825673"},"html":{"href":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r125825673"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9"}},"url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/125825673","position":null,"path":"daiquiri\/__init__.py","original_commit_id":"a41a51da7fb6148816c8f1e24d38aeb149470bde","id":125825673,"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"}},{"original_position":49,"diff_hunk":"@@ -23,19 +31,124 @@\n )\n \n \n-class ColorFormatter(logging.Formatter):\n-    # TODO(jd) Allow configuration\n-    LEVEL_COLORS = {\n-        logging.DEBUG: '\\033[00;32m',  # GREEN\n-        logging.INFO: '\\033[00;36m',  # CYAN\n-        logging.WARN: '\\033[01;33m',  # BOLD YELLOW\n-        logging.ERROR: '\\033[01;31m',  # BOLD RED\n-        logging.CRITICAL: '\\033[01;31m',  # BOLD RED\n-    }\n+class Palette(object):\n+    \"\"\"Object that represents TTY colors.\"\"\"\n+\n+    PREFIX = '\\033['\n+    BASE_WHITE = 15\n+    BASE_MOD = '00;%dm'\n+    CHART_WHITE = 231\n+    CHART_MOD = '38;5;%dm'\n+\n+    def __init__(self, *args, base=False, name=None):\n+        \"\"\"Create a new color palette from console values.\n+\n+        :param args: a color value for each of the default logging levels.\n+        :param base: (bool) use TTY defined colors instead of 256-color palette.\n+        \"\"\"\n+        self.name = name\n+        self.base = base\n+        self.colors = list(args)\n+        self._level_colors = None\n+\n+    def __str__(self):\n+        colors = [c[1] if not isinstance(c, int) else c for c in self.colors]","pull_request_review_id":48250290,"commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","created_at":"2017-07-06T08:57:23Z","author_association":"OWNER","body":"Use `()` instead of `[]` so it's just an iterator, no need to create a full list.","updated_at":"2017-07-06T18:07:33Z","html_url":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r125845560","pull_request_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9","state":"COMMENT","_links":{"self":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/125845560"},"html":{"href":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r125845560"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9"}},"url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/125845560","position":null,"path":"daiquiri\/formatter.py","original_commit_id":"a41a51da7fb6148816c8f1e24d38aeb149470bde","id":125845560,"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"}},{"original_position":40,"diff_hunk":"@@ -23,19 +31,124 @@\n )\n \n \n-class ColorFormatter(logging.Formatter):\n-    # TODO(jd) Allow configuration\n-    LEVEL_COLORS = {\n-        logging.DEBUG: '\\033[00;32m',  # GREEN\n-        logging.INFO: '\\033[00;36m',  # CYAN\n-        logging.WARN: '\\033[01;33m',  # BOLD YELLOW\n-        logging.ERROR: '\\033[01;31m',  # BOLD RED\n-        logging.CRITICAL: '\\033[01;31m',  # BOLD RED\n-    }\n+class Palette(object):\n+    \"\"\"Object that represents TTY colors.\"\"\"\n+\n+    PREFIX = '\\033['\n+    BASE_WHITE = 15\n+    BASE_MOD = '00;%dm'\n+    CHART_WHITE = 231\n+    CHART_MOD = '38;5;%dm'\n+\n+    def __init__(self, *args, base=False, name=None):\n+        \"\"\"Create a new color palette from console values.\n+\n+        :param args: a color value for each of the default logging levels.","pull_request_review_id":48250290,"commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","created_at":"2017-07-06T08:58:07Z","author_association":"OWNER","body":"You should be more explicit about the format here, it's no that obvious.","updated_at":"2017-07-06T18:07:33Z","html_url":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r125845708","pull_request_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9","state":"COMMENT","_links":{"self":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/125845708"},"html":{"href":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r125845708"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9"}},"url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/125845708","position":null,"path":"daiquiri\/formatter.py","original_commit_id":"a41a51da7fb6148816c8f1e24d38aeb149470bde","id":125845708,"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"}},{"original_position":138,"diff_hunk":"@@ -23,19 +31,124 @@\n )\n \n \n-class ColorFormatter(logging.Formatter):\n-    # TODO(jd) Allow configuration\n-    LEVEL_COLORS = {\n-        logging.DEBUG: '\\033[00;32m',  # GREEN\n-        logging.INFO: '\\033[00;36m',  # CYAN\n-        logging.WARN: '\\033[01;33m',  # BOLD YELLOW\n-        logging.ERROR: '\\033[01;31m',  # BOLD RED\n-        logging.CRITICAL: '\\033[01;31m',  # BOLD RED\n-    }\n+class Palette(object):\n+    \"\"\"Object that represents TTY colors.\"\"\"\n+\n+    PREFIX = '\\033['\n+    BASE_WHITE = 15\n+    BASE_MOD = '00;%dm'\n+    CHART_WHITE = 231\n+    CHART_MOD = '38;5;%dm'\n+\n+    def __init__(self, *args, base=False, name=None):\n+        \"\"\"Create a new color palette from console values.\n+\n+        :param args: a color value for each of the default logging levels.\n+        :param base: (bool) use TTY defined colors instead of 256-color palette.\n+        \"\"\"\n+        self.name = name\n+        self.base = base\n+        self.colors = list(args)\n+        self._level_colors = None\n+\n+    def __str__(self):\n+        colors = [c[1] if not isinstance(c, int) else c for c in self.colors]\n+        return '<Palette %s(%s)>' % (self.name if self.name else '',\n+                                     ', '.join(map(str, colors)))\n+\n+    @property\n+    def level_colors(self):\n+        # deferred processing, read only\n+        if self._level_colors is None:\n+            self._level_colors = self._process_colors()\n+        return self._level_colors\n+\n+    def _process_colors(self):\n+        ret = {}\n+        # account for custom logging levels, with potential additional colors\n+        logging_levels = tuple(sorted(logging._levelToName.keys(), reverse=False))\n+\n+        # use `white` for all levels that extend beyond the palette's values\n+        white = self.BASE_WHITE if self.base else self.CHART_WHITE\n+\n+        # create a tuple pair for each level and the palette's colors\n+        colors = zipl(logging_levels, [white] + self.colors, fillvalue=white)\n+\n+        # apply text formatting\n+        for level, color in colors:\n+            if isinstance(color, tuple):\n+                # text-decoration modifier\n+                fmt, c_num = color\n+            elif isinstance(color, int):\n+                # no formatting\n+                fmt, c_num = normal(color)\n+            else:\n+                raise ValueError(color)\n+\n+            if self.base:\n+                c = self.BASE_MOD % c_num\n+            else:\n+                c = self.CHART_MOD % c_num\n+            ret[level] = '%s%s' % (self.PREFIX, fmt % c)\n+        return ret\n+\n+\n+def bold(n):\n+    \"\"\"Bold color in Palette.\n \n+    :param n: (int)\n+    \"\"\"\n+    return '1;%s', n\n+\n+\n+def normal(n):\n+    \"\"\"Normal, no decorations, color in Palette.\n+\n+    :param n: (int)\n+    \"\"\"\n+    return '0;%s', n\n+\n+\n+def underline(n):\n+    \"\"\"Underline color in Palette.\n+\n+    :param n: (int)\n+    \"\"\"\n+    return '4;%s', n\n+\n+\n+class SwatchMeta(type):\n+    def __new__(cls, name, bases, dct):\n+        for k, v in dct.items():\n+            if isinstance(v, Palette):\n+                v.name = k\n+        return super(SwatchMeta, cls).__new__(cls, name, bases, dct)\n+\n+\n+class Swatches(six.with_metaclass(SwatchMeta, object)):\n+    \"\"\" Collection of default colors. \"\"\"\n+    Default = Palette(32, 36, bold(33), bold(31), bold(31), base=True)\n+\n+    Bright = Palette(226, 220, 214, 202, bold(196))\n+    Blue = Palette(39, 32, 25, 24, bold(23))\n+    Cool = Palette(33, 45, 172, 203, bold(125))\n+    Purple = Palette(183, 141, 171, 90, bold(57))\n+    Warm = Palette(184, 154, 202, 208, bold(160))\n+\n+\n+class ColorFormatter(logging.Formatter):\n+    LEVEL_COLORS = None\n     COLOR_STOP = '\\033[0m'\n \n+    def __init__(self, fmt=None, datefmt=None, style='%', palette=Swatches.Default):\n+        super(ColorFormatter, self).__init__(fmt, datefmt, style)","pull_request_review_id":48250290,"commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","created_at":"2017-07-06T09:00:10Z","author_association":"OWNER","body":"what is this style variable for? I miss something here I think","updated_at":"2017-07-06T18:07:33Z","html_url":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r125846147","pull_request_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9","state":"COMMENT","_links":{"self":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/125846147"},"html":{"href":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r125846147"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9"}},"url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/125846147","position":null,"path":"daiquiri\/formatter.py","original_commit_id":"a41a51da7fb6148816c8f1e24d38aeb149470bde","id":125846147,"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"}},{"original_position":143,"diff_hunk":"@@ -23,19 +31,124 @@\n )\n \n \n-class ColorFormatter(logging.Formatter):\n-    # TODO(jd) Allow configuration\n-    LEVEL_COLORS = {\n-        logging.DEBUG: '\\033[00;32m',  # GREEN\n-        logging.INFO: '\\033[00;36m',  # CYAN\n-        logging.WARN: '\\033[01;33m',  # BOLD YELLOW\n-        logging.ERROR: '\\033[01;31m',  # BOLD RED\n-        logging.CRITICAL: '\\033[01;31m',  # BOLD RED\n-    }\n+class Palette(object):\n+    \"\"\"Object that represents TTY colors.\"\"\"\n+\n+    PREFIX = '\\033['\n+    BASE_WHITE = 15\n+    BASE_MOD = '00;%dm'\n+    CHART_WHITE = 231\n+    CHART_MOD = '38;5;%dm'\n+\n+    def __init__(self, *args, base=False, name=None):\n+        \"\"\"Create a new color palette from console values.\n+\n+        :param args: a color value for each of the default logging levels.\n+        :param base: (bool) use TTY defined colors instead of 256-color palette.\n+        \"\"\"\n+        self.name = name\n+        self.base = base\n+        self.colors = list(args)\n+        self._level_colors = None\n+\n+    def __str__(self):\n+        colors = [c[1] if not isinstance(c, int) else c for c in self.colors]\n+        return '<Palette %s(%s)>' % (self.name if self.name else '',\n+                                     ', '.join(map(str, colors)))\n+\n+    @property\n+    def level_colors(self):\n+        # deferred processing, read only\n+        if self._level_colors is None:\n+            self._level_colors = self._process_colors()\n+        return self._level_colors\n+\n+    def _process_colors(self):\n+        ret = {}\n+        # account for custom logging levels, with potential additional colors\n+        logging_levels = tuple(sorted(logging._levelToName.keys(), reverse=False))\n+\n+        # use `white` for all levels that extend beyond the palette's values\n+        white = self.BASE_WHITE if self.base else self.CHART_WHITE\n+\n+        # create a tuple pair for each level and the palette's colors\n+        colors = zipl(logging_levels, [white] + self.colors, fillvalue=white)\n+\n+        # apply text formatting\n+        for level, color in colors:\n+            if isinstance(color, tuple):\n+                # text-decoration modifier\n+                fmt, c_num = color\n+            elif isinstance(color, int):\n+                # no formatting\n+                fmt, c_num = normal(color)\n+            else:\n+                raise ValueError(color)\n+\n+            if self.base:\n+                c = self.BASE_MOD % c_num\n+            else:\n+                c = self.CHART_MOD % c_num\n+            ret[level] = '%s%s' % (self.PREFIX, fmt % c)\n+        return ret\n+\n+\n+def bold(n):\n+    \"\"\"Bold color in Palette.\n \n+    :param n: (int)\n+    \"\"\"\n+    return '1;%s', n\n+\n+\n+def normal(n):\n+    \"\"\"Normal, no decorations, color in Palette.\n+\n+    :param n: (int)\n+    \"\"\"\n+    return '0;%s', n\n+\n+\n+def underline(n):\n+    \"\"\"Underline color in Palette.\n+\n+    :param n: (int)\n+    \"\"\"\n+    return '4;%s', n\n+\n+\n+class SwatchMeta(type):\n+    def __new__(cls, name, bases, dct):\n+        for k, v in dct.items():\n+            if isinstance(v, Palette):\n+                v.name = k\n+        return super(SwatchMeta, cls).__new__(cls, name, bases, dct)\n+\n+\n+class Swatches(six.with_metaclass(SwatchMeta, object)):\n+    \"\"\" Collection of default colors. \"\"\"\n+    Default = Palette(32, 36, bold(33), bold(31), bold(31), base=True)\n+\n+    Bright = Palette(226, 220, 214, 202, bold(196))\n+    Blue = Palette(39, 32, 25, 24, bold(23))\n+    Cool = Palette(33, 45, 172, 203, bold(125))\n+    Purple = Palette(183, 141, 171, 90, bold(57))\n+    Warm = Palette(184, 154, 202, 208, bold(160))\n+\n+\n+class ColorFormatter(logging.Formatter):\n+    LEVEL_COLORS = None\n     COLOR_STOP = '\\033[0m'\n \n+    def __init__(self, fmt=None, datefmt=None, style='%', palette=Swatches.Default):\n+        super(ColorFormatter, self).__init__(fmt, datefmt, style)\n+        self.palette = palette\n+\n     def format(self, record):\n+        if self.LEVEL_COLORS is None:\n+            palette = getattr(self, 'palette', Swatches.Default)","pull_request_review_id":48250290,"commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","created_at":"2017-07-06T09:01:16Z","author_association":"OWNER","body":"`palette` is initialized in `__init__` so there's no need for `getattr`","updated_at":"2017-07-06T18:07:33Z","html_url":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r125846356","pull_request_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9","state":"COMMENT","_links":{"self":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/125846356"},"html":{"href":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r125846356"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9"}},"url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/125846356","position":null,"path":"daiquiri\/formatter.py","original_commit_id":"a41a51da7fb6148816c8f1e24d38aeb149470bde","id":125846356,"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"}},{"original_position":144,"diff_hunk":"@@ -23,19 +31,124 @@\n )\n \n \n-class ColorFormatter(logging.Formatter):\n-    # TODO(jd) Allow configuration\n-    LEVEL_COLORS = {\n-        logging.DEBUG: '\\033[00;32m',  # GREEN\n-        logging.INFO: '\\033[00;36m',  # CYAN\n-        logging.WARN: '\\033[01;33m',  # BOLD YELLOW\n-        logging.ERROR: '\\033[01;31m',  # BOLD RED\n-        logging.CRITICAL: '\\033[01;31m',  # BOLD RED\n-    }\n+class Palette(object):\n+    \"\"\"Object that represents TTY colors.\"\"\"\n+\n+    PREFIX = '\\033['\n+    BASE_WHITE = 15\n+    BASE_MOD = '00;%dm'\n+    CHART_WHITE = 231\n+    CHART_MOD = '38;5;%dm'\n+\n+    def __init__(self, *args, base=False, name=None):\n+        \"\"\"Create a new color palette from console values.\n+\n+        :param args: a color value for each of the default logging levels.\n+        :param base: (bool) use TTY defined colors instead of 256-color palette.\n+        \"\"\"\n+        self.name = name\n+        self.base = base\n+        self.colors = list(args)\n+        self._level_colors = None\n+\n+    def __str__(self):\n+        colors = [c[1] if not isinstance(c, int) else c for c in self.colors]\n+        return '<Palette %s(%s)>' % (self.name if self.name else '',\n+                                     ', '.join(map(str, colors)))\n+\n+    @property\n+    def level_colors(self):\n+        # deferred processing, read only\n+        if self._level_colors is None:\n+            self._level_colors = self._process_colors()\n+        return self._level_colors\n+\n+    def _process_colors(self):\n+        ret = {}\n+        # account for custom logging levels, with potential additional colors\n+        logging_levels = tuple(sorted(logging._levelToName.keys(), reverse=False))\n+\n+        # use `white` for all levels that extend beyond the palette's values\n+        white = self.BASE_WHITE if self.base else self.CHART_WHITE\n+\n+        # create a tuple pair for each level and the palette's colors\n+        colors = zipl(logging_levels, [white] + self.colors, fillvalue=white)\n+\n+        # apply text formatting\n+        for level, color in colors:\n+            if isinstance(color, tuple):\n+                # text-decoration modifier\n+                fmt, c_num = color\n+            elif isinstance(color, int):\n+                # no formatting\n+                fmt, c_num = normal(color)\n+            else:\n+                raise ValueError(color)\n+\n+            if self.base:\n+                c = self.BASE_MOD % c_num\n+            else:\n+                c = self.CHART_MOD % c_num\n+            ret[level] = '%s%s' % (self.PREFIX, fmt % c)\n+        return ret\n+\n+\n+def bold(n):\n+    \"\"\"Bold color in Palette.\n \n+    :param n: (int)\n+    \"\"\"\n+    return '1;%s', n\n+\n+\n+def normal(n):\n+    \"\"\"Normal, no decorations, color in Palette.\n+\n+    :param n: (int)\n+    \"\"\"\n+    return '0;%s', n\n+\n+\n+def underline(n):\n+    \"\"\"Underline color in Palette.\n+\n+    :param n: (int)\n+    \"\"\"\n+    return '4;%s', n\n+\n+\n+class SwatchMeta(type):\n+    def __new__(cls, name, bases, dct):\n+        for k, v in dct.items():\n+            if isinstance(v, Palette):\n+                v.name = k\n+        return super(SwatchMeta, cls).__new__(cls, name, bases, dct)\n+\n+\n+class Swatches(six.with_metaclass(SwatchMeta, object)):\n+    \"\"\" Collection of default colors. \"\"\"\n+    Default = Palette(32, 36, bold(33), bold(31), bold(31), base=True)\n+\n+    Bright = Palette(226, 220, 214, 202, bold(196))\n+    Blue = Palette(39, 32, 25, 24, bold(23))\n+    Cool = Palette(33, 45, 172, 203, bold(125))\n+    Purple = Palette(183, 141, 171, 90, bold(57))\n+    Warm = Palette(184, 154, 202, 208, bold(160))\n+\n+\n+class ColorFormatter(logging.Formatter):\n+    LEVEL_COLORS = None\n     COLOR_STOP = '\\033[0m'\n \n+    def __init__(self, fmt=None, datefmt=None, style='%', palette=Swatches.Default):\n+        super(ColorFormatter, self).__init__(fmt, datefmt, style)\n+        self.palette = palette\n+\n     def format(self, record):\n+        if self.LEVEL_COLORS is None:\n+            palette = getattr(self, 'palette', Swatches.Default)\n+            self.LEVEL_COLORS = dict(palette.level_colors)","pull_request_review_id":48250290,"commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","created_at":"2017-07-06T09:01:26Z","author_association":"OWNER","body":"just do that in `__init__` directly?","updated_at":"2017-07-06T18:07:33Z","html_url":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r125846400","pull_request_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9","state":"COMMENT","_links":{"self":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/125846400"},"html":{"href":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r125846400"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9"}},"url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/125846400","position":null,"path":"daiquiri\/formatter.py","original_commit_id":"a41a51da7fb6148816c8f1e24d38aeb149470bde","id":125846400,"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"}},{"original_position":106,"diff_hunk":"@@ -23,19 +31,124 @@\n )\n \n \n-class ColorFormatter(logging.Formatter):\n-    # TODO(jd) Allow configuration\n-    LEVEL_COLORS = {\n-        logging.DEBUG: '\\033[00;32m',  # GREEN\n-        logging.INFO: '\\033[00;36m',  # CYAN\n-        logging.WARN: '\\033[01;33m',  # BOLD YELLOW\n-        logging.ERROR: '\\033[01;31m',  # BOLD RED\n-        logging.CRITICAL: '\\033[01;31m',  # BOLD RED\n-    }\n+class Palette(object):\n+    \"\"\"Object that represents TTY colors.\"\"\"\n+\n+    PREFIX = '\\033['\n+    BASE_WHITE = 15\n+    BASE_MOD = '00;%dm'\n+    CHART_WHITE = 231\n+    CHART_MOD = '38;5;%dm'\n+\n+    def __init__(self, *args, base=False, name=None):\n+        \"\"\"Create a new color palette from console values.\n+\n+        :param args: a color value for each of the default logging levels.\n+        :param base: (bool) use TTY defined colors instead of 256-color palette.\n+        \"\"\"\n+        self.name = name\n+        self.base = base\n+        self.colors = list(args)\n+        self._level_colors = None\n+\n+    def __str__(self):\n+        colors = [c[1] if not isinstance(c, int) else c for c in self.colors]\n+        return '<Palette %s(%s)>' % (self.name if self.name else '',\n+                                     ', '.join(map(str, colors)))\n+\n+    @property\n+    def level_colors(self):\n+        # deferred processing, read only\n+        if self._level_colors is None:\n+            self._level_colors = self._process_colors()\n+        return self._level_colors\n+\n+    def _process_colors(self):\n+        ret = {}\n+        # account for custom logging levels, with potential additional colors\n+        logging_levels = tuple(sorted(logging._levelToName.keys(), reverse=False))\n+\n+        # use `white` for all levels that extend beyond the palette's values\n+        white = self.BASE_WHITE if self.base else self.CHART_WHITE\n+\n+        # create a tuple pair for each level and the palette's colors\n+        colors = zipl(logging_levels, [white] + self.colors, fillvalue=white)\n+\n+        # apply text formatting\n+        for level, color in colors:\n+            if isinstance(color, tuple):\n+                # text-decoration modifier\n+                fmt, c_num = color\n+            elif isinstance(color, int):\n+                # no formatting\n+                fmt, c_num = normal(color)\n+            else:\n+                raise ValueError(color)\n+\n+            if self.base:\n+                c = self.BASE_MOD % c_num\n+            else:\n+                c = self.CHART_MOD % c_num\n+            ret[level] = '%s%s' % (self.PREFIX, fmt % c)\n+        return ret\n+\n+\n+def bold(n):\n+    \"\"\"Bold color in Palette.\n \n+    :param n: (int)\n+    \"\"\"\n+    return '1;%s', n\n+\n+\n+def normal(n):\n+    \"\"\"Normal, no decorations, color in Palette.\n+\n+    :param n: (int)\n+    \"\"\"\n+    return '0;%s', n\n+\n+\n+def underline(n):","pull_request_review_id":48250290,"commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","created_at":"2017-07-06T09:02:10Z","author_association":"OWNER","body":"No clue how to use this function. I imagine it should also be attached to a class? Even as a static method.","updated_at":"2017-07-06T18:07:33Z","html_url":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r125846560","pull_request_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9","state":"COMMENT","_links":{"self":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/125846560"},"html":{"href":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r125846560"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9"}},"url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/125846560","position":null,"path":"daiquiri\/formatter.py","original_commit_id":"a41a51da7fb6148816c8f1e24d38aeb149470bde","id":125846560,"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"}},{"body":"I +1 the feature idea.\r\nBut the implementation seems a bit overengineered TBH.","commit_id":"a41a51da7fb6148816c8f1e24d38aeb149470bde","submitted_at":"2017-07-06T09:02:48Z","created_at":"2017-07-06T09:02:48Z","author_association":"OWNER","html_url":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#pullrequestreview-48250290","pull_request_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9","state":"CHANGES_REQUESTED","_links":{"html":{"href":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#pullrequestreview-48250290"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9"}},"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"id":48250290},{"original_position":170,"diff_hunk":"@@ -127,30 +138,28 @@ def __new__(cls, name, bases, dct):\n \n class Swatches(six.with_metaclass(SwatchMeta, object)):\n     \"\"\" Collection of default colors. \"\"\"\n-    Default = Palette(32, 36, bold(33), bold(31), bold(31), base=True)\n \n-    Bright = Palette(226, 220, 214, 202, bold(196))\n-    Blue = Palette(39, 32, 25, 24, bold(23))\n-    Cool = Palette(33, 45, 172, 203, bold(125))\n-    Purple = Palette(183, 141, 171, 90, bold(57))\n-    Warm = Palette(184, 154, 202, 208, bold(160))\n+    # colors from the user defined tty color palette\n+    Default = Palette(32, 36, Palette.bold(33), Palette.bold(31), Palette.bold(31), base=True)\n+\n+    # colors from the 256-color table\n+    Blue = Palette(39, 32, 25, 24, Palette.bold(23))\n+    Bright = Palette(226, 220, 214, 202, Palette.bold(196))\n+    Cool = Palette(33, 45, 172, 203, Palette.bold(125))\n+    Purple = Palette(183, 141, 171, 90, Palette.bold(57))\n+    Warm = Palette(184, 154, 202, 208, Palette.bold(160))\n \n \n class ColorFormatter(logging.Formatter):\n-    LEVEL_COLORS = None\n     COLOR_STOP = '\\033[0m'\n \n-    def __init__(self, fmt=None, datefmt=None, style='%', palette=Swatches.Default):\n-        super(ColorFormatter, self).__init__(fmt, datefmt, style)\n+    def __init__(self, fmt=None, datefmt=None, palette=Swatches.Default):\n+        super(ColorFormatter, self).__init__(fmt, datefmt)","pull_request_review_id":48412325,"commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","created_at":"2017-07-06T17:50:55Z","author_association":"CONTRIBUTOR","body":"`style='%'` is Python3 only it seems. It's used to define what type of string formatting the logging module should use.","updated_at":"2017-07-06T18:07:33Z","html_url":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r125969818","pull_request_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9","state":"COMMENT","_links":{"self":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/125969818"},"html":{"href":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r125969818"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9"}},"url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/125969818","position":null,"path":"daiquiri\/formatter.py","original_commit_id":"7219481a9988c4066a4c7890fd98a960ce01822f","id":125969818,"user":{"following_url":"https:\/\/api.github.com\/users\/blakev\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/blakev\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/blakev\/orgs","url":"https:\/\/api.github.com\/users\/blakev","gists_url":"https:\/\/api.github.com\/users\/blakev\/gists{\/gist_id}","html_url":"https:\/\/github.com\/blakev","subscriptions_url":"https:\/\/api.github.com\/users\/blakev\/subscriptions","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/4885156?v=4","repos_url":"https:\/\/api.github.com\/users\/blakev\/repos","received_events_url":"https:\/\/api.github.com\/users\/blakev\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/blakev\/starred{\/owner}{\/repo}","site_admin":false,"login":"blakev","type":"User","id":4885156,"followers_url":"https:\/\/api.github.com\/users\/blakev\/followers"}},{"body":"","commit_id":"7219481a9988c4066a4c7890fd98a960ce01822f","submitted_at":"2017-07-06T17:50:55Z","created_at":"2017-07-06T17:50:55Z","author_association":"CONTRIBUTOR","html_url":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#pullrequestreview-48412325","pull_request_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9","state":"COMMENTED","_links":{"html":{"href":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#pullrequestreview-48412325"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9"}},"user":{"following_url":"https:\/\/api.github.com\/users\/blakev\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/blakev\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/blakev\/orgs","url":"https:\/\/api.github.com\/users\/blakev","gists_url":"https:\/\/api.github.com\/users\/blakev\/gists{\/gist_id}","html_url":"https:\/\/github.com\/blakev","subscriptions_url":"https:\/\/api.github.com\/users\/blakev\/subscriptions","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/4885156?v=4","repos_url":"https:\/\/api.github.com\/users\/blakev\/repos","received_events_url":"https:\/\/api.github.com\/users\/blakev\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/blakev\/starred{\/owner}{\/repo}","site_admin":false,"login":"blakev","type":"User","id":4885156,"followers_url":"https:\/\/api.github.com\/users\/blakev\/followers"},"id":48412325},{"original_position":21,"diff_hunk":"@@ -105,6 +106,21 @@ def logging_excepthook(exc_type, value, tb):\n         logging.captureWarnings(True)\n \n \n+def setup_colors(palette=formatter.Swatches.Default):","pull_request_review_id":48667948,"commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","created_at":"2017-07-07T17:28:11Z","author_association":"NONE","body":"I am not sure how this is useful. Maybe its usecase must be documented somewhere?","updated_at":"2017-07-07T17:33:11Z","html_url":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r126201276","pull_request_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9","state":"COMMENT","_links":{"self":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/126201276"},"html":{"href":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r126201276"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9"}},"url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/126201276","position":21,"path":"daiquiri\/__init__.py","original_commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","id":126201276,"user":{"following_url":"https:\/\/api.github.com\/users\/amirouche\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/amirouche\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/amirouche\/orgs","url":"https:\/\/api.github.com\/users\/amirouche","gists_url":"https:\/\/api.github.com\/users\/amirouche\/gists{\/gist_id}","html_url":"https:\/\/github.com\/amirouche","subscriptions_url":"https:\/\/api.github.com\/users\/amirouche\/subscriptions","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/7444897?v=4","repos_url":"https:\/\/api.github.com\/users\/amirouche\/repos","received_events_url":"https:\/\/api.github.com\/users\/amirouche\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/amirouche\/starred{\/owner}{\/repo}","site_admin":false,"login":"amirouche","type":"User","id":7444897,"followers_url":"https:\/\/api.github.com\/users\/amirouche\/followers"}},{"original_position":22,"diff_hunk":"@@ -23,21 +25,138 @@\n )\n \n \n-class ColorFormatter(logging.Formatter):\n-    # TODO(jd) Allow configuration\n-    LEVEL_COLORS = {\n-        logging.DEBUG: '\\033[00;32m',  # GREEN\n-        logging.INFO: '\\033[00;36m',  # CYAN\n-        logging.WARN: '\\033[01;33m',  # BOLD YELLOW\n-        logging.ERROR: '\\033[01;31m',  # BOLD RED\n-        logging.CRITICAL: '\\033[01;31m',  # BOLD RED\n-    }\n+class Palette(object):","pull_request_review_id":48667948,"commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","created_at":"2017-07-07T17:32:31Z","author_association":"NONE","body":"Why not simply pass level colors as an argument of the constructor with a default value that is the current\/old `LEVEL_COLORS` dictionary?","updated_at":"2017-07-07T17:33:50Z","html_url":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r126202166","pull_request_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9","state":"COMMENT","_links":{"self":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/126202166"},"html":{"href":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r126202166"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9"}},"url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/126202166","position":22,"path":"daiquiri\/formatter.py","original_commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","id":126202166,"user":{"following_url":"https:\/\/api.github.com\/users\/amirouche\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/amirouche\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/amirouche\/orgs","url":"https:\/\/api.github.com\/users\/amirouche","gists_url":"https:\/\/api.github.com\/users\/amirouche\/gists{\/gist_id}","html_url":"https:\/\/github.com\/amirouche","subscriptions_url":"https:\/\/api.github.com\/users\/amirouche\/subscriptions","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/7444897?v=4","repos_url":"https:\/\/api.github.com\/users\/amirouche\/repos","received_events_url":"https:\/\/api.github.com\/users\/amirouche\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/amirouche\/starred{\/owner}{\/repo}","site_admin":false,"login":"amirouche","type":"User","id":7444897,"followers_url":"https:\/\/api.github.com\/users\/amirouche\/followers"}},{"body":"I agree it's overkill for the task at hand.","commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","submitted_at":"2017-07-07T17:33:11Z","created_at":"2017-07-07T17:33:11Z","author_association":"NONE","html_url":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#pullrequestreview-48667948","pull_request_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9","state":"CHANGES_REQUESTED","_links":{"html":{"href":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#pullrequestreview-48667948"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9"}},"user":{"following_url":"https:\/\/api.github.com\/users\/amirouche\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/amirouche\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/amirouche\/orgs","url":"https:\/\/api.github.com\/users\/amirouche","gists_url":"https:\/\/api.github.com\/users\/amirouche\/gists{\/gist_id}","html_url":"https:\/\/github.com\/amirouche","subscriptions_url":"https:\/\/api.github.com\/users\/amirouche\/subscriptions","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/7444897?v=4","repos_url":"https:\/\/api.github.com\/users\/amirouche\/repos","received_events_url":"https:\/\/api.github.com\/users\/amirouche\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/amirouche\/starred{\/owner}{\/repo}","site_admin":false,"login":"amirouche","type":"User","id":7444897,"followers_url":"https:\/\/api.github.com\/users\/amirouche\/followers"},"id":48667948},{"original_position":21,"diff_hunk":"@@ -105,6 +106,21 @@ def logging_excepthook(exc_type, value, tb):\n         logging.captureWarnings(True)\n \n \n+def setup_colors(palette=formatter.Swatches.Default):","in_reply_to_id":126201276,"pull_request_review_id":48669702,"commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","created_at":"2017-07-07T17:35:09Z","author_association":"CONTRIBUTOR","body":"It's a refinement of adding a `palette` kwarg to `setup`. Especially since colors don't have to be configured every time or even at all.","updated_at":"2017-07-07T17:35:09Z","html_url":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r126202765","pull_request_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9","state":"COMMENT","_links":{"self":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/126202765"},"html":{"href":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r126202765"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9"}},"url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/126202765","position":21,"path":"daiquiri\/__init__.py","original_commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","id":126202765,"user":{"following_url":"https:\/\/api.github.com\/users\/blakev\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/blakev\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/blakev\/orgs","url":"https:\/\/api.github.com\/users\/blakev","gists_url":"https:\/\/api.github.com\/users\/blakev\/gists{\/gist_id}","html_url":"https:\/\/github.com\/blakev","subscriptions_url":"https:\/\/api.github.com\/users\/blakev\/subscriptions","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/4885156?v=4","repos_url":"https:\/\/api.github.com\/users\/blakev\/repos","received_events_url":"https:\/\/api.github.com\/users\/blakev\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/blakev\/starred{\/owner}{\/repo}","site_admin":false,"login":"blakev","type":"User","id":4885156,"followers_url":"https:\/\/api.github.com\/users\/blakev\/followers"}},{"body":"","commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","submitted_at":"2017-07-07T17:35:09Z","created_at":"2017-07-07T17:35:09Z","author_association":"CONTRIBUTOR","html_url":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#pullrequestreview-48669702","pull_request_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9","state":"COMMENTED","_links":{"html":{"href":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#pullrequestreview-48669702"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9"}},"user":{"following_url":"https:\/\/api.github.com\/users\/blakev\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/blakev\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/blakev\/orgs","url":"https:\/\/api.github.com\/users\/blakev","gists_url":"https:\/\/api.github.com\/users\/blakev\/gists{\/gist_id}","html_url":"https:\/\/github.com\/blakev","subscriptions_url":"https:\/\/api.github.com\/users\/blakev\/subscriptions","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/4885156?v=4","repos_url":"https:\/\/api.github.com\/users\/blakev\/repos","received_events_url":"https:\/\/api.github.com\/users\/blakev\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/blakev\/starred{\/owner}{\/repo}","site_admin":false,"login":"blakev","type":"User","id":4885156,"followers_url":"https:\/\/api.github.com\/users\/blakev\/followers"},"id":48669702},{"original_position":22,"diff_hunk":"@@ -23,21 +25,138 @@\n )\n \n \n-class ColorFormatter(logging.Formatter):\n-    # TODO(jd) Allow configuration\n-    LEVEL_COLORS = {\n-        logging.DEBUG: '\\033[00;32m',  # GREEN\n-        logging.INFO: '\\033[00;36m',  # CYAN\n-        logging.WARN: '\\033[01;33m',  # BOLD YELLOW\n-        logging.ERROR: '\\033[01;31m',  # BOLD RED\n-        logging.CRITICAL: '\\033[01;31m',  # BOLD RED\n-    }\n+class Palette(object):","in_reply_to_id":126202166,"pull_request_review_id":48669830,"commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","created_at":"2017-07-07T17:35:39Z","author_association":"CONTRIBUTOR","body":"I don't understand what you mean.\r\n","updated_at":"2017-07-07T17:35:39Z","html_url":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r126202879","pull_request_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9","state":"COMMENT","_links":{"self":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/126202879"},"html":{"href":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r126202879"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9"}},"url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/126202879","position":22,"path":"daiquiri\/formatter.py","original_commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","id":126202879,"user":{"following_url":"https:\/\/api.github.com\/users\/blakev\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/blakev\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/blakev\/orgs","url":"https:\/\/api.github.com\/users\/blakev","gists_url":"https:\/\/api.github.com\/users\/blakev\/gists{\/gist_id}","html_url":"https:\/\/github.com\/blakev","subscriptions_url":"https:\/\/api.github.com\/users\/blakev\/subscriptions","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/4885156?v=4","repos_url":"https:\/\/api.github.com\/users\/blakev\/repos","received_events_url":"https:\/\/api.github.com\/users\/blakev\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/blakev\/starred{\/owner}{\/repo}","site_admin":false,"login":"blakev","type":"User","id":4885156,"followers_url":"https:\/\/api.github.com\/users\/blakev\/followers"}},{"body":"","commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","submitted_at":"2017-07-07T17:35:39Z","created_at":"2017-07-07T17:35:39Z","author_association":"CONTRIBUTOR","html_url":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#pullrequestreview-48669830","pull_request_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9","state":"COMMENTED","_links":{"html":{"href":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#pullrequestreview-48669830"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9"}},"user":{"following_url":"https:\/\/api.github.com\/users\/blakev\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/blakev\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/blakev\/orgs","url":"https:\/\/api.github.com\/users\/blakev","gists_url":"https:\/\/api.github.com\/users\/blakev\/gists{\/gist_id}","html_url":"https:\/\/github.com\/blakev","subscriptions_url":"https:\/\/api.github.com\/users\/blakev\/subscriptions","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/4885156?v=4","repos_url":"https:\/\/api.github.com\/users\/blakev\/repos","received_events_url":"https:\/\/api.github.com\/users\/blakev\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/blakev\/starred{\/owner}{\/repo}","site_admin":false,"login":"blakev","type":"User","id":4885156,"followers_url":"https:\/\/api.github.com\/users\/blakev\/followers"},"id":48669830},{"original_position":21,"diff_hunk":"@@ -105,6 +106,21 @@ def logging_excepthook(exc_type, value, tb):\n         logging.captureWarnings(True)\n \n \n+def setup_colors(palette=formatter.Swatches.Default):","in_reply_to_id":126201276,"pull_request_review_id":48877180,"commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","created_at":"2017-07-10T11:45:20Z","author_association":"OWNER","body":"Yeah I don't really like it. I don't think we should ship that.","updated_at":"2017-07-10T11:56:01Z","html_url":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r126398236","pull_request_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9","state":"COMMENT","_links":{"self":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/126398236"},"html":{"href":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r126398236"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9"}},"url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/126398236","position":21,"path":"daiquiri\/__init__.py","original_commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","id":126398236,"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"}},{"original_position":13,"diff_hunk":"@@ -79,7 +80,7 @@ def setup(level=logging.WARNING, outputs=[output.STDERR], program_name=None,\n     :param level: Root log level.\n     :param outputs: Iterable of outputs to log to.\n     :param program_name: The name of the program. Auto-detected if not set.\n-    :param capture_warnings: Capture warnings from the `warnings' module\n+    :param capture_warnings: Capture warnings from the `warnings' module.","pull_request_review_id":48877180,"commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","created_at":"2017-07-10T11:46:00Z","author_association":"OWNER","body":"don't do that in the same PR. I'll just go fix it in the meantime :)","updated_at":"2017-07-10T11:56:01Z","html_url":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r126398366","pull_request_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9","state":"COMMENT","_links":{"self":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/126398366"},"html":{"href":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r126398366"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9"}},"url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/126398366","position":13,"path":"daiquiri\/__init__.py","original_commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","id":126398366,"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"}},{"original_position":4,"diff_hunk":"@@ -11,6 +11,8 @@\n #    under the License.\n import logging\n \n+import six","pull_request_review_id":48877180,"commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","created_at":"2017-07-10T11:47:06Z","author_association":"OWNER","body":"This is not in requirements. It should be moved if it's used there.","updated_at":"2017-07-10T11:56:01Z","html_url":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r126398554","pull_request_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9","state":"COMMENT","_links":{"self":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/126398554"},"html":{"href":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r126398554"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9"}},"url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/126398554","position":4,"path":"daiquiri\/formatter.py","original_commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","id":126398554,"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"}},{"original_position":116,"diff_hunk":"@@ -23,21 +25,138 @@\n )\n \n \n-class ColorFormatter(logging.Formatter):\n-    # TODO(jd) Allow configuration\n-    LEVEL_COLORS = {\n-        logging.DEBUG: '\\033[00;32m',  # GREEN\n-        logging.INFO: '\\033[00;36m',  # CYAN\n-        logging.WARN: '\\033[01;33m',  # BOLD YELLOW\n-        logging.ERROR: '\\033[01;31m',  # BOLD RED\n-        logging.CRITICAL: '\\033[01;31m',  # BOLD RED\n-    }\n+class Palette(object):\n+    \"\"\"Object that represents TTY colors.\"\"\"\n+\n+    PREFIX = '\\033['        # TTY prefix for a color code\n+    BASE_WHITE = 15         # default colors index 15 is white\n+    BASE_MOD = '00;%dm'     # default colors format is `00;00m`\n+    CHART_WHITE = 231       # 256-table colors index 231 is white\n+    CHART_MOD = '38;5;%dm'  # 256-table foreground `38;5;00m`\n+\n+    LOG_LEVELS = (\n+        logging.DEBUG,\n+        logging.INFO,\n+        logging.WARN,\n+        logging.ERROR,\n+        logging.CRITICAL,\n+    )\n+\n+    def __init__(self, debug, info, warn, error, critical,\n+                 base=False, name=None):\n+        \"\"\"Create a new color palette from console values.\n+\n+        Each argument (in `args`) corresponds to a logging level's color.\n+\n+        :param debug: color for debug level\n+        :param info: color for info level\n+        :param warn: color for warning level\n+        :param error: color for error level\n+        :param critical: color for critical level\n+        :param base: (bool) use TTY defined colors instead of 256-color palette\n+        \"\"\"\n+        self.name = name\n+        self.base = base\n+        self.colors = (debug, info, warn, error, critical)\n+        self._level_colors = None\n+\n+    def __str__(self):\n+        colors = (c[1] if not isinstance(c, int) else c for c in self.colors)\n+        return '<Palette %s(%s)>' % (self.name if self.name else '',\n+                                     ', '.join(map(str, colors)))\n+\n+    @property\n+    def level_colors(self):\n+        \"\"\"Mapping of log levels to color prefixes.\n+\n+        :rtype: dict\n+        \"\"\"\n+        # deferred processing, read only\n+        if self._level_colors is None:\n+            self._level_colors = self._process_colors()\n+        return self._level_colors\n+\n+    def _process_colors(self):\n+        \"\"\"Process mapping of log levels.\n+\n+        :rtype: dict\n+        \"\"\"\n+        ret = {}\n+        # apply text formatting\n+        for level, color in zip(self.LOG_LEVELS, self.colors):\n+            if isinstance(color, tuple):\n+                # text-decoration modifier\n+                fmt, c_num = color\n+            elif isinstance(color, int):\n+                # no formatting\n+                fmt, c_num = '0;%s', color\n+            else:\n+                raise ValueError(color)\n+\n+            if self.base:\n+                c = self.BASE_MOD % c_num\n+            else:\n+                c = self.CHART_MOD % c_num\n+            ret[level] = '%s%s' % (self.PREFIX, fmt % c)\n+        return ret\n+\n+    @staticmethod\n+    def bold(n):\n+        \"\"\"Bold color in Palette.\n \n+        :param n: (int)\n+        :rtype: tuple\n+        \"\"\"\n+        return '1;%s', n\n+\n+    @staticmethod\n+    def underline(n):\n+        \"\"\"Underline color in Palette.\n+\n+        :param n: (int)\n+        :rtype: tuple\n+        \"\"\"\n+        return '4;%s', n\n+\n+\n+class SwatchMeta(type):","pull_request_review_id":48877180,"commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","created_at":"2017-07-10T11:51:41Z","author_association":"OWNER","body":"just ditch that. we don't care that the palette has a name","updated_at":"2017-07-10T11:56:01Z","html_url":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r126399380","pull_request_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9","state":"COMMENT","_links":{"self":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/126399380"},"html":{"href":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r126399380"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9"}},"url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/126399380","position":116,"path":"daiquiri\/formatter.py","original_commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","id":126399380,"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"}},{"original_position":52,"diff_hunk":"@@ -23,21 +25,138 @@\n )\n \n \n-class ColorFormatter(logging.Formatter):\n-    # TODO(jd) Allow configuration\n-    LEVEL_COLORS = {\n-        logging.DEBUG: '\\033[00;32m',  # GREEN\n-        logging.INFO: '\\033[00;36m',  # CYAN\n-        logging.WARN: '\\033[01;33m',  # BOLD YELLOW\n-        logging.ERROR: '\\033[01;31m',  # BOLD RED\n-        logging.CRITICAL: '\\033[01;31m',  # BOLD RED\n-    }\n+class Palette(object):\n+    \"\"\"Object that represents TTY colors.\"\"\"\n+\n+    PREFIX = '\\033['        # TTY prefix for a color code\n+    BASE_WHITE = 15         # default colors index 15 is white\n+    BASE_MOD = '00;%dm'     # default colors format is `00;00m`\n+    CHART_WHITE = 231       # 256-table colors index 231 is white\n+    CHART_MOD = '38;5;%dm'  # 256-table foreground `38;5;00m`\n+\n+    LOG_LEVELS = (\n+        logging.DEBUG,\n+        logging.INFO,\n+        logging.WARN,\n+        logging.ERROR,\n+        logging.CRITICAL,\n+    )\n+\n+    def __init__(self, debug, info, warn, error, critical,\n+                 base=False, name=None):\n+        \"\"\"Create a new color palette from console values.\n+\n+        Each argument (in `args`) corresponds to a logging level's color.\n+\n+        :param debug: color for debug level\n+        :param info: color for info level\n+        :param warn: color for warning level\n+        :param error: color for error level\n+        :param critical: color for critical level\n+        :param base: (bool) use TTY defined colors instead of 256-color palette\n+        \"\"\"\n+        self.name = name","pull_request_review_id":48877180,"commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","created_at":"2017-07-10T11:51:55Z","author_association":"OWNER","body":"remove the name and the metaclass, we don't care","updated_at":"2017-07-10T11:56:01Z","html_url":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r126399428","pull_request_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9","state":"COMMENT","_links":{"self":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/126399428"},"html":{"href":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r126399428"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9"}},"url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/126399428","position":52,"path":"daiquiri\/formatter.py","original_commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","id":126399428,"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"}},{"original_position":73,"diff_hunk":"@@ -23,21 +25,138 @@\n )\n \n \n-class ColorFormatter(logging.Formatter):\n-    # TODO(jd) Allow configuration\n-    LEVEL_COLORS = {\n-        logging.DEBUG: '\\033[00;32m',  # GREEN\n-        logging.INFO: '\\033[00;36m',  # CYAN\n-        logging.WARN: '\\033[01;33m',  # BOLD YELLOW\n-        logging.ERROR: '\\033[01;31m',  # BOLD RED\n-        logging.CRITICAL: '\\033[01;31m',  # BOLD RED\n-    }\n+class Palette(object):\n+    \"\"\"Object that represents TTY colors.\"\"\"\n+\n+    PREFIX = '\\033['        # TTY prefix for a color code\n+    BASE_WHITE = 15         # default colors index 15 is white\n+    BASE_MOD = '00;%dm'     # default colors format is `00;00m`\n+    CHART_WHITE = 231       # 256-table colors index 231 is white\n+    CHART_MOD = '38;5;%dm'  # 256-table foreground `38;5;00m`\n+\n+    LOG_LEVELS = (\n+        logging.DEBUG,\n+        logging.INFO,\n+        logging.WARN,\n+        logging.ERROR,\n+        logging.CRITICAL,\n+    )\n+\n+    def __init__(self, debug, info, warn, error, critical,\n+                 base=False, name=None):\n+        \"\"\"Create a new color palette from console values.\n+\n+        Each argument (in `args`) corresponds to a logging level's color.\n+\n+        :param debug: color for debug level\n+        :param info: color for info level\n+        :param warn: color for warning level\n+        :param error: color for error level\n+        :param critical: color for critical level\n+        :param base: (bool) use TTY defined colors instead of 256-color palette\n+        \"\"\"\n+        self.name = name\n+        self.base = base\n+        self.colors = (debug, info, warn, error, critical)\n+        self._level_colors = None\n+\n+    def __str__(self):\n+        colors = (c[1] if not isinstance(c, int) else c for c in self.colors)\n+        return '<Palette %s(%s)>' % (self.name if self.name else '',\n+                                     ', '.join(map(str, colors)))\n+\n+    @property\n+    def level_colors(self):\n+        \"\"\"Mapping of log levels to color prefixes.\n+\n+        :rtype: dict\n+        \"\"\"\n+        # deferred processing, read only\n+        if self._level_colors is None:\n+            self._level_colors = self._process_colors()\n+        return self._level_colors\n+\n+    def _process_colors(self):","pull_request_review_id":48877180,"commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","created_at":"2017-07-10T11:52:42Z","author_association":"OWNER","body":"just go ahead and do that in `__init__` once and for all.","updated_at":"2017-07-10T11:56:01Z","html_url":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r126399542","pull_request_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9","state":"COMMENT","_links":{"self":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/126399542"},"html":{"href":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r126399542"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9"}},"url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/126399542","position":73,"path":"daiquiri\/formatter.py","original_commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","id":126399542,"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"}},{"original_position":113,"diff_hunk":"@@ -23,21 +25,138 @@\n )\n \n \n-class ColorFormatter(logging.Formatter):\n-    # TODO(jd) Allow configuration\n-    LEVEL_COLORS = {\n-        logging.DEBUG: '\\033[00;32m',  # GREEN\n-        logging.INFO: '\\033[00;36m',  # CYAN\n-        logging.WARN: '\\033[01;33m',  # BOLD YELLOW\n-        logging.ERROR: '\\033[01;31m',  # BOLD RED\n-        logging.CRITICAL: '\\033[01;31m',  # BOLD RED\n-    }\n+class Palette(object):\n+    \"\"\"Object that represents TTY colors.\"\"\"\n+\n+    PREFIX = '\\033['        # TTY prefix for a color code\n+    BASE_WHITE = 15         # default colors index 15 is white\n+    BASE_MOD = '00;%dm'     # default colors format is `00;00m`\n+    CHART_WHITE = 231       # 256-table colors index 231 is white\n+    CHART_MOD = '38;5;%dm'  # 256-table foreground `38;5;00m`\n+\n+    LOG_LEVELS = (\n+        logging.DEBUG,\n+        logging.INFO,\n+        logging.WARN,\n+        logging.ERROR,\n+        logging.CRITICAL,\n+    )\n+\n+    def __init__(self, debug, info, warn, error, critical,\n+                 base=False, name=None):\n+        \"\"\"Create a new color palette from console values.\n+\n+        Each argument (in `args`) corresponds to a logging level's color.\n+\n+        :param debug: color for debug level\n+        :param info: color for info level\n+        :param warn: color for warning level\n+        :param error: color for error level\n+        :param critical: color for critical level\n+        :param base: (bool) use TTY defined colors instead of 256-color palette\n+        \"\"\"\n+        self.name = name\n+        self.base = base\n+        self.colors = (debug, info, warn, error, critical)\n+        self._level_colors = None\n+\n+    def __str__(self):\n+        colors = (c[1] if not isinstance(c, int) else c for c in self.colors)\n+        return '<Palette %s(%s)>' % (self.name if self.name else '',\n+                                     ', '.join(map(str, colors)))\n+\n+    @property\n+    def level_colors(self):\n+        \"\"\"Mapping of log levels to color prefixes.\n+\n+        :rtype: dict\n+        \"\"\"\n+        # deferred processing, read only\n+        if self._level_colors is None:\n+            self._level_colors = self._process_colors()\n+        return self._level_colors\n+\n+    def _process_colors(self):\n+        \"\"\"Process mapping of log levels.\n+\n+        :rtype: dict\n+        \"\"\"\n+        ret = {}\n+        # apply text formatting\n+        for level, color in zip(self.LOG_LEVELS, self.colors):\n+            if isinstance(color, tuple):\n+                # text-decoration modifier\n+                fmt, c_num = color\n+            elif isinstance(color, int):\n+                # no formatting\n+                fmt, c_num = '0;%s', color\n+            else:\n+                raise ValueError(color)\n+\n+            if self.base:\n+                c = self.BASE_MOD % c_num\n+            else:\n+                c = self.CHART_MOD % c_num\n+            ret[level] = '%s%s' % (self.PREFIX, fmt % c)\n+        return ret\n+\n+    @staticmethod\n+    def bold(n):\n+        \"\"\"Bold color in Palette.\n \n+        :param n: (int)\n+        :rtype: tuple\n+        \"\"\"\n+        return '1;%s', n\n+\n+    @staticmethod\n+    def underline(n):\n+        \"\"\"Underline color in Palette.\n+\n+        :param n: (int)\n+        :rtype: tuple\n+        \"\"\"\n+        return '4;%s', n","pull_request_review_id":48877180,"commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","created_at":"2017-07-10T11:53:28Z","author_association":"OWNER","body":"`%d` rather than `%s`?","updated_at":"2017-07-10T11:56:01Z","html_url":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r126399649","pull_request_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9","state":"COMMENT","_links":{"self":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/126399649"},"html":{"href":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r126399649"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9"}},"url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/126399649","position":113,"path":"daiquiri\/formatter.py","original_commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","id":126399649,"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"}},{"original_position":104,"diff_hunk":"@@ -23,21 +25,138 @@\n )\n \n \n-class ColorFormatter(logging.Formatter):\n-    # TODO(jd) Allow configuration\n-    LEVEL_COLORS = {\n-        logging.DEBUG: '\\033[00;32m',  # GREEN\n-        logging.INFO: '\\033[00;36m',  # CYAN\n-        logging.WARN: '\\033[01;33m',  # BOLD YELLOW\n-        logging.ERROR: '\\033[01;31m',  # BOLD RED\n-        logging.CRITICAL: '\\033[01;31m',  # BOLD RED\n-    }\n+class Palette(object):\n+    \"\"\"Object that represents TTY colors.\"\"\"\n+\n+    PREFIX = '\\033['        # TTY prefix for a color code\n+    BASE_WHITE = 15         # default colors index 15 is white\n+    BASE_MOD = '00;%dm'     # default colors format is `00;00m`\n+    CHART_WHITE = 231       # 256-table colors index 231 is white\n+    CHART_MOD = '38;5;%dm'  # 256-table foreground `38;5;00m`\n+\n+    LOG_LEVELS = (\n+        logging.DEBUG,\n+        logging.INFO,\n+        logging.WARN,\n+        logging.ERROR,\n+        logging.CRITICAL,\n+    )\n+\n+    def __init__(self, debug, info, warn, error, critical,\n+                 base=False, name=None):\n+        \"\"\"Create a new color palette from console values.\n+\n+        Each argument (in `args`) corresponds to a logging level's color.\n+\n+        :param debug: color for debug level\n+        :param info: color for info level\n+        :param warn: color for warning level\n+        :param error: color for error level\n+        :param critical: color for critical level\n+        :param base: (bool) use TTY defined colors instead of 256-color palette\n+        \"\"\"\n+        self.name = name\n+        self.base = base\n+        self.colors = (debug, info, warn, error, critical)\n+        self._level_colors = None\n+\n+    def __str__(self):\n+        colors = (c[1] if not isinstance(c, int) else c for c in self.colors)\n+        return '<Palette %s(%s)>' % (self.name if self.name else '',\n+                                     ', '.join(map(str, colors)))\n+\n+    @property\n+    def level_colors(self):\n+        \"\"\"Mapping of log levels to color prefixes.\n+\n+        :rtype: dict\n+        \"\"\"\n+        # deferred processing, read only\n+        if self._level_colors is None:\n+            self._level_colors = self._process_colors()\n+        return self._level_colors\n+\n+    def _process_colors(self):\n+        \"\"\"Process mapping of log levels.\n+\n+        :rtype: dict\n+        \"\"\"\n+        ret = {}\n+        # apply text formatting\n+        for level, color in zip(self.LOG_LEVELS, self.colors):\n+            if isinstance(color, tuple):\n+                # text-decoration modifier\n+                fmt, c_num = color\n+            elif isinstance(color, int):\n+                # no formatting\n+                fmt, c_num = '0;%s', color\n+            else:\n+                raise ValueError(color)\n+\n+            if self.base:\n+                c = self.BASE_MOD % c_num\n+            else:\n+                c = self.CHART_MOD % c_num\n+            ret[level] = '%s%s' % (self.PREFIX, fmt % c)\n+        return ret\n+\n+    @staticmethod\n+    def bold(n):\n+        \"\"\"Bold color in Palette.\n \n+        :param n: (int)\n+        :rtype: tuple\n+        \"\"\"\n+        return '1;%s', n","pull_request_review_id":48877180,"commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","created_at":"2017-07-10T11:53:31Z","author_association":"OWNER","body":"`%d` rather than `%s`?","updated_at":"2017-07-10T11:56:02Z","html_url":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r126399655","pull_request_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9","state":"COMMENT","_links":{"self":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/126399655"},"html":{"href":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r126399655"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9"}},"url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/126399655","position":104,"path":"daiquiri\/formatter.py","original_commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","id":126399655,"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"}},{"original_position":129,"diff_hunk":"@@ -23,21 +25,138 @@\n )\n \n \n-class ColorFormatter(logging.Formatter):\n-    # TODO(jd) Allow configuration\n-    LEVEL_COLORS = {\n-        logging.DEBUG: '\\033[00;32m',  # GREEN\n-        logging.INFO: '\\033[00;36m',  # CYAN\n-        logging.WARN: '\\033[01;33m',  # BOLD YELLOW\n-        logging.ERROR: '\\033[01;31m',  # BOLD RED\n-        logging.CRITICAL: '\\033[01;31m',  # BOLD RED\n-    }\n+class Palette(object):\n+    \"\"\"Object that represents TTY colors.\"\"\"\n+\n+    PREFIX = '\\033['        # TTY prefix for a color code\n+    BASE_WHITE = 15         # default colors index 15 is white\n+    BASE_MOD = '00;%dm'     # default colors format is `00;00m`\n+    CHART_WHITE = 231       # 256-table colors index 231 is white\n+    CHART_MOD = '38;5;%dm'  # 256-table foreground `38;5;00m`\n+\n+    LOG_LEVELS = (\n+        logging.DEBUG,\n+        logging.INFO,\n+        logging.WARN,\n+        logging.ERROR,\n+        logging.CRITICAL,\n+    )\n+\n+    def __init__(self, debug, info, warn, error, critical,\n+                 base=False, name=None):\n+        \"\"\"Create a new color palette from console values.\n+\n+        Each argument (in `args`) corresponds to a logging level's color.\n+\n+        :param debug: color for debug level\n+        :param info: color for info level\n+        :param warn: color for warning level\n+        :param error: color for error level\n+        :param critical: color for critical level\n+        :param base: (bool) use TTY defined colors instead of 256-color palette\n+        \"\"\"\n+        self.name = name\n+        self.base = base\n+        self.colors = (debug, info, warn, error, critical)\n+        self._level_colors = None\n+\n+    def __str__(self):\n+        colors = (c[1] if not isinstance(c, int) else c for c in self.colors)\n+        return '<Palette %s(%s)>' % (self.name if self.name else '',\n+                                     ', '.join(map(str, colors)))\n+\n+    @property\n+    def level_colors(self):\n+        \"\"\"Mapping of log levels to color prefixes.\n+\n+        :rtype: dict\n+        \"\"\"\n+        # deferred processing, read only\n+        if self._level_colors is None:\n+            self._level_colors = self._process_colors()\n+        return self._level_colors\n+\n+    def _process_colors(self):\n+        \"\"\"Process mapping of log levels.\n+\n+        :rtype: dict\n+        \"\"\"\n+        ret = {}\n+        # apply text formatting\n+        for level, color in zip(self.LOG_LEVELS, self.colors):\n+            if isinstance(color, tuple):\n+                # text-decoration modifier\n+                fmt, c_num = color\n+            elif isinstance(color, int):\n+                # no formatting\n+                fmt, c_num = '0;%s', color\n+            else:\n+                raise ValueError(color)\n+\n+            if self.base:\n+                c = self.BASE_MOD % c_num\n+            else:\n+                c = self.CHART_MOD % c_num\n+            ret[level] = '%s%s' % (self.PREFIX, fmt % c)\n+        return ret\n+\n+    @staticmethod\n+    def bold(n):\n+        \"\"\"Bold color in Palette.\n \n+        :param n: (int)\n+        :rtype: tuple\n+        \"\"\"\n+        return '1;%s', n\n+\n+    @staticmethod\n+    def underline(n):\n+        \"\"\"Underline color in Palette.\n+\n+        :param n: (int)\n+        :rtype: tuple\n+        \"\"\"\n+        return '4;%s', n\n+\n+\n+class SwatchMeta(type):\n+    \"\"\"Swatches type.\n+\n+    Used for attaching the palette name, defined in the Swatches\n+    object, to the Palette instance.\n+    \"\"\"\n+    def __new__(cls, name, bases, dct):\n+        for k, v in dct.items():\n+            if isinstance(v, Palette):\n+                v.name = k\n+        return super(SwatchMeta, cls).__new__(cls, name, bases, dct)\n+\n+\n+class Swatches(six.with_metaclass(SwatchMeta, object)):","pull_request_review_id":48877180,"commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","created_at":"2017-07-10T11:55:16Z","author_association":"OWNER","body":"I don't understand why `Swatch` as a name. Really.\r\n\r\nI'd just go ahead with a module level definition\r\n\r\n```python\r\nPALETTE_DEFAULT = Palette(32, 36, Palette.bold(33), Palette.bold(31), Palette.bold(31), base=True)\r\n# colors from the 256-color table\r\nPALETTE_BLUE= Palette(39, 32, 25, 24, Palette.bold(23))\r\n[...]\r\n```\r\nand that's good enough and simple.","updated_at":"2017-07-10T11:56:02Z","html_url":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r126399980","pull_request_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9","state":"COMMENT","_links":{"self":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/126399980"},"html":{"href":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#discussion_r126399980"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9"}},"url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/comments\/126399980","position":129,"path":"daiquiri\/formatter.py","original_commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","id":126399980,"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"}},{"body":"Need a little bit of simplification and squashing of all commits, but good idea.","commit_id":"7b594a61039cca30b160601fc63ed4016b798a44","submitted_at":"2017-07-10T11:56:01Z","created_at":"2017-07-10T11:56:01Z","author_association":"OWNER","html_url":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#pullrequestreview-48877180","pull_request_url":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9","state":"CHANGES_REQUESTED","_links":{"html":{"href":"https:\/\/github.com\/jd\/daiquiri\/pull\/9#pullrequestreview-48877180"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/jd\/daiquiri\/pulls\/9"}},"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"id":48877180}],"pastamaker_approvals":[[],[{"public_repos":69,"site_admin":false,"subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","gravatar_id":"","hireable":null,"id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers","following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","blog":"https:\/\/julien.danjou.info\/","followers":301,"location":"Paris, France","type":"User","email":"julien@danjou.info","bio":"Free Software Hacker, runner, foodie and FPS player.","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","company":null,"events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","updated_at":"2018-02-01T21:33:04Z","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","public_gists":19,"name":"Julien Danjou","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","created_at":"2008-03-09T19:52:38Z","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","following":23,"login":"jd"}],1,[0]],"patch_url":"https:\/\/github.com\/jd\/daiquiri\/pull\/9.patch","changed_files":2,"user":{"following_url":"https:\/\/api.github.com\/users\/blakev\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/blakev\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/blakev\/orgs","url":"https:\/\/api.github.com\/users\/blakev","gists_url":"https:\/\/api.github.com\/users\/blakev\/gists{\/gist_id}","html_url":"https:\/\/github.com\/blakev","subscriptions_url":"https:\/\/api.github.com\/users\/blakev\/subscriptions","avatar_url":"https:\/\/avatars2.githubusercontent.com\/u\/4885156?v=4","repos_url":"https:\/\/api.github.com\/users\/blakev\/repos","received_events_url":"https:\/\/api.github.com\/users\/blakev\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/blakev\/starred{\/owner}{\/repo}","site_admin":false,"login":"blakev","type":"User","id":4885156,"followers_url":"https:\/\/api.github.com\/users\/blakev\/followers"}}]},{"owner":"jd","repo":"tenacity","updated_at":"2018-03-28T20:28:44Z","branch":"master","pulls":[{"deletions":0,"pastamaker_combined_status":"success","commits_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/pulls\/114\/commits","merge_commit_sha":"8b7ba577fcba418dffe5877461b9112c1798a027","labels":[],"number":114,"pastamaker_travis_state":"success","assignee":null,"pastamaker_weight":-1,"mergeable":true,"closed_at":null,"additions":6,"statuses_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/statuses\/4c5fe4b3cbdcdddefcba24529aea1f6a23034ecb","id":178154603,"requested_reviewers":[],"maintainer_can_modify":true,"title":"Document how to use Trio\/curio.","comments":0,"merged_at":null,"state":"open","_links":{"review_comment":{"href":"https:\/\/api.github.com\/repos\/jd\/tenacity\/pulls\/comments{\/number}"},"commits":{"href":"https:\/\/api.github.com\/repos\/jd\/tenacity\/pulls\/114\/commits"},"self":{"href":"https:\/\/api.github.com\/repos\/jd\/tenacity\/pulls\/114"},"comments":{"href":"https:\/\/api.github.com\/repos\/jd\/tenacity\/issues\/114\/comments"},"html":{"href":"https:\/\/github.com\/jd\/tenacity\/pull\/114"},"review_comments":{"href":"https:\/\/api.github.com\/repos\/jd\/tenacity\/pulls\/114\/comments"},"issue":{"href":"https:\/\/api.github.com\/repos\/jd\/tenacity\/issues\/114"},"statuses":{"href":"https:\/\/api.github.com\/repos\/jd\/tenacity\/statuses\/4c5fe4b3cbdcdddefcba24529aea1f6a23034ecb"}},"pastamaker_reviews":[],"pastamaker_commits":[{"files":[{"status":"modified","deletions":0,"raw_url":"https:\/\/github.com\/jd\/tenacity\/raw\/4c5fe4b3cbdcdddefcba24529aea1f6a23034ecb\/doc\/source\/index.rst","blob_url":"https:\/\/github.com\/jd\/tenacity\/blob\/4c5fe4b3cbdcdddefcba24529aea1f6a23034ecb\/doc\/source\/index.rst","contents_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/contents\/doc\/source\/index.rst?ref=4c5fe4b3cbdcdddefcba24529aea1f6a23034ecb","filename":"doc\/source\/index.rst","sha":"a86de2f7e94c3ae7e53dd30a1cc35d8c64c1b97c","additions":6,"patch":"@@ -311,6 +311,12 @@ Sleeps are done asynchronously too.\n     @tornado.gen.coroutine\n     def my_async_function(http_client, url):\n         yield http_client.fetch(url)\n+        \n+You can even use alternative event loops such as `curio` or `Trio` by passing the correct sleep function:\n+\n+    @retry(sleep=trio.sleep)\n+    async def my_async_function(loop):\n+        await asks.get('https:\/\/example.org')\n \n Contribute\n ----------","changes":6}],"committer":{"following_url":"https:\/\/api.github.com\/users\/web-flow\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/web-flow\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/web-flow\/orgs","url":"https:\/\/api.github.com\/users\/web-flow","gists_url":"https:\/\/api.github.com\/users\/web-flow\/gists{\/gist_id}","html_url":"https:\/\/github.com\/web-flow","subscriptions_url":"https:\/\/api.github.com\/users\/web-flow\/subscriptions","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/19864447?v=4","repos_url":"https:\/\/api.github.com\/users\/web-flow\/repos","received_events_url":"https:\/\/api.github.com\/users\/web-flow\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/web-flow\/starred{\/owner}{\/repo}","site_admin":false,"login":"web-flow","type":"User","id":19864447,"followers_url":"https:\/\/api.github.com\/users\/web-flow\/followers"},"stats":{"deletions":0,"additions":6,"total":6},"author":{"following_url":"https:\/\/api.github.com\/users\/miracle2k\/following{\/other_user}","events_url":"https:\/\/api.github.com\/users\/miracle2k\/events{\/privacy}","organizations_url":"https:\/\/api.github.com\/users\/miracle2k\/orgs","url":"https:\/\/api.github.com\/users\/miracle2k","gists_url":"https:\/\/api.github.com\/users\/miracle2k\/gists{\/gist_id}","html_url":"https:\/\/github.com\/miracle2k","subscriptions_url":"https:\/\/api.github.com\/users\/miracle2k\/subscriptions","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/13807?v=4","repos_url":"https:\/\/api.github.com\/users\/miracle2k\/repos","received_events_url":"https:\/\/api.github.com\/users\/miracle2k\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/miracle2k\/starred{\/owner}{\/repo}","site_admin":false,"login":"miracle2k","type":"User","id":13807,"followers_url":"https:\/\/api.github.com\/users\/miracle2k\/followers"},"url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/commits\/4c5fe4b3cbdcdddefcba24529aea1f6a23034ecb","comments_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/commits\/4c5fe4b3cbdcdddefcba24529aea1f6a23034ecb\/comments","html_url":"https:\/\/github.com\/jd\/tenacity\/commit\/4c5fe4b3cbdcdddefcba24529aea1f6a23034ecb","sha":"4c5fe4b3cbdcdddefcba24529aea1f6a23034ecb","parents":[{"url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/commits\/4bcdd9bcc79fbca38f8836c10a89765f83085239","sha":"4bcdd9bcc79fbca38f8836c10a89765f83085239","html_url":"https:\/\/github.com\/jd\/tenacity\/commit\/4bcdd9bcc79fbca38f8836c10a89765f83085239"}],"commit":{"committer":{"date":"2018-03-28T20:28:31Z","name":"GitHub","email":"noreply@github.com"},"author":{"date":"2018-03-28T20:28:31Z","name":"Michael Elsd\u00f6rfer","email":"michael@elsdoerfer.info"},"url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/git\/commits\/4c5fe4b3cbdcdddefcba24529aea1f6a23034ecb","tree":{"url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/git\/trees\/67862a002e3cf48db9324b829789035e64845ec1","sha":"67862a002e3cf48db9324b829789035e64845ec1"},"comment_count":0,"verification":{"reason":"valid","verified":true,"payload":"tree 67862a002e3cf48db9324b829789035e64845ec1\nparent 4bcdd9bcc79fbca38f8836c10a89765f83085239\nauthor Michael Elsd\u00f6rfer <michael@elsdoerfer.info> 1522268911 +0100\ncommitter GitHub <noreply@github.com> 1522268911 +0100\n\nDocument how to use Trio\/curio.","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJau\/rvCRBK7hj4Ov3rIwAAdHIIAJ3FPL3Ju95we7V6k\/A4Z7F7\n5JmJegfPHDT2O\/3U2FUTQt5WSCUUzCUdN4UrBFFcue9eV+CIgc0ukd7leezV0mjY\nsM7GWfVVA1JhCcXMteLS\/YPEwJIJ0CRrYpmtl48axwayglGFO3qi4hgDsgNIgGM7\nO1SKq+LX+uz8snkc9W+uwGt+T6N6H1EZdUqdCrd+5lCK\/9gbGp4JLAWxM89Tqtdh\nkg5n62dH\/QzpowTFRAU9Zr0A8vXAkpqr61yHno7HV28kxInjYZsbhUPLR94ArMr9\nkOzi\/L8kJEQn3R\/anViXAtlQfBsjKv57LIHIeeU1LPe0tA+ACAm\/JIb8xHFuTEY=\n=OqYe\n-----END PGP SIGNATURE-----\n"},"message":"Document how to use Trio\/curio."}}],"diff_url":"https:\/\/github.com\/jd\/tenacity\/pull\/114.diff","pastamaker_ci_statuses":{},"issue_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/issues\/114","body":"","head":{"repo":{"issues_url":"https:\/\/api.github.com\/repos\/miracle2k\/tenacity\/issues{\/number}","deployments_url":"https:\/\/api.github.com\/repos\/miracle2k\/tenacity\/deployments","has_wiki":true,"forks_url":"https:\/\/api.github.com\/repos\/miracle2k\/tenacity\/forks","mirror_url":null,"issue_events_url":"https:\/\/api.github.com\/repos\/miracle2k\/tenacity\/issues\/events{\/number}","subscription_url":"https:\/\/api.github.com\/repos\/miracle2k\/tenacity\/subscription","merges_url":"https:\/\/api.github.com\/repos\/miracle2k\/tenacity\/merges","collaborators_url":"https:\/\/api.github.com\/repos\/miracle2k\/tenacity\/collaborators{\/collaborator}","updated_at":"2018-03-28T20:26:33Z","private":false,"pulls_url":"https:\/\/api.github.com\/repos\/miracle2k\/tenacity\/pulls{\/number}","issue_comment_url":"https:\/\/api.github.com\/repos\/miracle2k\/tenacity\/issues\/comments{\/number}","trees_url":"https:\/\/api.github.com\/repos\/miracle2k\/tenacity\/git\/trees{\/sha}","full_name":"miracle2k\/tenacity","owner":{"following_url":"https:\/\/api.github.com\/users\/miracle2k\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/miracle2k\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/miracle2k\/orgs","url":"https:\/\/api.github.com\/users\/miracle2k","events_url":"https:\/\/api.github.com\/users\/miracle2k\/events{\/privacy}","html_url":"https:\/\/github.com\/miracle2k","subscriptions_url":"https:\/\/api.github.com\/users\/miracle2k\/subscriptions","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/13807?v=4","repos_url":"https:\/\/api.github.com\/users\/miracle2k\/repos","received_events_url":"https:\/\/api.github.com\/users\/miracle2k\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/miracle2k\/starred{\/owner}{\/repo}","site_admin":false,"login":"miracle2k","type":"User","id":13807,"followers_url":"https:\/\/api.github.com\/users\/miracle2k\/followers"},"statuses_url":"https:\/\/api.github.com\/repos\/miracle2k\/tenacity\/statuses\/{sha}","id":127194455,"keys_url":"https:\/\/api.github.com\/repos\/miracle2k\/tenacity\/keys{\/key_id}","size":235,"tags_url":"https:\/\/api.github.com\/repos\/miracle2k\/tenacity\/tags","archived":false,"contributors_url":"https:\/\/api.github.com\/repos\/miracle2k\/tenacity\/contributors","downloads_url":"https:\/\/api.github.com\/repos\/miracle2k\/tenacity\/downloads","has_downloads":true,"assignees_url":"https:\/\/api.github.com\/repos\/miracle2k\/tenacity\/assignees{\/user}","contents_url":"https:\/\/api.github.com\/repos\/miracle2k\/tenacity\/contents\/{+path}","has_pages":false,"git_refs_url":"https:\/\/api.github.com\/repos\/miracle2k\/tenacity\/git\/refs{\/sha}","has_projects":true,"clone_url":"https:\/\/github.com\/miracle2k\/tenacity.git","watchers_count":0,"git_tags_url":"https:\/\/api.github.com\/repos\/miracle2k\/tenacity\/git\/tags{\/sha}","milestones_url":"https:\/\/api.github.com\/repos\/miracle2k\/tenacity\/milestones{\/number}","stargazers_count":0,"homepage":"http:\/\/tenacity.readthedocs.io","branches_url":"https:\/\/api.github.com\/repos\/miracle2k\/tenacity\/branches{\/branch}","fork":true,"commits_url":"https:\/\/api.github.com\/repos\/miracle2k\/tenacity\/commits{\/sha}","releases_url":"https:\/\/api.github.com\/repos\/miracle2k\/tenacity\/releases{\/id}","description":"Retrying library for Python","archive_url":"https:\/\/api.github.com\/repos\/miracle2k\/tenacity\/{archive_format}{\/ref}","labels_url":"https:\/\/api.github.com\/repos\/miracle2k\/tenacity\/labels{\/name}","events_url":"https:\/\/api.github.com\/repos\/miracle2k\/tenacity\/events","comments_url":"https:\/\/api.github.com\/repos\/miracle2k\/tenacity\/comments{\/number}","html_url":"https:\/\/github.com\/miracle2k\/tenacity","forks":0,"compare_url":"https:\/\/api.github.com\/repos\/miracle2k\/tenacity\/compare\/{base}...{head}","language":"Python","git_url":"git:\/\/github.com\/miracle2k\/tenacity.git","svn_url":"https:\/\/github.com\/miracle2k\/tenacity","notifications_url":"https:\/\/api.github.com\/repos\/miracle2k\/tenacity\/notifications{?since,all,participating}","has_issues":false,"ssh_url":"git@github.com:miracle2k\/tenacity.git","blobs_url":"https:\/\/api.github.com\/repos\/miracle2k\/tenacity\/git\/blobs{\/sha}","languages_url":"https:\/\/api.github.com\/repos\/miracle2k\/tenacity\/languages","hooks_url":"https:\/\/api.github.com\/repos\/miracle2k\/tenacity\/hooks","open_issues_count":0,"watchers":0,"name":"tenacity","license":{"spdx_id":"Apache-2.0","url":"https:\/\/api.github.com\/licenses\/apache-2.0","name":"Apache License 2.0","key":"apache-2.0"},"url":"https:\/\/api.github.com\/repos\/miracle2k\/tenacity","created_at":"2018-03-28T20:26:31Z","pushed_at":"2018-03-28T20:28:31Z","forks_count":0,"default_branch":"master","teams_url":"https:\/\/api.github.com\/repos\/miracle2k\/tenacity\/teams","open_issues":0,"git_commits_url":"https:\/\/api.github.com\/repos\/miracle2k\/tenacity\/git\/commits{\/sha}","subscribers_url":"https:\/\/api.github.com\/repos\/miracle2k\/tenacity\/subscribers","stargazers_url":"https:\/\/api.github.com\/repos\/miracle2k\/tenacity\/stargazers"},"sha":"4c5fe4b3cbdcdddefcba24529aea1f6a23034ecb","ref":"patch-1","user":{"following_url":"https:\/\/api.github.com\/users\/miracle2k\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/miracle2k\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/miracle2k\/orgs","url":"https:\/\/api.github.com\/users\/miracle2k","events_url":"https:\/\/api.github.com\/users\/miracle2k\/events{\/privacy}","html_url":"https:\/\/github.com\/miracle2k","subscriptions_url":"https:\/\/api.github.com\/users\/miracle2k\/subscriptions","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/13807?v=4","repos_url":"https:\/\/api.github.com\/users\/miracle2k\/repos","received_events_url":"https:\/\/api.github.com\/users\/miracle2k\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/miracle2k\/starred{\/owner}{\/repo}","site_admin":false,"login":"miracle2k","type":"User","id":13807,"followers_url":"https:\/\/api.github.com\/users\/miracle2k\/followers"},"label":"miracle2k:patch-1"},"pastamaker_travis_detail":{"commit_id":107196702,"repository_id":9735174,"jobs":[{"build_id":359553057,"repository_id":9735174,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/359553058\/log","repository_slug":"jd\/tenacity","tags":null,"number":"291.1","allow_failure":false,"queue":"builds.ec2","state":"passed","commit_id":107196702,"finished_at":"2018-03-28T20:29:56Z","started_at":"2018-03-28T20:28:52Z","config":{"group":"stable","install":"pip install tox tox-travis nose","language":"python","script":"tox","python":2.7,".result":"configured","dist":"trusty","addons":{},"os":"linux"},"id":359553058},{"build_id":359553057,"repository_id":9735174,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/359553059\/log","repository_slug":"jd\/tenacity","tags":null,"number":"291.2","allow_failure":false,"queue":"builds.ec2","state":"passed","commit_id":107196702,"finished_at":"2018-03-28T20:30:06Z","started_at":"2018-03-28T20:28:52Z","config":{"group":"stable","install":"pip install tox tox-travis nose","language":"python","script":"tox","python":3.5,".result":"configured","dist":"trusty","addons":{},"os":"linux"},"id":359553059},{"build_id":359553057,"repository_id":9735174,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/359553060\/log","repository_slug":"jd\/tenacity","tags":null,"number":"291.3","allow_failure":false,"queue":"builds.ec2","state":"passed","commit_id":107196702,"finished_at":"2018-03-28T20:30:15Z","started_at":"2018-03-28T20:28:53Z","config":{"group":"stable","install":"pip install tox tox-travis nose","language":"python","script":"tox","python":3.6,".result":"configured","dist":"trusty","addons":{},"os":"linux"},"id":359553060},{"build_id":359553057,"repository_id":9735174,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/359553061\/log","repository_slug":"jd\/tenacity","tags":null,"number":"291.4","allow_failure":false,"queue":"builds.ec2","state":"passed","commit_id":107196702,"finished_at":"2018-03-28T20:30:34Z","started_at":"2018-03-28T20:28:53Z","config":{"group":"stable","install":"pip install tox tox-travis nose","language":"python","script":"tox","python":"pypy",".result":"configured","dist":"trusty","addons":{},"os":"linux"},"id":359553061}],"event_type":"pull_request","finished_at":"2018-03-28T20:30:34Z","number":"291","id":359553057,"state":"passed","pull_request_title":"Document how to use Trio\/curio.","pull_request":true,"duration":321,"started_at":"2018-03-28T20:28:52Z","config":{"group":"stable",".result":"configured","language":"python","script":"tox","python":[2.7,3.5,3.6,"pypy"],"deploy":{"true":{"tags":true},"password":{"secure":"suzaymA+xzruyHuPiIcPIzWAZviuhe5L00nlHL0tN\/zXkfYvxgXAAChI8BSO5bJBgHKXKrBazBUtPel36F62dESION6v6z7JoJEKQixSQCexejwz2eE8RJ3f+D2MB1fqK4IZcbI3HMyyyMJtF149E+iHN4RguLNpgxl24QHYlsZQdeSbmybjrj+su7MOH9BdJAtA1zdOKdljI5CraOlJsRV+MRzleMby2BDmjTJSoPuFFWB2\/Z3BvnAo0YyLsWGCEeO0bKnTqPA8GX\/Poi3u4I76FaFqHPOfbNxRw+oSFtS09hOkNqt+ePZV9n5gqrg9yp3E1YvJIOoNuvUGKtY4TVEhHHeDdQ1XC\/eV4171NhYn+WkcGsvRWTMEgtp5ZL6GvMLwYuoM8DGmfkPHjwtMy1r5ihyHYQwVl2wrxKuUUUsPb2EqfHK7UiGFmS7A0go4yfsUXkEDk1yYGN4KHcYJcfSjTrgXU0dbT8glUe3sJOwX9jeBz3H7e3\/zQ89nR1Xm1WMEWnt\/47OmqGDvpcxtYipKXFmU3A85KBBFb8yjQvwFx2SrlAa\/7Gp3u4niWIQfnl52qOqbh7cAgftDxKqU4w3t4+5sC3VbDbkDMAJAbDgeS+mLc68yX+Q7Yfk9+aLZVKOFJG1SPrQFXDFEeoZ3qej\/gAtjsx3YqwCrinfJXNA="},"distributions":"sdist bdist_wheel","user":"jd","provider":"pypi"},"install":"pip install tox tox-travis nose","dist":"trusty","os":"linux"},"job_ids":[359553058,359553059,359553060,359553061],"pull_request_number":114,"resume_state":"success"},"commits":1,"author_association":"NONE","comments_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/issues\/114\/comments","html_url":"https:\/\/github.com\/jd\/tenacity\/pull\/114","pastamaker_travis_url":"https:\/\/travis-ci.org\/jd\/tenacity\/builds\/359553057?utm_source=github_status&utm_medium=notification","updated_at":"2018-03-28T20:28:44Z","pastamaker_approved":false,"base":{"repo":{"issues_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/issues{\/number}","deployments_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/deployments","has_wiki":true,"forks_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/forks","mirror_url":null,"issue_events_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/issues\/events{\/number}","subscription_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/subscription","merges_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/merges","collaborators_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/collaborators{\/collaborator}","updated_at":"2018-03-28T14:59:59Z","private":false,"pulls_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/pulls{\/number}","issue_comment_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/issues\/comments{\/number}","trees_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/git\/trees{\/sha}","full_name":"jd\/tenacity","owner":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"statuses_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/statuses\/{sha}","id":65468547,"keys_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/keys{\/key_id}","size":235,"tags_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/tags","archived":false,"contributors_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/contributors","downloads_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/downloads","has_downloads":true,"assignees_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/assignees{\/user}","contents_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/contents\/{+path}","has_pages":false,"git_refs_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/git\/refs{\/sha}","has_projects":true,"clone_url":"https:\/\/github.com\/jd\/tenacity.git","watchers_count":843,"git_tags_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/git\/tags{\/sha}","milestones_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/milestones{\/number}","stargazers_count":843,"homepage":"http:\/\/tenacity.readthedocs.io","branches_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/branches{\/branch}","fork":false,"commits_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/commits{\/sha}","releases_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/releases{\/id}","description":"Retrying library for Python","archive_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/{archive_format}{\/ref}","labels_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/labels{\/name}","events_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/events","comments_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/comments{\/number}","html_url":"https:\/\/github.com\/jd\/tenacity","forks":48,"compare_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/compare\/{base}...{head}","language":"Python","git_url":"git:\/\/github.com\/jd\/tenacity.git","svn_url":"https:\/\/github.com\/jd\/tenacity","notifications_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/notifications{?since,all,participating}","has_issues":true,"ssh_url":"git@github.com:jd\/tenacity.git","blobs_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/git\/blobs{\/sha}","languages_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/languages","hooks_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/hooks","open_issues_count":17,"watchers":843,"name":"tenacity","license":{"spdx_id":"Apache-2.0","url":"https:\/\/api.github.com\/licenses\/apache-2.0","name":"Apache License 2.0","key":"apache-2.0"},"url":"https:\/\/api.github.com\/repos\/jd\/tenacity","created_at":"2016-08-11T12:44:02Z","pushed_at":"2018-03-28T20:28:44Z","forks_count":48,"default_branch":"master","teams_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/teams","open_issues":17,"git_commits_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/git\/commits{\/sha}","subscribers_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/subscribers","stargazers_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/stargazers"},"sha":"4bcdd9bcc79fbca38f8836c10a89765f83085239","ref":"master","user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"label":"jd:master"},"rebaseable":true,"milestone":null,"requested_teams":[],"locked":false,"merged_by":null,"url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/pulls\/114","mergeable_state":"blocked","created_at":"2018-03-28T20:28:44Z","merged":false,"review_comments_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/pulls\/114\/comments","review_comments":0,"assignees":[],"review_comment_url":"https:\/\/api.github.com\/repos\/jd\/tenacity\/pulls\/comments{\/number}","pastamaker_approvals":[[],[],1,[0]],"patch_url":"https:\/\/github.com\/jd\/tenacity\/pull\/114.patch","changed_files":1,"user":{"following_url":"https:\/\/api.github.com\/users\/miracle2k\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/miracle2k\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/miracle2k\/orgs","url":"https:\/\/api.github.com\/users\/miracle2k","events_url":"https:\/\/api.github.com\/users\/miracle2k\/events{\/privacy}","html_url":"https:\/\/github.com\/miracle2k","subscriptions_url":"https:\/\/api.github.com\/users\/miracle2k\/subscriptions","avatar_url":"https:\/\/avatars1.githubusercontent.com\/u\/13807?v=4","repos_url":"https:\/\/api.github.com\/users\/miracle2k\/repos","received_events_url":"https:\/\/api.github.com\/users\/miracle2k\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/miracle2k\/starred{\/owner}{\/repo}","site_admin":false,"login":"miracle2k","type":"User","id":13807,"followers_url":"https:\/\/api.github.com\/users\/miracle2k\/followers"}}]},{"owner":"gnocchixyz","repo":"collectd-gnocchi","updated_at":"2018-03-21T15:57:36Z","branch":"master","pulls":[{"deletions":0,"commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/pulls\/23\/commits","merge_commit_sha":"c93cf08c9b6790d53db6573344e75ec50a88f074","labels":[],"number":23,"pastamaker_travis_state":"failure","assignee":null,"pastamaker_weight":-1,"mergeable":true,"closed_at":null,"additions":1,"statuses_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/statuses\/d209cf819be6362d2e409f60f7275a982e077c91","id":168011376,"requested_reviewers":[],"maintainer_can_modify":true,"title":"Set Travis language to Python","comments":2,"merged_at":null,"state":"open","_links":{"review_comment":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/pulls\/comments{\/number}"},"commits":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/pulls\/23\/commits"},"self":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/pulls\/23"},"comments":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/issues\/23\/comments"},"html":{"href":"https:\/\/github.com\/gnocchixyz\/collectd-gnocchi\/pull\/23"},"review_comments":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/pulls\/23\/comments"},"issue":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/issues\/23"},"statuses":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/statuses\/d209cf819be6362d2e409f60f7275a982e077c91"}},"pastamaker_reviews":[{"body":"Custom python of travis is a bit crazy,\r\n\r\nI think we should use generic, so no travis custom python will be installed. You may not need to  remove  \/opt\/python\r\n\r\nOtherwise I have done something like that on cotyledon:\r\n\r\nhttps:\/\/github.com\/sileht\/cotyledon\/blob\/master\/.travis.yaml\r\n","commit_id":"d6a4c227913843a9867db3d35afa5d896dd1f609","submitted_at":"2018-02-08T16:28:05Z","author_association":"OWNER","html_url":"https:\/\/github.com\/gnocchixyz\/collectd-gnocchi\/pull\/23#pullrequestreview-95140258","pull_request_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/pulls\/23","state":"COMMENTED","_links":{"html":{"href":"https:\/\/github.com\/gnocchixyz\/collectd-gnocchi\/pull\/23#pullrequestreview-95140258"},"pull_request":{"href":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/pulls\/23"}},"user":{"following_url":"https:\/\/api.github.com\/users\/sileht\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/sileht\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/sileht\/orgs","url":"https:\/\/api.github.com\/users\/sileht","events_url":"https:\/\/api.github.com\/users\/sileht\/events{\/privacy}","html_url":"https:\/\/github.com\/sileht","subscriptions_url":"https:\/\/api.github.com\/users\/sileht\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/200878?v=4","repos_url":"https:\/\/api.github.com\/users\/sileht\/repos","received_events_url":"https:\/\/api.github.com\/users\/sileht\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/sileht\/starred{\/owner}{\/repo}","site_admin":false,"login":"sileht","type":"User","id":200878,"followers_url":"https:\/\/api.github.com\/users\/sileht\/followers"},"id":95140258}],"pastamaker_commits":[{"files":[{"status":"modified","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/collectd-gnocchi\/raw\/d6a4c227913843a9867db3d35afa5d896dd1f609\/.travis.yml","blob_url":"https:\/\/github.com\/gnocchixyz\/collectd-gnocchi\/blob\/d6a4c227913843a9867db3d35afa5d896dd1f609\/.travis.yml","changes":1,"filename":".travis.yml","sha":"60edad26bbed201281ccecc2f3be48320b2418fd","additions":1,"patch":"@@ -1,3 +1,4 @@\n+language: python\n dist: trusty\n sudo: required\n install:","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/contents\/.travis.yml?ref=d6a4c227913843a9867db3d35afa5d896dd1f609"}],"committer":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"stats":{"deletions":0,"additions":1,"total":1},"author":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/commits\/d6a4c227913843a9867db3d35afa5d896dd1f609","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/commits\/d6a4c227913843a9867db3d35afa5d896dd1f609\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/collectd-gnocchi\/commit\/d6a4c227913843a9867db3d35afa5d896dd1f609","sha":"d6a4c227913843a9867db3d35afa5d896dd1f609","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/commits\/800985126c1ac711f30e64f70d2817a8bb380d14","sha":"800985126c1ac711f30e64f70d2817a8bb380d14","html_url":"https:\/\/github.com\/gnocchixyz\/collectd-gnocchi\/commit\/800985126c1ac711f30e64f70d2817a8bb380d14"}],"commit":{"committer":{"date":"2018-02-08T15:54:29Z","name":"Julien Danjou","email":"julien@danjou.info"},"author":{"date":"2018-02-08T15:54:29Z","name":"Julien Danjou","email":"julien@danjou.info"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/git\/commits\/d6a4c227913843a9867db3d35afa5d896dd1f609","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/git\/trees\/294fed584fca16155e9ed5255814340f8852b3db","sha":"294fed584fca16155e9ed5255814340f8852b3db"},"comment_count":0,"verification":{"reason":"unsigned","verified":false,"payload":null,"signature":null},"message":"Set Travis language to Python\n\nIt defaults to Ruby otherwise and it's scary."}},{"files":[{"status":"modified","deletions":0,"raw_url":"https:\/\/github.com\/gnocchixyz\/collectd-gnocchi\/raw\/d209cf819be6362d2e409f60f7275a982e077c91\/collectd_gnocchi\/__init__.py","blob_url":"https:\/\/github.com\/gnocchixyz\/collectd-gnocchi\/blob\/d209cf819be6362d2e409f60f7275a982e077c91\/collectd_gnocchi\/__init__.py","changes":4,"filename":"collectd_gnocchi\/__init__.py","sha":"eb91f8a8c3bbeaacec1a682e377ee5f96994dbd9","additions":4,"patch":"@@ -70,6 +70,10 @@\n     \"ps_pagefaults\": [\"-min\", \"-max\"],\n     \"io_octets\": [\"-read\", \"-write\"],\n     \"io_ops\": [\"-read\", \"-write\"],\n+\n+    # https:\/\/github.com\/collectd\/collectd\/blob\/master\/src\/memcached.c#L599\n+    \"memcached_octets\": [\"-read\", \"-write\"],\n+    \"df\": [\"-used\", \"-free\"],\n }\n \n ","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/contents\/collectd_gnocchi\/__init__.py?ref=d209cf819be6362d2e409f60f7275a982e077c91"}],"committer":{"following_url":"https:\/\/api.github.com\/users\/web-flow\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/web-flow\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/web-flow\/orgs","url":"https:\/\/api.github.com\/users\/web-flow","events_url":"https:\/\/api.github.com\/users\/web-flow\/events{\/privacy}","html_url":"https:\/\/github.com\/web-flow","subscriptions_url":"https:\/\/api.github.com\/users\/web-flow\/subscriptions","avatar_url":"https:\/\/avatars3.githubusercontent.com\/u\/19864447?v=4","repos_url":"https:\/\/api.github.com\/users\/web-flow\/repos","received_events_url":"https:\/\/api.github.com\/users\/web-flow\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/web-flow\/starred{\/owner}{\/repo}","site_admin":false,"login":"web-flow","type":"User","id":19864447,"followers_url":"https:\/\/api.github.com\/users\/web-flow\/followers"},"stats":{"deletions":0,"additions":4,"total":4},"author":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/commits\/d209cf819be6362d2e409f60f7275a982e077c91","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/commits\/d209cf819be6362d2e409f60f7275a982e077c91\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/collectd-gnocchi\/commit\/d209cf819be6362d2e409f60f7275a982e077c91","sha":"d209cf819be6362d2e409f60f7275a982e077c91","parents":[{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/commits\/d6a4c227913843a9867db3d35afa5d896dd1f609","sha":"d6a4c227913843a9867db3d35afa5d896dd1f609","html_url":"https:\/\/github.com\/gnocchixyz\/collectd-gnocchi\/commit\/d6a4c227913843a9867db3d35afa5d896dd1f609"},{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/commits\/7109d36c95caa731acb51401c676f9edb5e3c3c7","sha":"7109d36c95caa731acb51401c676f9edb5e3c3c7","html_url":"https:\/\/github.com\/gnocchixyz\/collectd-gnocchi\/commit\/7109d36c95caa731acb51401c676f9edb5e3c3c7"}],"commit":{"committer":{"date":"2018-03-21T15:57:35Z","name":"GitHub","email":"noreply@github.com"},"author":{"date":"2018-03-21T15:57:35Z","name":"Julien Danjou","email":"julien@danjou.info"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/git\/commits\/d209cf819be6362d2e409f60f7275a982e077c91","tree":{"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/git\/trees\/b04e3d8bd297f4817e88007a6fa0f8c4fd38d3a5","sha":"b04e3d8bd297f4817e88007a6fa0f8c4fd38d3a5"},"comment_count":0,"verification":{"reason":"valid","verified":true,"payload":"tree b04e3d8bd297f4817e88007a6fa0f8c4fd38d3a5\nparent d6a4c227913843a9867db3d35afa5d896dd1f609\nparent 7109d36c95caa731acb51401c676f9edb5e3c3c7\nauthor Julien Danjou <julien@danjou.info> 1521647855 +0100\ncommitter GitHub <noreply@github.com> 1521647855 +0100\n\nMerge branch 'master' into travis-python","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJasoDvCRBK7hj4Ov3rIwAAdHIIAHAErdNLgvw\/AZC2e1C37xMg\nrRsa+iYr+F\/1EqdC7fmisqc8gI5b0pTPPvtm9xLWMi4JTprb+n9ZACY1BahgdRLb\ndJ1i\/WEX4MvkSPlZUqUdHE41TipoLTvvfDdM5\/YW9qAax6D24Kf6zW+hEteS0G9d\nrkr1+fcmjJYko5Z4+lnk1q32ByiX51j59SAaoK3orcQz1g6SemC3pdQrfEic3TNZ\nKDH3HB1756wqS2m148A0TFOo2RRjzOcFyJvlQRcAhEHLTXGCE8JSy+Wc8XFxkylY\nzlYTsqie2vCckUxfDZfUo0mDToB3KwWT4i\/TeWP3tRfFiArAtkmIuy5KFe1\/P5c=\n=KT4M\n-----END PGP SIGNATURE-----\n"},"message":"Merge branch 'master' into travis-python"}}],"diff_url":"https:\/\/github.com\/gnocchixyz\/collectd-gnocchi\/pull\/23.diff","pastamaker_ci_statuses":{},"issue_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/issues\/23","body":"It defaults to Ruby otherwise and it's scary.","head":{"repo":{"issues_url":"https:\/\/api.github.com\/repos\/jd\/collectd-gnocchi\/issues{\/number}","deployments_url":"https:\/\/api.github.com\/repos\/jd\/collectd-gnocchi\/deployments","has_wiki":false,"forks_url":"https:\/\/api.github.com\/repos\/jd\/collectd-gnocchi\/forks","mirror_url":null,"issue_events_url":"https:\/\/api.github.com\/repos\/jd\/collectd-gnocchi\/issues\/events{\/number}","subscription_url":"https:\/\/api.github.com\/repos\/jd\/collectd-gnocchi\/subscription","merges_url":"https:\/\/api.github.com\/repos\/jd\/collectd-gnocchi\/merges","collaborators_url":"https:\/\/api.github.com\/repos\/jd\/collectd-gnocchi\/collaborators{\/collaborator}","updated_at":"2017-06-29T14:29:04Z","private":false,"pulls_url":"https:\/\/api.github.com\/repos\/jd\/collectd-gnocchi\/pulls{\/number}","issue_comment_url":"https:\/\/api.github.com\/repos\/jd\/collectd-gnocchi\/issues\/comments{\/number}","trees_url":"https:\/\/api.github.com\/repos\/jd\/collectd-gnocchi\/git\/trees{\/sha}","full_name":"jd\/collectd-gnocchi","owner":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"statuses_url":"https:\/\/api.github.com\/repos\/jd\/collectd-gnocchi\/statuses\/{sha}","id":95786278,"keys_url":"https:\/\/api.github.com\/repos\/jd\/collectd-gnocchi\/keys{\/key_id}","size":49,"tags_url":"https:\/\/api.github.com\/repos\/jd\/collectd-gnocchi\/tags","archived":false,"contributors_url":"https:\/\/api.github.com\/repos\/jd\/collectd-gnocchi\/contributors","downloads_url":"https:\/\/api.github.com\/repos\/jd\/collectd-gnocchi\/downloads","has_downloads":true,"assignees_url":"https:\/\/api.github.com\/repos\/jd\/collectd-gnocchi\/assignees{\/user}","contents_url":"https:\/\/api.github.com\/repos\/jd\/collectd-gnocchi\/contents\/{+path}","has_pages":false,"git_refs_url":"https:\/\/api.github.com\/repos\/jd\/collectd-gnocchi\/git\/refs{\/sha}","has_projects":true,"clone_url":"https:\/\/github.com\/jd\/collectd-gnocchi.git","watchers_count":0,"git_tags_url":"https:\/\/api.github.com\/repos\/jd\/collectd-gnocchi\/git\/tags{\/sha}","milestones_url":"https:\/\/api.github.com\/repos\/jd\/collectd-gnocchi\/milestones{\/number}","stargazers_count":0,"homepage":null,"branches_url":"https:\/\/api.github.com\/repos\/jd\/collectd-gnocchi\/branches{\/branch}","fork":true,"commits_url":"https:\/\/api.github.com\/repos\/jd\/collectd-gnocchi\/commits{\/sha}","releases_url":"https:\/\/api.github.com\/repos\/jd\/collectd-gnocchi\/releases{\/id}","description":"Gnocchi storage plugin for collectd","archive_url":"https:\/\/api.github.com\/repos\/jd\/collectd-gnocchi\/{archive_format}{\/ref}","labels_url":"https:\/\/api.github.com\/repos\/jd\/collectd-gnocchi\/labels{\/name}","events_url":"https:\/\/api.github.com\/repos\/jd\/collectd-gnocchi\/events","comments_url":"https:\/\/api.github.com\/repos\/jd\/collectd-gnocchi\/comments{\/number}","html_url":"https:\/\/github.com\/jd\/collectd-gnocchi","forks":0,"compare_url":"https:\/\/api.github.com\/repos\/jd\/collectd-gnocchi\/compare\/{base}...{head}","language":"Python","git_url":"git:\/\/github.com\/jd\/collectd-gnocchi.git","svn_url":"https:\/\/github.com\/jd\/collectd-gnocchi","notifications_url":"https:\/\/api.github.com\/repos\/jd\/collectd-gnocchi\/notifications{?since,all,participating}","has_issues":false,"ssh_url":"git@github.com:jd\/collectd-gnocchi.git","blobs_url":"https:\/\/api.github.com\/repos\/jd\/collectd-gnocchi\/git\/blobs{\/sha}","languages_url":"https:\/\/api.github.com\/repos\/jd\/collectd-gnocchi\/languages","hooks_url":"https:\/\/api.github.com\/repos\/jd\/collectd-gnocchi\/hooks","open_issues_count":0,"watchers":0,"name":"collectd-gnocchi","license":null,"url":"https:\/\/api.github.com\/repos\/jd\/collectd-gnocchi","created_at":"2017-06-29T14:29:03Z","pushed_at":"2018-03-21T15:57:36Z","forks_count":0,"default_branch":"master","teams_url":"https:\/\/api.github.com\/repos\/jd\/collectd-gnocchi\/teams","open_issues":0,"git_commits_url":"https:\/\/api.github.com\/repos\/jd\/collectd-gnocchi\/git\/commits{\/sha}","subscribers_url":"https:\/\/api.github.com\/repos\/jd\/collectd-gnocchi\/subscribers","stargazers_url":"https:\/\/api.github.com\/repos\/jd\/collectd-gnocchi\/stargazers"},"sha":"d209cf819be6362d2e409f60f7275a982e077c91","ref":"travis-python","user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"},"label":"jd:travis-python"},"pastamaker_travis_detail":{"commit_id":106192009,"repository_id":10490181,"jobs":[{"build_id":356423781,"repository_id":10490181,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/356423782\/log","repository_slug":"gnocchixyz\/collectd-gnocchi","tags":null,"number":"126.1","allow_failure":false,"queue":"builds.gce","state":"failed","commit_id":106192009,"finished_at":"2018-03-21T15:59:10Z","started_at":"2018-03-21T15:58:17Z","config":{"dist":"trusty","env":"TOXENV=py27","language":"python","script":["tox"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"on_failure":"always","on_success":"change"},"email":false},".result":"configured","install":["sudo service postgresql stop","sudo apt-get install python-pip postgresql collectd","sudo rm -rf \/opt\/python","sudo pip install -U pip tox"],"group":"stable","addons":{},"os":"linux"},"id":356423782},{"build_id":356423781,"repository_id":10490181,"stage_id":null,"log_url":"https:\/\/api.travis-ci.org\/jobs\/356423785\/log","repository_slug":"gnocchixyz\/collectd-gnocchi","tags":null,"number":"126.2","allow_failure":false,"queue":"builds.gce","state":"passed","commit_id":106192009,"finished_at":"2018-03-21T15:59:50Z","started_at":"2018-03-21T15:58:46Z","config":{"dist":"trusty","env":"TOXENV=pep8","language":"python","script":["tox"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"on_failure":"always","on_success":"change"},"email":false},".result":"configured","install":["sudo service postgresql stop","sudo apt-get install python-pip postgresql collectd","sudo rm -rf \/opt\/python","sudo pip install -U pip tox"],"group":"stable","addons":{},"os":"linux"},"id":356423785}],"event_type":"pull_request","finished_at":"2018-03-21T15:59:50Z","number":"126","id":356423781,"state":"failed","pull_request_title":"Set Travis language to Python","pull_request":true,"duration":117,"started_at":"2018-03-21T15:58:17Z","config":{"dist":"trusty","env":["TOXENV=py27","TOXENV=pep8"],"language":"python","script":["tox"],"sudo":"required","notifications":{"irc":{"channels":["irc.freenode.org#gnocchi"],"on_failure":"always","on_success":"change"},"email":false},".result":"configured","install":["sudo service postgresql stop","sudo apt-get install python-pip postgresql collectd","sudo rm -rf \/opt\/python","sudo pip install -U pip tox"],"group":"stable","os":"linux","deploy":{"true":{"tags":true},"password":{"secure":"NIdJThMqD1cIAyC7gvrear6fo\/fj7BubQh\/3dI4eQxjFpewUpj0CDWE22OZzGDHcJHIkdU1X4kKQWnPj5nbQnCbfeqA2T7pKnZ3BHi898f7gEONQRPa4Ak8dBAWocdVgClcFQ9EpzEoWKxALiIX\/S3HGBr1+H6FDCRAyerZtOeaYj1vfak7CTCs4dM1fu\/L21EJRLiX5+rTnthyivoFj32CIxOzcCv8UWKPbwv5EisH2vocH7Tu0lvDLoK8EPdsryGQqC3Av2BFc0RfnpK8sXIvBCusi5ZeHgKlq8R4prasWEvtDvJgkNYyD7nBUZnnfVJ3exdasno1HxoIqn77dHBiQE0TqhPRWDnPcqhz8H87Xe6i8JNczcp\/T131hxGTVHBBcNMwNOQsBWC+EUeebj57vEhLwpu1BdVI\/0Rha8UCxUXOc3Ay1G9rMnedvUtiBhCQ5MsLh\/PlWmGUXyDMYmtMIJhiUAgPEJUms+Ww90K1hpMyI3fESdW10JoSrvsIsRcAAKHWs+j3ZIRTfE2kCoDe330sT1pbnMjucKws\/rsU05o7Y\/3mT4AGT\/FywCX5v\/JqEr32jIWQaWKo0p7sm10FBL\/JI9Adp0S7bfExcWrH\/3P4vlBbcLmwVQ+BSVjPgDcU7BBZ7AFoKugnZnpACvNP5YZL8W823MQs7sk6rnRg="},"distributions":"sdist bdist_wheel","user":"jd","provider":"pypi"}},"job_ids":[356423782,356423785],"pull_request_number":23,"resume_state":"failure"},"commits":2,"author_association":"OWNER","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/issues\/23\/comments","html_url":"https:\/\/github.com\/gnocchixyz\/collectd-gnocchi\/pull\/23","pastamaker_travis_url":"https:\/\/travis-ci.org\/gnocchixyz\/collectd-gnocchi\/builds\/356423781?utm_source=github_status&utm_medium=notification","updated_at":"2018-03-21T15:57:36Z","pastamaker_approved":false,"base":{"repo":{"issues_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/issues{\/number}","deployments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/deployments","has_wiki":false,"forks_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/forks","mirror_url":null,"issue_events_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/issues\/events{\/number}","subscription_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/subscription","merges_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/merges","collaborators_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/collaborators{\/collaborator}","updated_at":"2018-02-05T11:55:50Z","private":false,"pulls_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/pulls{\/number}","issue_comment_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/issues\/comments{\/number}","trees_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/git\/trees{\/sha}","full_name":"gnocchixyz\/collectd-gnocchi","owner":{"following_url":"https:\/\/api.github.com\/users\/gnocchixyz\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/gnocchixyz\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/gnocchixyz\/orgs","url":"https:\/\/api.github.com\/users\/gnocchixyz","events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/events{\/privacy}","html_url":"https:\/\/github.com\/gnocchixyz","subscriptions_url":"https:\/\/api.github.com\/users\/gnocchixyz\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/26142905?v=4","repos_url":"https:\/\/api.github.com\/users\/gnocchixyz\/repos","received_events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/gnocchixyz\/starred{\/owner}{\/repo}","site_admin":false,"login":"gnocchixyz","type":"Organization","id":26142905,"followers_url":"https:\/\/api.github.com\/users\/gnocchixyz\/followers"},"statuses_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/statuses\/{sha}","id":70574232,"keys_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/keys{\/key_id}","size":53,"tags_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/tags","archived":false,"contributors_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/contributors","downloads_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/downloads","has_downloads":true,"assignees_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/assignees{\/user}","contents_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/contents\/{+path}","has_pages":false,"git_refs_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/git\/refs{\/sha}","has_projects":false,"clone_url":"https:\/\/github.com\/gnocchixyz\/collectd-gnocchi.git","watchers_count":7,"git_tags_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/git\/tags{\/sha}","milestones_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/milestones{\/number}","stargazers_count":7,"homepage":null,"branches_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/branches{\/branch}","fork":false,"commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/commits{\/sha}","releases_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/releases{\/id}","description":"Gnocchi storage plugin for collectd","archive_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/{archive_format}{\/ref}","labels_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/labels{\/name}","events_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/events","comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/comments{\/number}","html_url":"https:\/\/github.com\/gnocchixyz\/collectd-gnocchi","forks":9,"compare_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/compare\/{base}...{head}","language":"Python","git_url":"git:\/\/github.com\/gnocchixyz\/collectd-gnocchi.git","svn_url":"https:\/\/github.com\/gnocchixyz\/collectd-gnocchi","notifications_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/notifications{?since,all,participating}","has_issues":true,"ssh_url":"git@github.com:gnocchixyz\/collectd-gnocchi.git","blobs_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/git\/blobs{\/sha}","languages_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/languages","hooks_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/hooks","open_issues_count":1,"watchers":7,"name":"collectd-gnocchi","license":{"spdx_id":null,"url":null,"name":"Other","key":"other"},"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi","created_at":"2016-10-11T08:48:22Z","pushed_at":"2018-03-21T15:57:38Z","forks_count":9,"default_branch":"master","teams_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/teams","open_issues":1,"git_commits_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/git\/commits{\/sha}","subscribers_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/subscribers","stargazers_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/stargazers"},"sha":"7109d36c95caa731acb51401c676f9edb5e3c3c7","ref":"master","user":{"following_url":"https:\/\/api.github.com\/users\/gnocchixyz\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/gnocchixyz\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/gnocchixyz\/orgs","url":"https:\/\/api.github.com\/users\/gnocchixyz","events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/events{\/privacy}","html_url":"https:\/\/github.com\/gnocchixyz","subscriptions_url":"https:\/\/api.github.com\/users\/gnocchixyz\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/26142905?v=4","repos_url":"https:\/\/api.github.com\/users\/gnocchixyz\/repos","received_events_url":"https:\/\/api.github.com\/users\/gnocchixyz\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/gnocchixyz\/starred{\/owner}{\/repo}","site_admin":false,"login":"gnocchixyz","type":"Organization","id":26142905,"followers_url":"https:\/\/api.github.com\/users\/gnocchixyz\/followers"},"label":"gnocchixyz:master"},"rebaseable":true,"milestone":null,"requested_teams":[],"locked":false,"merged_by":null,"url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/pulls\/23","mergeable_state":"blocked","created_at":"2018-02-08T15:54:58Z","merged":false,"review_comments_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/pulls\/23\/comments","review_comments":0,"assignees":[],"review_comment_url":"https:\/\/api.github.com\/repos\/gnocchixyz\/collectd-gnocchi\/pulls\/comments{\/number}","pastamaker_comments":[],"pastamaker_approvals":[[],[],1,[0]],"patch_url":"https:\/\/github.com\/gnocchixyz\/collectd-gnocchi\/pull\/23.patch","changed_files":1,"user":{"following_url":"https:\/\/api.github.com\/users\/jd\/following{\/other_user}","gists_url":"https:\/\/api.github.com\/users\/jd\/gists{\/gist_id}","organizations_url":"https:\/\/api.github.com\/users\/jd\/orgs","url":"https:\/\/api.github.com\/users\/jd","events_url":"https:\/\/api.github.com\/users\/jd\/events{\/privacy}","html_url":"https:\/\/github.com\/jd","subscriptions_url":"https:\/\/api.github.com\/users\/jd\/subscriptions","avatar_url":"https:\/\/avatars0.githubusercontent.com\/u\/2644?v=4","repos_url":"https:\/\/api.github.com\/users\/jd\/repos","received_events_url":"https:\/\/api.github.com\/users\/jd\/received_events","gravatar_id":"","starred_url":"https:\/\/api.github.com\/users\/jd\/starred{\/owner}{\/repo}","site_admin":false,"login":"jd","type":"User","id":2644,"followers_url":"https:\/\/api.github.com\/users\/jd\/followers"}}]}]